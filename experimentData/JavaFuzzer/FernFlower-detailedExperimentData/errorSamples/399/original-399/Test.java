// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:51:24 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=1821961752287876664L;
    public static double dFld=2.38430;
    public int iFld=-3;
    public static float fFld=78.6F;
    public static boolean bFld=false;
    public volatile byte byFld=18;
    public short sFld=-15127;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, long l, double d) {

        int i3=23554, i4=1600, i5=34837, i6=-61675;
        float f=72.648F;
        short s1=484;

        i2 -= i2;
        for (i3 = 143; i3 > 1; i3--) {
            i5 = 1;
            do {
                for (f = 1; f < 1; f++) {
                    byte by=9;
                    by = (byte)i2;
                    by = (byte)-23792;
                    i2 -= i5;
                    d += l;
                    i6 += (int)(((f * i6) + s1) - i5);
                    i2 += (int)Test.instanceCount;
                    l += i5;
                }
                i2 >>= s1;
                i6 *= (int)-33.9548;
                i2 += i4;
                i2 = i2;
            } while (++i5 < 11);
        }
        long meth_res = i2 + l + Double.doubleToLongBits(d) + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth() {

        int i=-232, i1=-8, i7=-2, i8=22431, i9=64728, i10=-49849, i11=21102, i12=84, i13=-185, i14=0, iArr[]=new int[N];
        short s=-11995;
        byte by1=-31;
        float f1=0.394F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.383F);
        FuzzerUtils.init(lArr, -3089688151L);
        FuzzerUtils.init(iArr, 55956);

        for (i = 342; i > 16; i--) {
            fArr[i] -= (((-(i1 - s)) + (103.596F + iMeth(i1, Test.instanceCount, Test.dFld))) - 43490);
            switch ((i % 10) + 57) {
            case 57:
                i7 = 1;
                while (++i7 < 5) {
                    lArr[i7 + 1] &= i;
                }
                for (i8 = 1; i8 < 5; ++i8) {
                    for (i10 = 1; i10 < 2; i10++) {
                        i9 += (i10 * i1);
                        i9 += (int)Test.dFld;
                        i12 = by1;
                    }
                    Test.instanceCount -= i1;
                    for (i13 = 1; i13 < 2; ++i13) {
                        i9 >>= i10;
                        if (true) break;
                    }
                    if (i7 != 0) {
                    }
                }
                break;
            case 58:
                lArr[i] >>= i8;
                break;
            case 59:
                lArr[i] -= -6L;
                break;
            case 60:
                i1 = -48502;
                break;
            case 61:
                f1 -= i;
            case 62:
                fArr[i + 1] += Test.instanceCount;
                break;
            case 63:
                f1 += Test.instanceCount;
                break;
            case 64:
                i14 = i12;
                break;
            case 65:
                f1 = by1;
                break;
            case 66:
                i9 = 14;
                break;
            default:
                try {
                    i9 = (iArr[i - 1] / 788266506);
                    i14 = (-134 / i7);
                    i12 = (i14 % -21855);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i + i1 + s + i7 + i8 + i9 + i10 + i11 + i12 + by1 + i13 + i14 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth() {

        float f2=0.313F;
        int i15=6088, i16=62254, iArr1[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -50898L);
        FuzzerUtils.init(iArr1, 9);

        byMeth();
        for (long l1 : lArr1) {
            iFld = iFld;
            f2 -= Test.instanceCount;
            Test.instanceCount = (long)2.22F;
            iFld = iFld;
            iArr1[(iFld >>> 1) % N] >>>= iFld;
            for (i15 = 1; i15 < 4; ++i15) {
                iFld += (i15 ^ i16);
                Test.instanceCount = Test.instanceCount;
                iFld += i15;
                Test.instanceCount = i16;
                iFld = iFld;
                f2 -= i15;
                i16 += i15;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i15 + i16 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i17=-63964, i18=60528, i19=-2, i20=-3, i21=-56824, i22=-7, i23=-243;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 221L);

        vMeth();
        for (i17 = 377; i17 > 9; i17--) {
            Test.instanceCount <<= iFld;
        }
        iFld -= i18;
        Test.fFld += (float)Test.dFld;
        iFld = iFld;
        lArr2 = lArr2;
        for (i19 = 9; i19 < 190; i19++) {
            for (i21 = 139; i21 > 3; --i21) {
                Test.iArrFld = FuzzerUtils.int1array(N, (int)-86);
                Test.instanceCount = i17;
                switch ((i19 % 1) + 75) {
                case 75:
                    if (Test.bFld) continue;
                    iFld += i21;
                    Test.instanceCount *= Test.instanceCount;
                    if (Test.bFld) {
                        Test.dFld = Test.fFld;
                        Test.iArrFld[i19] = (int)Test.instanceCount;
                        i20 += i18;
                    } else {
                        i20 = 201;
                        i20 = i17;
                        i18 += (((i21 * Test.fFld) + byFld) - iFld);
                    }
                    break;
                default:
                    Test.fFld -= i22;
                    i23 = 2;
                    while ((i23 -= 2) > 0) {
                        Test.instanceCount -= -1;
                        sFld += (short)(i23 | Test.instanceCount);
                        Test.instanceCount += 125;
                        i20 += (((i23 * iFld) + i17) - Test.fFld);
                        Test.iArrFld[i21 + 1] &= i22;
                        i20 = sFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 lArr2 = " + i23 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + iFld);
        FuzzerUtils.out.println("Test.fFld Test.bFld byFld = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1
            : 0) + "," + byFld);
        FuzzerUtils.out.println("sFld Test.iArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
