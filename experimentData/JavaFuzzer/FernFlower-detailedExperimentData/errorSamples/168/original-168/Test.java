// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:29:55 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-8L;
    public static short sFld=20299;
    public static volatile float fFld=42.963F;
    public static double dFld=0.87786;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -60.656F);
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.iArrFld1, -10);
        FuzzerUtils.init(Test.lArrFld, -13L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {

        int i8=64573, i9=-1, i10=-8, i11=196, i12=103;
        float f=-73.448F;
        boolean b=true;
        double d=0.36287;

        i8 = i8;
        i8 >>= i8;
        for (i9 = 7; i9 < 126; ++i9) {
            i8 += i8;
            for (i11 = 13; i11 > 1; --i11) {
                Test.fArrFld[i9 + 1] -= Test.sFld;
                i8 *= (int)f;
                f = i11;
                b = b;
                i8 += (i11 | i12);
                d += Test.instanceCount;
                b = b;
                if (b) continue;
                i10 += (i11 + Test.instanceCount);
            }
            Test.fFld /= (i9 | 1);
        }
        long meth_res = l + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f) + (b ? 1 : 0) +
            Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i5=-157, i6=15, i7=25151, i14=-47664, i15=-92, i16=52921, i17=3, iArr[]=new int[N];
        double d1=1.102163;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 60L);
        FuzzerUtils.init(iArr, 10);

        lArr[(i5 >>> 1) % N] = (i5 - i5);
        for (i6 = 6; i6 < 233; i6++) {
            Test.sFld += (short)(iMeth(Test.instanceCount) * -99.7755);
            d1 -= i6;
            i5 = i6;
            i5 = (int)-31029L;
            Test.fFld += (i6 + i5);
            Test.fFld = i5;
        }
        for (int i13 : iArr) {
            for (i14 = 1; i14 < 4; i14++) {
                Test.fFld = Test.fFld;
            }
            Test.instanceCount += i7;
            for (i16 = 1; i16 < 4; i16++) {
                i5 += (i16 - Test.instanceCount);
            }
            i7 += i13;
        }
        vMeth1_check_sum += i5 + i6 + i7 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i, int i1, int i2) {

        int i3=-1, i4=-13, i18=35767, i19=-14, i20=-60287, i21=203, i22=0, iArr1[]=new int[N];
        short s=17553;
        long l1=26153L;

        FuzzerUtils.init(iArr1, 209);

        i3 = 238;
        while ((i3 -= 3) > 0) {
            i1 += (i3 * i2);
            i4 += (((i3 * i) + i4) - s);
            i4 >>>= (-6956 * i2);
        }
        vMeth1();
        for (l1 = 9; l1 < 178; l1 += 3) {
            for (i19 = (int)(l1); i19 < 27; ++i19) {
                iArr1[i19] += (int)Test.instanceCount;
                i20 += i18;
                i2 ^= s;
            }
            switch (((i3 >>> 1) % 1) + 67) {
            case 67:
            default:
                Test.dFld = i;
                for (i21 = 1; i21 < 27; ++i21) {
                    Test.instanceCount *= i3;
                    i += (i21 ^ i18);
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + s + l1 + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i23=14, i24=13, i25=20808, i26=-182, i27=-248, i28=56853, i29=-19775, i30=-63336, i31=-14, i32=107,
            i33=4691, i34=244;
        boolean b1=false;

        vMeth(i23, i23, i23);
        i23 -= (int)Test.instanceCount;
        for (i24 = 14; i24 < 235; ++i24) {
            i23 = i25;
            i25 += i23;
            for (i26 = 114; i26 > 7; --i26) {
                i27 *= i23;
                for (i28 = 2; i28 > 1; --i28) {
                    if (b1) break;
                }
                i23 -= (int)Test.fFld;
                try {
                    i27 = (Test.iArrFld[i26 + 1] / Test.iArrFld1[i24 - 1]);
                    Test.iArrFld1[i26] = (Test.iArrFld1[i26] / 2135);
                    i27 = (i25 / 1430829216);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount = i23;
                i30 = 1;
                do {
                    Test.lArrFld[i24] -= (long)1.149F;
                    i27 = i27;
                    i29 += i29;
                    if (b1) continue;
                } while (++i30 < 2);
                i23 += i26;
            }
            for (i31 = 4; i31 < 114; i31++) {
                Test.instanceCount ^= i24;
                switch ((i24 % 4) + 19) {
                case 19:
                    i27 >>= 9157;
                    if (b1) break;
                    break;
                case 20:
                case 21:
                    i32 -= i26;
                    Test.iArrFld[i31] %= (int)(Test.sFld | 1);
                    break;
                case 22:
                    i29 = (int)Test.instanceCount;
                    Test.instanceCount = i30;
                    break;
                default:
                    for (i33 = 1; i33 < 2; ++i33) {
                        i34 *= i27;
                    }
                    Test.instanceCount += i31;
                }
            }
        }

        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 b1 i30 = " + i29 + "," + (b1 ? 1 : 0) + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 = " + i34);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.fArrFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
