import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 02:26:23 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-11L;
    public static volatile int iFld=63;
    public boolean bFld=false;
    public int iFld1=-98;
    public int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        float f1=0.854F;
        int i6=10, i7=-13, i8=60186, i9=0, iArr[][]=new int[N][N], iArr1[][][]=new int[N][N][N];
        long lArr[]=new long[N];

        init(lArr, 0L);
        init(iArr, -9852);
        init(iArr1, -12);

        Test.instanceCount += Test.instanceCount;
        for (f1 = 10; f1 < 264; f1++) {
            for (i7 = 6; i7 > 1; i7--) {
                lArr = lArr;
                iArr[i7][(int)(f1)] += i8;
                i6 += (((i7 * f1) + f1) - Test.instanceCount);
                iArr[i7 + 1][(int)(f1 + 1)] = (int)Test.instanceCount;
                iArr1[i7][(int)(f1)][i7 + 1] -= (int)Test.instanceCount;
                switch ((i7 % 2) + 38) {
                    case 38:
                        i6 += (i7 | (long)f1);
                        switch ((int)(((f1 % 1) * 5) + 69)) {
                            case 70:
                                lArr = lArr;
                                try {
                                    i6 = (i6 / -48060);
                                    iArr[i7 - 1][i7 + 1] = (-113 / i9);
                                    iArr[i7 - 1][(int)(f1 + 1)] = (232 % iArr[(int)(f1 + 1)][(int)(f1)]);
                                } catch (ArithmeticException a_e) {}
                                iArr[(int)(f1)] = iArr[(int)(f1)];
                                i6 += (i7 * i7);
                                break;
                            default:
                                i8 = (int)Test.instanceCount;
                        }
                    case 39:
                        i6 += (((i7 * i7) + i9) - Test.iFld);
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + checkSum(lArr) +
                checkSum(iArr) + checkSum(iArr1);
    }

    public static void vMeth1(float f, int i5) {

        float f2=-2.395F;
        int i10=226, i11=2, i12=-192, i13=46, i14=14078, iArr2[][][]=new int[N][N][N];
        short s=22639;
        boolean b=true;
        double dArr[]=new double[N];

        init(iArr2, -20);
        init(dArr, 3.112165);

        vMeth2();
        i5 *= i5;
        if (b) {
            Test.iFld = i5;
        } else if (b) {
            try {
                Test.iFld *= -55979;
                for (f2 = 4; f2 < 258; ++f2) {
                    for (i11 = 6; 1 < i11; i11 -= 3) {
                        Test.iFld = 108;
                        for (i13 = i11; i13 < 6; ++i13) {
                            iArr2[i11][(int)(f2)][(int)(f2)] >>= (int)3392971540L;
                            iArr2[(int)(f2)][(int)(f2)][i13 + 1] = i5;
                            dArr[i11] = s;
                            Test.iFld -= (int)-1.79993;
                            Test.instanceCount += (((i13 * i11) + i11) - Test.instanceCount);
                        }
                    }
                }
            }
            catch (UserDefinedExceptionTest exc2) {
                i5 = i12;
            }
        } else {
            Test.instanceCount = Test.instanceCount;
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i5 + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 + i14 + s +
                (b ? 1 : 0) + checkSum(iArr2) + Double.doubleToLongBits(checkSum(dArr));
    }

    public void vMeth(int i, long l, int i1) {

        int i2=1, i3=-124, i4=-157, i15=8, i16=52, i17=41;
        double d=117.27922;

        Test.instanceCount >>= 43983;
        for (i2 = 3; 167 > i2; i2 += 2) {
            l = ((Long.reverseBytes(Test.instanceCount) - (--i3)) & ((Test.instanceCount = i3) % ((11 -
                    (--iArrFld[i2])) | 1)));
            for (d = 1; d < 19; d++) {
                switch (((i2 % 2) * 5) + 47) {
                    case 56:
                        vMeth1(100.618F, i4);
                        break;
                    case 54:
                        iArrFld[(int)(d - 1)] = i4;
                        break;
                }
                i1 = i15;
                for (i16 = 1; 2 > i16; i16++) {
                    i4 = i3;
                    i1 = 0;
                    bFld = bFld;
                }
                Test.instanceCount -= -2;
            }
            i1 = i1;
            i17 += (i2 | Test.instanceCount);
        }
        vMeth_check_sum += i + l + i1 + i2 + i3 + Double.doubleToLongBits(d) + i4 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        double d1=2.118649;
        int i18=-4, i19=-44792, i20=157, i21=13, i22=-108;
        float f3=-46.208F;
        byte by=-20;

        vMeth(6, Test.instanceCount, Test.iFld);
        Test.iFld <<= Test.iFld;
        lArrFld = long1array(N, (long)8311270115264725562L);
        Test.iFld += (int)d1;
        Test.instanceCount -= Test.iFld;
        lArrFld[(Test.iFld >>> 1) % N] += Test.iFld;
        Test.instanceCount = Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        for (i18 = 8; i18 < 177; i18++) {
            i19 >>>= -26072;
            Test.instanceCount += (i18 - i18);
            Test.instanceCount += (((i18 * Test.iFld) + i19) - Test.iFld);
            i19 += (i18 * i19);
            i19 >>= i18;
            for (i20 = 5; i20 < 148; ++i20) {
                Test.iFld |= i21;
                i22 = 1;
                do {
                    i21 *= Test.iFld;
                    f3 += 74;
                    lArrFld[i20 + 1] = i21;
                    d1 -= i18;
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld += (i22 * i22);
                    d1 = -2.48671;
                    try {
                        i21 = (i22 / iFld1);
                        i21 = (8 / iArrFld[i20 - 1]);
                        i19 = (i21 / iFld1);
                    } catch (ArithmeticException a_e) {}
                } while (++i22 < 2);
                iArrFld[i18] = (int)d1;
                f3 = by;
                iArrFld = iArrFld;
                Test.iFld += i20;
                i19 = (int)f3;
            }
        }

        System.out.println("d1 i18 i19 = " + Double.doubleToLongBits(d1) + "," + i18 + "," + i19);
        System.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        System.out.println("f3 by = " + Float.floatToIntBits(f3) + "," + by);
        System.out.println("Test.iFld =" + Test.iFld);
//        System.out.println("Test.instanceCount Test.iFld bFld = " + Test.instanceCount + "," + Test.iFld + "," +
//                (bFld ? 1 : 0));
        System.out.println("iFld1 iArrFld lArrFld = " + iFld1 + "," + checkSum(iArrFld) + "," +
                checkSum(lArrFld));

        System.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            _instance.mainTest(strArr);
        } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
        }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
    class UserDefinedExceptionTest extends RuntimeException {
     
    }
}
///////////////////////////////////////////////////////////////////////


//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
