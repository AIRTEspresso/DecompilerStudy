import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:16:45 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9098291403467545512L;
    public static float fFld=-104.961F;
    public static volatile int iFld=47057;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        init(Test.iArrFld, 64166);
        init(Test.lArrFld, 62351L);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i5, int i6, double d1) {

        short s=-6770;
        int i8=-5, i9=37, i10=-52, i11=-40554;
        boolean b=false;
        long lArr[]=new long[N];

        init(lArr, 163L);

        try {
            i5 *= i6;
            lArr[(i5 >>> 1) % N] += 1;
            Test.instanceCount = i6;
            for (int i7 : Test.iArrFld) {
                i6 -= s;
            }
            Test.fFld = Test.instanceCount;
        }
        catch (UserDefinedExceptionTest exc1) {
            for (i8 = 208; i8 > 3; --i8) {
                for (i10 = 1; 8 > i10; i10 += 3) {
                    d1 += i5;
                    if (b) continue;
                    lArr[i8 + 1] += -45L;
                    Test.fFld *= i5;
                    i9 *= (int)Test.instanceCount;
                    if (b) break;
                }
            }
        }
        long meth_res = i5 + i6 + Double.doubleToLongBits(d1) + s + i8 + i9 + i10 + i11 + (b ? 1 : 0) +
                checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        double d=2.68183, d2=-10.50880;
        int i12=-37, i13=219, i14=161, i15=-201, i16=-64;
        long l2=-42L;

        d *= (((Test.instanceCount + -4) + lMeth1(10, i4, d)) >> i4);
        d += i3;
        d -= i3;
        i3 = i4;
        for (i12 = 15; i12 < 363; ++i12) {
            for (i14 = 5; 1 < i14; i14 -= 3) {
                i4 += (i14 | i13);
            }
            for (d2 = 1; d2 < 5; d2++) {
                switch (((i16 >>> 1) % 6) + 83) {
                    case 83:
                        Test.instanceCount += (long)Test.fFld;
                        if (i12 != 0) {
                            vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 +
                                    Double.doubleToLongBits(d2) + i16 + l2;
                            return;
                        }
                        break;
                    case 84:
                        i15 ^= i15;
                        if (i4 != 0) {
                            vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 +
                                    Double.doubleToLongBits(d2) + i16 + l2;
                            return;
                        }
                        Test.iFld = (int)Test.fFld;
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 85:
                        i13 >>= i4;
                    case 86:
                        l2 *= (long)d;
                        break;
                    case 87:
                        i15 += (22761 + (d2 * d2));
                        break;
                    case 88:
                        d -= i13;
                        break;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d2) +
                i16 + l2;
    }

    public long lMeth(long l) {

        int i1=238, i2=-11, i17=3;
        long l1=6261206561801069038L;
        short s1=25928;

        for (i1 = 15; 263 > i1; i1++) {
            l1 = 1;
            do {
                vMeth(i1, 184);
                i17 = 1;
                do {
                    Test.iFld >>= i2;
                    Test.iFld /= (int)(i1 | 1);
                    Test.iFld = (int)Test.fFld;
                    i2 = s1;
                    i2 += (int)l1;
                    Test.iFld = -8;
                    i2 >>= i17;
                    Test.iArrFld[(int)(l1)] = -29041;
                    i2 <<= i1;
                    Test.lArrFld[i17 - 1] = (long)1.4049;
                } while ((i17 += 3) < 1);
                Test.iFld = i17;
            } while (++l1 < 7);
        }
        long meth_res = l + i1 + i2 + l1 + i17 + s1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-113.330F;
        int i=-2, i18=-61310, i19=-11, i20=144, i21=145, i22=-61224, i23=-120;
        byte by=-55;
        boolean b1=true, b2=false;

        f *= (((Test.instanceCount + i) * lMeth(Test.instanceCount)) + i);
        for (i18 = 335; i18 > 16; i18--) {
            by -= (byte)Test.instanceCount;
            i = i19;
            Test.iFld += (33656 + (i18 * i18));
            Test.iArrFld[i18 - 1] += Test.iFld;
            Test.iFld -= (int)-3841493359L;
            Test.iArrFld[i18] *= (int)f;
            for (i20 = 4; 79 > i20; i20++) {
                double d3=-82.51976;
                Test.iFld <<= 744;
                Test.iFld += i20;
                d3 = Test.iFld;
            }
        }
        for (i22 = 2; i22 < 366; i22++) {
            if (b1) {
                i19 -= (int)56L;
                i23 -= 185;
            } else if (b2) {
                Test.instanceCount = i22;
                Test.iArrFld[i22] <<= i20;
            } else if (false) {
                i21 += 170;
                if (b1) break;
                i19 &= i20;
            } else {
                if (b1) break;
                i21 += (int)-14L;
            }
            i21 = i20;
            i19 += (i22 | i20);
            i23 -= (int)f;
            b2 = b2;
            i23 = -224;
            Test.instanceCount = Test.instanceCount;
        }
        Test.instanceCount = (long)45.95053;

        System.out.println("f i i18 = " + Float.floatToIntBits(f) + "," + i + "," + i18);
        System.out.println("i19 by i20 = " + i19 + "," + by + "," + i20);
        System.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        System.out.println("b1 b2 = " + (b1 ? 1 : 0) + "," + (b2 ? 1 : 0));

        System.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
                Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        System.out.println("Test.iArrFld Test.lArrFld = " + checkSum(Test.iArrFld) + "," +
                checkSum(Test.lArrFld));

        System.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
        }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
    class UserDefinedExceptionTest extends RuntimeException {

    }
}

