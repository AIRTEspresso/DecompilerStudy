import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:04:27 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public byte byFld=-1;
    public double dFld=58.27429;
    public static short sFld=29103;
    public boolean bFld=false;
    public static volatile long lArrFld[][]=new long[N][N];

    static {
        init(Test.lArrFld, -3972438219L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public int iMeth() {

        int i4=-3, i5=52825, i6=41086, i7=-963, i8=58605, i9=38547, i10=-11, iArr1[]=new int[N];
        boolean b=true;
        double d1=119.89531;
        float f=0.903F, fArr[]=new float[N];
        long lArr[]=new long[N];

        init(fArr, -2.175F);
        init(lArr, -2830177830L);
        init(iArr1, -62700);

        for (i4 = 8; 318 > i4; ++i4) {
            if (b) break;
            i5 += (int)dFld;
            for (d1 = 1; d1 < 5; ++d1) {
                dFld -= i6;
                byFld = (byte)64604;
                fArr[(int)(d1 + 1)] = Test.instanceCount;
            }
            i6 += (((i4 * f) + byFld) - f);
            for (i7 = 1; i7 < 5; ++i7) {
                short s=-11086;
                iArr1[i4] *= i7;
                switch (((i6 >>> 1) % 3) + 87) {
                case 87:
                    for (i9 = 1; 2 > i9; i9 += 2) {
                        f -= i7;
                        i5 += (i9 + f);
                        iArr1[i9 - 1] -= 235;
                    }
                    break;
                case 88:
                    i10 = (int)f;
                case 89:
                    s *= (short)Test.instanceCount;
                    break;
                default:
                    Test.instanceCount >>= byFld;
                }
            }
        }
        long meth_res = i4 + i5 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f) + i7 + i8 +
            i9 + i10 + Double.doubleToLongBits(checkSum(fArr)) + checkSum(lArr) +
            checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth() {

        int i11=-934, i12=-11, i13=185;
        float f1=-2.479F, f2=0.290F;

        byFld = (byte)iMeth();
        for (i11 = 8; i11 < 372; i11++) {
            for (f1 = i11; f1 < 5; ++f1) {
                i12 += (int)f1;
            }
            i13 += (i11 - i11);
            Test.instanceCount *= (long)dFld;
        }
        i13 += i11;
        f2 *= -304787699L;
        vMeth_check_sum += i11 + i12 + Float.floatToIntBits(f1) + i13 + Float.floatToIntBits(f2);
    }

    public double dMeth() {

        int i14=36184, i15=1, i16=-42285, i17=-3, iArr2[][]=new int[N][N];
        long l1=447504782L;
        float f3=69.681F, fArr1[]=new float[N];

        init(fArr1, 0.746F);
        init(iArr2, 9082);

        vMeth();
        i14 -= i14;
        i14 += (int)Test.instanceCount;
        for (i15 = 16; i15 < 354; i15++) {
            try {
                i16 = (i14 / i16);
                i16 = (i14 / i14);
                i14 = (i15 % i15);
            } catch (ArithmeticException a_e) {}
            l1 = 1;
            do {
                i16 ^= Test.sFld;
                i17 = 1;
                while ((i17 -= 3) > 0) {
                    Test.instanceCount += (-40309 + (i17 * i17));
                    i16 = i16;
                    f3 -= i17;
                    fArr1[(int)(l1)] = i14;
                    i14 <<= (int)-139L;
                    iArr2[i17 - 1][(int)(l1 + 1)] >>= 104;
                }
                i14 <<= i14;
            } while (++l1 < 5);
        }
        long meth_res = i14 + i15 + i16 + l1 + i17 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(checkSum(fArr1)) + checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-9870, i1=4, i2=-197, i3=-13, i18=88, i19=-124, i20=0, i21=7, iArr[][]=new int[N][N];
        double d=-53.102563;
        float f4=118.361F;
        byte byArr[]=new byte[N];

        init(iArr, -6);
        init(byArr, (byte)52);

        i -= (int)((--i) / (((long)((i--) * (i + 1.27269))) | 1));
        for (d = 4; d < 125; ++d) {
            i1 += (int)(d + Test.instanceCount);
            for (i2 = 7; i2 < 207; ++i2) {
                iArr[i2][(int)(d + 1)] *= (int)(-5L - (--i));
                i = (int)dMeth();
            }
            switch ((int)((d % 8) + 16)) {
            case 16:
                i <<= i3;
                for (i18 = 4; i18 < 207; ++i18) {
                    i3 += i18;
                    switch (((i3 >>> 1) % 2) + 99) {
                    case 99:
                        switch ((int)((d % 10) + 17)) {
                        case 17:
                            i3 -= 4500;
                            byFld *= (byte)d;
                            i1 += i19;
                            for (i20 = 1; i20 < 2; i20++) {
                                f4 += (float)d;
                                try {
                                    i = (-85 / i20);
                                    i19 = (i18 / i3);
                                    i21 = (140 / i3);
                                } catch (ArithmeticException a_e) {}
                                i21 += (69 + (i20 * i20));
                                Test.instanceCount += i2;
                                i21 = (int)-14L;
                                iArr[(i21 >>> 1) % N] = iArr[(29434 >>> 1) % N];
                                f4 += ((long)i20 ^ (long)f4);
                                Test.instanceCount -= Test.instanceCount;
                                i1 = i3;
                            }
                            break;
                        case 18:
                            iArr[i18][i18] -= (int)f4;
                            i19 += i19;
                            i21 = (int)dFld;
                            if (bFld) continue;
                            break;
                        case 19:
                            f4 -= -27416;
                            break;
                        case 20:
                            i1 += (((i18 * i19) + byFld) - i20);
                            break;
                        case 21:
                            if (false) continue;
                            break;
                        case 22:
                            f4 += (i18 + byFld);
                        case 23:
                            Test.instanceCount += (i18 * Test.instanceCount);
                            break;
                        case 24:
                            if (bFld) break;
                        case 25:
                            bFld = bFld;
                            break;
                        case 26:
                            iArr[(int)(d)][(int)(d - 1)] <<= i3;
                            break;
                        default:
                            dFld -= i19;
                        }
                        break;
                    case 100:
                        i1 -= i20;
                        break;
                    default:
                        Test.lArrFld = Test.lArrFld;
                    }
                }
                break;
            case 17:
                i19 *= i18;
            case 18:
                i19 >>= byFld;
                break;
            case 19:
                i *= -219;
                break;
            case 20:
                i = -14;
                break;
            case 21:
                byArr[(int)(d - 1)] *= (byte)i18;
            case 22:
            case 23:
                if (bFld) continue;
            }
        }

        System.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        System.out.println("i2 i3 i18 = " + i2 + "," + i3 + "," + i18);
        System.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        System.out.println("f4 iArr byArr = " + Float.floatToIntBits(f4) + "," + checkSum(iArr) + ","
            + checkSum(byArr));

        System.out.println("Test.instanceCount byFld dFld = " + Test.instanceCount + "," + byFld + "," +
            Double.doubleToLongBits(dFld));
        System.out.println("Test.sFld bFld Test.lArrFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," +
            checkSum(Test.lArrFld));

        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
