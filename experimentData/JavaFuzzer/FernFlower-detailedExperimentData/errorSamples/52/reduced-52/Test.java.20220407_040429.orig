import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 21:39:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1153958146L;
    public static volatile byte byFld=-92;
    public static short sFld=-8562;
    public static float fArrFld[]=new float[N];

    static {
        init(Test.fArrFld, -2.522F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i2, int i3) {

        int i4=-4387, i5=-91, i6=-45, i7=-250, i8=-79, i9=-333, iArr2[]=new int[N];
        long l2=-4482507297457906235L;
        boolean b=false;

        init(iArr2, 9475);

        for (i4 = 16; 379 > i4; ++i4) {
            l1 += i5;
            if (b) {
                Test.instanceCount = 44;
                for (i6 = i4; i6 < 5; ++i6) {
                    l1 += (-5 + (i6 * i6));
                    i7 += (int)l1;
                    for (i8 = 1; i8 < 1; i8 += 3) {
                        l1 = i7;
                        if (i3 != 0) {
                            vMeth1_check_sum += l1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + l2 + (b ? 1 : 0) +
                                checkSum(iArr2);
                            return;
                        }
                        Test.byFld -= (byte)60506;
                        switch ((i6 % 1) + 97) {
                        case 97:
                            iArr2[i8] += i8;
                            l2 = i8;
                            l2 += (((i8 * i6) + i2) - i5);
                            break;
                        }
                    }
                }
            } else {
                i3 += (i4 * i4);
            }
        }
        vMeth1_check_sum += l1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + l2 + (b ? 1 : 0) + checkSum(iArr2);
    }

    public static int iMeth(short s, double d) {

        int i10=45188, i11=17232, i12=-202, i13=125, i14=61432, i15=-76, i16=-27030, i17=-5585, iArr3[]=new int[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        init(fArr, 0.835F);
        init(lArr, 249L);
        init(iArr3, -2150);

        vMeth1(-8821L, i10, i10);
        s = (short)2;
        try {
            fArr[(-11 >>> 1) % N] += i10;
            for (i11 = 2; i11 < 192; i11++) {
                i13 = 1;
                while (++i13 < 8) {
                    switch (((i13 % 8) * 5) + 64) {
                    case 95:
                        Test.instanceCount = i10;
                        d = s;
                        Test.instanceCount -= i12;
                        d += i10;
                    case 97:
                    case 103:
                        for (i14 = 1; 1 > i14; ++i14) {
                            i12 += (i14 ^ i10);
                            lArr[i13 + 1] -= Test.instanceCount;
                            Test.instanceCount -= Test.instanceCount;
                        }
                        break;
                    case 85:
                        try {
                            i16 = (119 / i14);
                            i17 = (-237 % i13);
                            i17 = (-79 % i16);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 67:
                        if (i11 != 0) {
                        }
                    case 82:
                        i16 = -37674;
                        break;
                    case 104:
                        i17 += i10;
                        break;
                    case 76:
                        i10 -= i17;
                        break;
                    }
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            Test.byFld *= (byte)i12;
        }
        finally {
            iArr3[(i15 >>> 1) % N] = 0;
        }
        long meth_res = s + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(checkSum(fArr)) + checkSum(lArr) +
            checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f) {

        short s1=-2193;
        double d1=-84.20295;
        int i18=13, i19=-118, i20=12;
        long l3=-10L, lArr1[]=new long[N];
        boolean b1=true;

        init(lArr1, 5L);

        iMeth(s1, d1);
        Test.instanceCount <<= i18;
        for (i19 = 5; i19 < 216; i19++) {
            i18 = s1;
            l3 = 1;
            while (++l3 < 8) {
                if (b1) break;
                switch (((i19 % 2) * 5) + 60) {
                case 61:
                    Test.fArrFld[(int)(l3 - 1)] += i20;
                    i20 += (int)l3;
                    break;
                case 67:
                    switch ((((i19 >>> 1) % 2) * 5) + 86) {
                    case 93:
                    case 92:
                        i20 *= (int)f;
                        lArr1[(int)(l3 - 1)] = -12;
                        i18 = i18;
                        i18 += (int)l3;
                        break;
                    }
                    break;
                }
            }
            d1 += 206;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + s1 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + l3 + (b1 ? 1
            : 0) + checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=246, i1=10, i21=-32818, i22=-14, i23=5850, i24=12, i25=52818, i26=11, iArr[]=new int[N], iArr1[]=new
            int[N];
        long l=-3L, l4=-13L, lArr2[]=new long[N];
        float f1=3.420F;
        boolean b2=true;
        double d2=0.117018;
        byte byArr[]=new byte[N];

        init(iArr, -11);
        init(iArr1, 6);
        init(lArr2, 4L);
        init(byArr, (byte)-1);

        i = 1;
        while (++i < 205) {
            i1 -= Math.min(iArr[i - 1]--, i1);
            Test.instanceCount += (5069 + (i * i));
            l >>= i1;
            i1 = (i - iArr1[i + 1]);
            vMeth(f1);
            for (i21 = 7; i21 < 122; i21++) {
                lArr2[i21 - 1] >>= i;
                i22 += i21;
                if (b2) continue;
            }
            i22 += Test.sFld;
        }
        i1 = Test.byFld;
        i1 *= i22;
        i23 = 1;
        do {
            i1 += i23;
            iArr1[i23] *= (int)d2;
            switch ((i23 % 2) + 116) {
            case 116:
                i22 = (int)l;
                for (i24 = i23; 115 > i24; i24++) {
                    i1 += (i24 | i1);
                    for (l4 = 1; l4 < 1; l4 += 2) {
                        d2 -= i22;
                        l *= 5;
                        iArr1[(int)(l4 + 1)] = (int)1.72F;
                        if (b2) {
                            byArr = byArr;
                            switch (((i21 >>> 1) % 2) + 4) {
                            case 4:
                                lArr2[(int)(l4 + 1)] += i23;
                                i26 -= -21115;
                                lArr2[(int)(l4)] <<= Test.sFld;
                                break;
                            case 5:
                            }
                        } else {
                            if (b2) continue;
                        }
                    }
                }
                break;
            case 117:
            }
        } while (++i23 < 219);

        System.out.println("i i1 l = " + i + "," + i1 + "," + l);
        System.out.println("f1 i21 i22 = " + Float.floatToIntBits(f1) + "," + i21 + "," + i22);
        System.out.println("b2 i23 d2 = " + (b2 ? 1 : 0) + "," + i23 + "," + Double.doubleToLongBits(d2));
        System.out.println("i24 i25 l4 = " + i24 + "," + i25 + "," + l4);
        System.out.println("i26 iArr iArr1 = " + i26 + "," + checkSum(iArr) + "," +
            checkSum(iArr1));
        System.out.println("lArr2 byArr = " + checkSum(lArr2) + "," + checkSum(byArr));

        System.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        System.out.println("Test.fArrFld = " + Double.doubleToLongBits(checkSum(Test.fArrFld)));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
