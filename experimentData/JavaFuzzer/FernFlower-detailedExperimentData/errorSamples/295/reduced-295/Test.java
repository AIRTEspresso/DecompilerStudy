import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:17:02 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=184L;
    public static boolean bFld=false;
    public static byte byFld=97;
    public static double dFld=-118.123343;
    public static int iFld=-39966;
    public static float fArrFld[]=new float[N];
    public volatile short sArrFld[]=new short[N];
    public static double dArrFld[]=new double[N];
    public byte byArrFld[]=new byte[N];

    static {
        init(Test.fArrFld, 1.598F);
        init(Test.dArrFld, 0.99626);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, int i7, short s) {

        double d1=0.19451;
        long l=60782L;
        int i8=33135, i9=41659, i10=-49521, i11=-27, iArr1[]=new int[N];
        float f=-2.342F, f1=-32.130F, f2=-90.347F;
        byte by=-11;

        init(iArr1, -6);

        d1 += s;
        for (l = 17; 396 > l; l++) {
            i8 += (int)981943660L;
            f += l;
            iArr1[(int)(l + 1)] -= i8;
        }
        i6 = (int)f1;
        for (f2 = 15; f2 < 255; f2++) {
            if (Test.bFld) continue;
            i7 = by;
            iArr1 = iArr1;
            f += (((f2 * i9) + i7) - i7);
            for (i10 = 7; i10 > f2; i10 -= 2) {
                s = (short)i11;
                f1 += i10;
                i11 = -11361;
            }
        }
        vMeth_check_sum += i6 + i7 + s + Double.doubleToLongBits(d1) + l + i8 + Float.floatToIntBits(f) +
            Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i9 + by + i10 + i11 + checkSum(iArr1);
    }

    public static int iMeth(int i4, int i5) {

        float f3=39.32F;
        int i12=-7, i13=-99, i14=-38992, i15=-13182, i16=23621, i17=65037, i18=40963, iArr2[]=new int[N];
        long l1=1622L;

        init(iArr2, -21378);

        vMeth(i5, 24286, (short)(-19034));
        i4 = (int)f3;
        iArr2[(-43907 >>> 1) % N] -= Test.byFld;
        i5 *= (int)652834599L;
        for (i12 = 16; i12 < 396; ++i12) {
            f3 -= i13;
            for (i14 = 1; i14 < 4; ++i14) {
                if (Test.bFld) continue;
            }
        }
        for (i16 = 3; i16 < 183; i16++) {
            i17 += (int)Test.dFld;
            Test.instanceCount += (i16 - Test.instanceCount);
            for (l1 = 1; l1 < 9; l1++) {
                i4 += (int)(l1 ^ Test.instanceCount);
                i4 += (int)(l1 * f3);
                i15 = i18;
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f3) + i12 + i13 + i14 + i15 + i16 + i17 + l1 + i18 +
            checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i3, double d) {

        int iArr[]=new int[N];

        init(iArr, 28529);

        iArr[(i3 >>> 1) % N] *= (int)(-113.332F + (i3 * iMeth(i3, i3)));
        i3 += i3;
        vSmallMeth_check_sum += i3 + Double.doubleToLongBits(d) + checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-23963, i2=-56147, i21=-12, i22=11, i23=145, i24=-55, iArr3[]=new int[N];
        float f5=-84.794F;

        init(iArr3, 99);

        Test.instanceCount = i;
        for (i1 = 19; i1 < 378; i1++) {
            i2 += i1;
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(i, Test.dFld);
            f5 += (((i1 * i) + Test.instanceCount) - i2);
            i2 -= i2;
            iArr3[i1 + 1] = i;
            Test.dFld -= i;
            i2 += (i1 ^ (long)f5);
            i2 += i2;
            i2 += (int)Test.instanceCount;
        }
        Test.instanceCount = Test.instanceCount;
        i21 = 1;
        do {
            Test.iFld += i;
            iArr3[i21] <<= Test.iFld;
            f5 /= (Test.instanceCount | 1);
            Test.instanceCount += (i21 ^ Test.instanceCount);
            sArrFld[i21] = (short)i2;
            for (i22 = i21; i22 < 68; i22++) {
                i24 = 1;
                do {
                    i2 -= -89;
                    switch (((i21 % 9) * 5) + 63) {
                    case 65:
                        Test.byFld = (byte)1.17528;
                    case 74:
                        switch ((i24 % 2) + 4) {
                        case 4:
                        case 5:
                        }
                        Test.dArrFld[i22 + 1] = Test.iFld;
                        Test.byFld -= (byte)f5;
                        break;
                    case 71:
                        Test.instanceCount += i24;
                        iArr3[i24 + 1] += (int)Test.instanceCount;
                        f5 += (-28802 + (i24 * i24));
                        byArrFld[i22 + 1] = (byte)Test.instanceCount;
                        break;
                    case 90:
                        Test.iFld *= (int)Test.dFld;
                        break;
                    case 108:
                        i -= i22;
                        break;
                    case 70:
                        try {
                            iArr3[i21] = (i23 / 28732);
                            Test.iFld = (i / i21);
                            i2 = (i24 % 1635724932);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 89:
                        f5 *= (float)-98.124827;
                        break;
                    case 98:
                        Test.instanceCount += Test.iFld;
                    case 75:
                        i23 += i24;
                        break;
                    default:
                        Test.byFld += (byte)i24;
                    }
                } while (++i24 < 1);
            }
        } while (++i21 < 373);

        System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        System.out.println("f5 i21 i22 = " + Float.floatToIntBits(f5) + "," + i21 + "," + i22);
        System.out.println("i23 i24 iArr3 = " + i23 + "," + i24 + "," + checkSum(iArr3));

        System.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ?
            1 : 0) + "," + Test.byFld);
        System.out.println("Test.dFld Test.iFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.iFld + "," + Double.doubleToLongBits(checkSum(Test.fArrFld)));
        System.out.println("sArrFld Test.dArrFld byArrFld = " + checkSum(sArrFld) + "," +
            Double.doubleToLongBits(checkSum(Test.dArrFld)) + "," + checkSum(byArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
