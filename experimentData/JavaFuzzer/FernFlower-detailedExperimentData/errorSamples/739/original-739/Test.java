// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 02:31:29 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=214L;
    public static volatile float fFld=-2.76F;
    public static volatile double dFld=0.99098;
    public static volatile short sFld=32073;
    public static byte byFld=36;
    public byte byArrFld[][]=new byte[N][N];
    public static volatile int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 25650);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static void vMeth(int i2) {

        int i3=-101, i4=13;

        i2 -= (++i2);
        Test.instanceCount = (long)(--Test.fFld);
        i2 = (int)(((i3++) + (i2++)) * (1.746F + (i3 + i4)));
        Test.instanceCount -= i2;
        Test.instanceCount = (long)(0 - ((29236 * (-43093 + (Test.fFld * Test.dFld))) * i2));
        vMeth_check_sum += i2 + i3 + i4;
    }

    public static short sMeth(int i10, long l, double d) {

        int i11=78, i12=1, i13=-82, i14=-6, i15=80, i16=-3820;
        boolean b=true, b1=true;

        for (i11 = 16; i11 < 358; ++i11) {
            i12 <<= Test.iArrFld[i11];
        }
        for (i13 = 4; i13 < 283; i13++) {
            vMeth(i11);
            Test.fFld += Test.fFld;
            i10 += -3;
            i14 -= (int)l;
            if (b) {
                i14 += (((i13 * i13) + i11) - l);
            } else if (b1) {
                i12 += (((i13 * i11) + i14) - i14);
            }
            if (true) continue;
            Test.instanceCount -= i14;
            for (i15 = 1; i15 < 6; i15++) {
                i12 += (int)Test.instanceCount;
                i16 -= 3;
            }
        }
        long meth_res = i10 + l + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + (b ? 1 : 0) + (b1 ? 1 : 0) + i15
            + i16;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static byte byMeth() {

        int i9=-21316, i17=-4, i18=-18322, i19=-167, i20=-197, i21=-92, i22=4, i23=-164;
        byte by=57;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1784227231L);

        i9 = sMeth(124, Test.instanceCount, 82.88871);
        for (i17 = 9; i17 < 335; ++i17) {
            i9 += (((i17 * i9) + i9) - i17);
            for (i19 = 5; i19 > 1; --i19) {
                i18 -= i19;
                by *= (byte)i9;
                lArr1[i19] += Test.instanceCount;
                i21 &= Test.sFld;
                for (i22 = 1; i22 < 2; i22++) {
                    i20 >>= i20;
                    by = (byte)Test.dFld;
                    Test.iArrFld[i19 - 1] = (int)26.26636;
                    Test.iArrFld[(i23 >>> 1) % N] -= i20;
                    i23 *= Test.sFld;
                    Test.iArrFld[i19] -= i18;
                }
            }
        }
        long meth_res = i9 + i17 + i18 + i19 + i20 + by + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-216, i1=6, i5=10, i6=174, i7=8, i8=8, i24=61484, i25=117, i26=-117, iArr[]=new int[N];
        boolean b2=false;
        short sArr[]=new short[N];
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, 89);
        FuzzerUtils.init(sArr, (short)24041);
        FuzzerUtils.init(lArr, 2593749834351523544L);
        FuzzerUtils.init(dArr, -115.126919);

        iArr = (iArr = (iArr = iArr));
        for (i = 4; i < 122; i++) {
            vMeth(i1);
            for (i5 = 8; i5 < 212; ++i5) {
                switch ((i % 10) + 79) {
                case 79:
                    byArrFld[i + 1][i5] ^= (byte)(i5 * 58784);
                    i6 *= (int)(Test.instanceCount *= ((Test.instanceCount--) - (-(i5 - Test.instanceCount))));
                    sArr[i - 1] = (short)(Test.instanceCount - Math.abs((int)(Test.fFld + Test.instanceCount)));
                    Test.instanceCount = ((lArr[i5]++) >>> (--i6));
                    break;
                case 80:
                    vMeth(--i6);
                    for (i7 = 1; i7 < 2; ++i7) {
                        Test.instanceCount = (long)(Test.dFld++);
                        Test.fFld *= byMeth();
                        i8 = i1;
                        dArr[i7 + 1] = i6;
                        Test.instanceCount -= Test.instanceCount;
                    }
                    switch (((i5 % 2) * 5) + 24) {
                    case 33:
                        i8 += i;
                        break;
                    case 29:
                        Test.iArrFld[i - 1] = i8;
                    }
                    iArr = iArr;
                    break;
                case 81:
                    i6 *= i;
                    for (i24 = 2; i24 > 1; i24--) {
                        lArr = lArr;
                        Test.instanceCount += (i24 + Test.instanceCount);
                        i6 *= (int)Test.dFld;
                        switch (((i24 % 1) * 5) + 63) {
                        case 66:
                            switch (((i24 % 3) * 5) + 103) {
                            case 118:
                                Test.instanceCount *= i5;
                                break;
                            case 105:
                                i6 >>= i5;
                                iArr[i + 1] = i5;
                                break;
                            case 110:
                                i8 += (i24 ^ (long)Test.fFld);
                            }
                            break;
                        default:
                            Test.iArrFld[i24 - 1] = (int)Test.instanceCount;
                        }
                    }
                case 82:
                    Test.fFld = i25;
                    break;
                case 83:
                    bArrFld[i] = b2;
                    break;
                case 84:
                    Test.iArrFld[i5] = i5;
                    break;
                case 85:
                    iArr[i5 + 1] = (int)-51.114297;
                    break;
                case 86:
                    b2 = b2;
                    break;
                case 87:
                    Test.instanceCount += (((i5 * i24) + i26) - Test.sFld);
                    break;
                case 88:
                    Test.byFld = (byte)i26;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i5 = " + i + "," + i1 + "," + i5);
        FuzzerUtils.out.println("i6 i7 i8 = " + i6 + "," + i7 + "," + i8);
        FuzzerUtils.out.println("i24 i25 b2 = " + i24 + "," + i25 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i26 iArr sArr = " + i26 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("lArr dArr = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.byFld byArrFld = " + Test.sFld + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("Test.iArrFld bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest sMeth byMeth
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  sMeth ->  sMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
