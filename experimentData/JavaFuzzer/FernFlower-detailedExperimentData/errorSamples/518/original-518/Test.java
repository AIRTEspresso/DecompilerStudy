// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 00:41:19 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-193369766L;
    public static double dFld=-17.97118;
    public static float fFld=12.321F;
    public int iFld=-14;
    public static byte byFld=-101;
    public boolean bArrFld[][]=new boolean[N][N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-24983);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, short s2, float f1) {

        int i5=36738, i6=90, i7=-29261, i8=3, i9=-57161, i10=-205, i11=43048, i12=2, iArr[]=new int[N];
        byte by=63;

        FuzzerUtils.init(iArr, 49954);

        for (i5 = 293; i5 > 13; i5--) {
            i7 = 6;
            while (--i7 > 0) {
                if (i7 != 0) {
                    vMeth2_check_sum += i4 + s2 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + by + i11 +
                        i12 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                i6 = i4;
                for (i8 = 1; i8 < 1; ++i8) {
                    i9 *= i6;
                    iArr[i8] += (int)Test.instanceCount;
                    i10 += (i8 * i8);
                    if (i7 != 0) {
                        vMeth2_check_sum += i4 + s2 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + by +
                            i11 + i12 + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
                i6 = by;
                for (i11 = 1; i11 < 1; ++i11) {
                    i12 += i7;
                }
                Test.instanceCount = i5;
                i4 *= 8067;
                by >>= (byte)Test.instanceCount;
            }
        }
        vMeth2_check_sum += i4 + s2 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + by + i11 + i12 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(short s1, int i3) {

        float f2=-114.304F, fArr[]=new float[N];
        double d=-2.130951;
        int i13=28742, i14=8, i15=199, i16=-23147, iArr1[][]=new int[N][N];

        FuzzerUtils.init(iArr1, 24421);
        FuzzerUtils.init(fArr, 41.0F);

        vMeth2(i3, s1, f2);
        i3 = (int)Test.instanceCount;
        iArr1[(i3 >>> 1) % N][(i3 >>> 1) % N] *= i3;
        d = 1;
        do {
            iArr1[(int)(d)][(int)(d + 1)] *= -13;
            for (i13 = 1; i13 < 10; i13++) {
                f2 += i13;
                fArr[i13 - 1] -= -6;
            }
            s1 >>>= (short)i14;
            for (i15 = 1; 10 > i15; i15 += 2) {
                Test.instanceCount = (long)f2;
                Test.instanceCount = i13;
                i3 += (i15 - f2);
                i3 *= i13;
                iArr1[i15][i15] -= i13;
            }
        } while (++d < 161);
        vMeth1_check_sum += s1 + i3 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, int i2, short s) {

        int i17=-9, i18=30, i19=-183, i20=41727, i21=88, i22=2700, iArr2[]=new int[N];
        byte by1=-33;
        boolean b=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr2, -189);
        FuzzerUtils.init(lArr, 56L);

        vMeth1(s, i1);
        iArr2[(i2 >>> 1) % N] += i2;
        for (i17 = 6; 250 > i17; ++i17) {
            if (b) {
                if (b) {
                    Test.instanceCount = Test.instanceCount;
                    Test.dFld = by1;
                    for (i19 = 1; i19 < 7; i19 += 3) {
                        i18 = 6;
                        lArr[i19 - 1][i17] = i20;
                    }
                    iArr2[i17 + 1] -= -59831;
                } else {
                    for (i21 = i17; i21 < 7; i21++) {
                        iArr2[i21] *= i19;
                        s *= (short)Test.instanceCount;
                        i18 -= (int)-6L;
                    }
                }
            } else if (b) {
                Test.fFld *= Test.instanceCount;
            } else {
                i1 >>= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i1 + i2 + s + i17 + i18 + by1 + i19 + i20 + (b ? 1 : 0) + i21 + i22 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=8, i23=-65, i24=-7, i25=11, i26=7, i27=26935, i28=8988, i29=17;
        float f=-1.639F, fArr1[]=new float[N];
        short s4=4139;
        boolean b1=false;
        long lArr1[][]=new long[N][N], lArr2[][][]=new long[N][N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(fArr1, -1.157F);
        FuzzerUtils.init(lArr1, -583687835L);
        FuzzerUtils.init(byArr, (byte)67);
        FuzzerUtils.init(lArr2, -242L);

        bArrFld[(i >>> 1) % N][(i >>> 1) % N] = (((i - Test.instanceCount) + (f * i)) > Integer.reverseBytes(i + i));
        vMeth(12, i, s4);
        i23 = 1;
        while (++i23 < 151) {
            i *= -14;
            switch ((i23 % 5) + 83) {
            case 83:
                i24 = 1;
                do {
                    fArr1[i23] -= f;
                    i /= 11;
                    f += Test.instanceCount;
                    lArr1[i24 - 1][i24] += iFld;
                    fArr1[i23] -= s4;
                } while (++i24 < 166);
                bArrFld[i23 - 1][i23] = b1;
                Test.byFld <<= (byte)i23;
                byArr[i23] += (byte)i;
            case 84:
                lArr2 = lArr2;
                iFld += (((i23 * i) + Test.instanceCount) - i);
                for (i25 = 9; i25 < 166; i25++) {
                    i += i25;
                }
                for (i27 = 3; i27 < 166; ++i27) {
                    i28 <<= (int)-96L;
                    Test.instanceCount = i27;
                    i += (i27 * f);
                    i28 += (((i27 * i26) + i24) - i23);
                    if (true) break;
                }
                break;
            case 85:
                i28 -= iFld;
                lArr2[i23][i23 - 1][i23 - 1] += (long)1.69336;
                lArr2[i23][i23][i23] = i23;
                i28 += (((i23 * Test.byFld) + f) - i);
                break;
            case 86:
                Test.sArrFld = Test.sArrFld;
                i29 = iFld;
                break;
            case 87:
            default:
                Test.instanceCount = 34;
            }
        }

        FuzzerUtils.out.println("i f s4 = " + i + "," + Float.floatToIntBits(f) + "," + s4);
        FuzzerUtils.out.println("i23 i24 b1 = " + i23 + "," + i24 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 fArr1 = " + i28 + "," + i29 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("lArr1 byArr lArr2 = " + FuzzerUtils.checkSum(lArr1) + "," +
            FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld Test.byFld bArrFld = " + iFld + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
