import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:51:26 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static volatile int iFld=45;
    public static boolean bFld=true;
    public short sFld=-53;
    public double dFld=15.60691;
    public long lFld=39544L;
    public int iFld1=50;
    public int iArrFld[]=new int[N];
    public volatile byte byArrFld[]=new byte[N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f2=36.685F;
        int i6=-85;

        f2 = 1;
        while (++f2 < 152) {
            i6 = 1;
            do {
                double d1=-1.125828;
                Test.iFld *= i6;
                Test.iFld += (int)(2.867F + (i6 * i6));
                d1 = -210;
            } while (++i6 < 10);
            Test.instanceCount += (long)1.471F;
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i6;
    }

    public static float fMeth() {

        int i5=52, i7=-21214, i8=12, i9=3, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        byte byArr[]=new byte[N];
        float fArr[]=new float[N];

        init(iArr1, 212);
        init(iArr2, 210);
        init(byArr, (byte)-19);
        init(fArr, -60.757F);

        i5 = 1;
        while (++i5 < 243) {
            Test.iFld <<= iArr1[i5 - 1];
            iArr2 = (iArr2 = (iArr2 = (iArr2 = iArr2)));
            vMeth1();
            Test.iFld <<= (int)13L;
            iArr1[i5 - 1] += (int)Test.instanceCount;
            if (Test.bFld) {
                Test.iFld += (int)Test.instanceCount;
                for (i7 = i5; i7 < 7; ++i7) {
                    byArr[i7 - 1] |= (byte)i8;
                }
                Test.iFld >>= (int)Test.instanceCount;
            }
            switch (((i9 >>> 1) % 4) + 103) {
            case 103:
                Test.instanceCount >>= i7;
                Test.bFld = Test.bFld;
                break;
            case 104:
                if (false) continue;
                break;
            case 105:
                Test.instanceCount += i5;
                break;
            case 106:
                fArr[i5] += Test.iFld;
                break;
            default:
                Test.iFld -= i9;
            }
        }
        long meth_res = i5 + i7 + i8 + i9 + checkSum(iArr1) + checkSum(iArr2) +
            checkSum(byArr) + Double.doubleToLongBits(checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(float f1, boolean b, long l) {

        int i3=124, i4=-9, i12=-58687, i13=8, iArr[]=new int[N];
        long l1=-8L, lArr1[]=new long[N];
        byte by1=-52;

        init(iArr, 142);
        init(lArr1, 64395L);

        for (i3 = 4; i3 < 389; ++i3) {
            l1 = 1;
            while (++l1 < 4) {
                Test.instanceCount += (i4 <<= (++i4));
                iArr[i3 - 1] -= (int)((l + fMeth()) * i3);
                i4 += (-12351 + (l1 * l1));
                lArr1[(int)(l1 - 1)] *= by1;
            }
            for (i12 = 4; i12 > 1; --i12) {
                i4 += (int)f1;
                i13 += (int)(-31.128F + (i12 * i12));
                Test.iFld += (i12 - f1);
                l = l1;
                i4 = (int)l1;
                Test.instanceCount = i13;
            }
            f1 *= i12;
            Test.instanceCount = Test.iFld;
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + l + i3 + i4 + l1 + by1 + i12 + i13 +
            checkSum(iArr) + checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-19681, i1=-51019, i2=-12, i14=-30, i15=28123, i16=0, i17=-10, i18=7, i19=10, iArr3[][]=new int[N][N];
        byte by=-11;
        float f=65.63F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        init(lArr, -61816L);
        init(fArr1, -63.757F);
        init(iArr3, 243);

        iArrFld = (iArrFld = iArrFld);
        i &= (int)((byArrFld[(i >>> 1) % N] >>>= (byte)(i1 * Test.instanceCount)) * ((i + by) + (i * -14)));
        i2 = 1;
        do {
            double d=18.102586;
            f *= (float)(((i2 - d) - -8) + Integer.reverseBytes(i2));
            lArr = lArr;
            if ((i <<= (int)((d--) - (i1 *= 14))) < by) continue;
            Test.instanceCount -= i;
        } while (++i2 < 133);
        vMeth(f, Test.bFld, Test.instanceCount);
        for (i14 = 12; i14 < 212; ++i14) {
            iArrFld[i14 + 1] &= i1;
            for (i16 = 7; i16 < 126; i16++) {
                i1 = sFld;
                i1 += (i16 | Test.instanceCount);
                i += i16;
                i18 = 1;
                while (++i18 < 2) {
                    Test.instanceCount = i16;
                    fArr1[i18] -= i17;
                    i1 -= (int)23L;
                    lArr[i18] -= Test.instanceCount;
                    Test.iFld >>= i15;
                }
            }
            lArr[(i2 >>> 1) % N] = Test.instanceCount;
            f *= Test.instanceCount;
            Test.instanceCount = i;
            i19 = 1;
            do {
                i17 -= i14;
                switch ((((-4 >>> 1) % 1) * 5) + 119) {
                case 122:
                    switch ((i19 * 5) + 101) {
                    case 244:
                        if (Test.bFld) {
                            iArrFld[i19 + 1] = i2;
                            i17 += (57308 + (i19 * i19));
                        } else {
                            Test.instanceCount += (i19 | i17);
                        }
                        break;
                    case 230:
                        i15 -= (int)Test.instanceCount;
                        break;
                    case 319:
                    case 145:
                        iArrFld[i19] *= i18;
                    case 283:
                        f /= (by | 1);
                        break;
                    case 260:
                        i = (int)-7558612893973815989L;
                    case 300:
                        i1 += i19;
                        break;
                    case 264:
                        i15 -= i15;
                        break;
                    case 395:
                        dFld += i1;
                        break;
                    case 378:
                        Test.instanceCount >>= 1995L;
                        break;
                    case 177:
                        Test.instanceCount += i19;
                        break;
                    case 130:
                        i -= (int)184L;
                        break;
                    case 262:
                        i17 *= i;
                        break;
                    case 443:
                        f = -58151;
                        break;
                    case 174:
                        i15 += i17;
                    case 232:
                        iArrFld[i14 - 1] >>= by;
                        break;
                    case 450:
                        i1 += (i19 * i19);
                    case 137:
                        iArrFld[i14] *= i1;
                        break;
                    case 156:
                        Test.iFld >>>= (int)Test.instanceCount;
                        break;
                    case 431:
                        try {
                            i15 = (166 % i14);
                            Test.iFld = (241 % i19);
                            i1 = (i2 / iArrFld[(2 >>> 1) % N]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 428:
                        f += Test.instanceCount;
                    case 304:
                        lArr[i19 - 1] = i2;
                    case 131:
                        i1 = i2;
                        break;
                    case 266:
                        try {
                            i = (i16 / -742332061);
                            i1 = (i16 % 61303);
                            i = (i14 / 183);
                        } catch (ArithmeticException a_e) {}
                    case 288:
                        i17 >>= i19;
                    case 207:
                        i17 -= i15;
                    case 305:
                        iArrFld[i19 + 1] *= i2;
                        break;
                    case 237:
                        Test.iFld += (i19 * i19);
                    case 154:
                        Test.instanceCount += i19;
                    case 239:
                    case 393:
                        if (Test.bFld) continue;
                        break;
                    case 229:
                        lArr[i14 + 1] = i18;
                        break;
                    case 445:
                        iArrFld[i14 - 1] -= (int)Test.instanceCount;
                        break;
                    case 325:
                        lFld = iFld1;
                        break;
                    case 418:
                        i15 = i19;
                        break;
                    case 127:
                        iFld1 *= i;
                        break;
                    case 386:
                        i15 = (int)f;
                        break;
                    case 180:
                        i17 = i18;
                        break;
                    case 435:
                        byArrFld[i14 + 1] = (byte)-18638;
                        break;
                    case 381:
                    case 394:
                    case 292:
                        iFld1 += (25803 + (i19 * i19));
                        break;
                    case 210:
                        f += -55535;
                        break;
                    case 414:
                        if (Test.bFld) break;
                        break;
                    case 116:
                        iFld1 += (int)f;
                        break;
                    case 256:
                        i15 += (int)5L;
                        break;
                    case 278:
                        i17 += (((i19 * lFld) + f) - lFld);
                        break;
                    case 425:
                        iArr3 = iArr3;
                    case 362:
                        iArrFld[i19] *= (int)lFld;
                        break;
                    case 212:
                        i17 |= -9;
                        break;
                    case 249:
                        dFld -= Test.iFld;
                        break;
                    case 203:
                        Test.iFld >>>= (int)4031535020L;
                        break;
                    case 166:
                        i >>= (int)-1465018512L;
                        break;
                    case 311:
                        iArrFld = iArrFld;
                        break;
                    case 284:
                        iArr3[i14][(i17 >>> 1) % N] = by;
                        break;
                    case 451:
                        iArr3[(i18 >>> 1) % N][i14] -= i16;
                        break;
                    case 408:
                        iArrFld = iArrFld;
                        break;
                    case 329:
                        lArr[i19] = i18;
                        break;
                    case 129:
                    case 390:
                        if (Test.bFld) continue;
                        break;
                    case 410:
                        iFld1 -= (int)f;
                    case 361:
                        i17 *= i2;
                        break;
                    case 357:
                        Test.instanceCount += -9;
                    case 287:
                        Test.iFld += (i19 * i19);
                        break;
                    case 112:
                        iArrFld[i14] -= i16;
                        break;
                    case 347:
                        iArr3[i14 + 1][i19] <<= i2;
                        break;
                    case 110:
                        lArr = lArr;
                        break;
                    case 346:
                        i15 = i2;
                        break;
                    case 380:
                        f /= 1;
                        break;
                    case 161:
                        i15 = by;
                        break;
                    default:
                        lFld = i14;
                    }
                    break;
                }
            } while (++i19 < 126);
        }

        System.out.println("i i1 by = " + i + "," + i1 + "," + by);
        System.out.println("i2 f i14 = " + i2 + "," + Float.floatToIntBits(f) + "," + i14);
        System.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        System.out.println("i18 i19 lArr = " + i18 + "," + i19 + "," + checkSum(lArr));
        System.out.println("fArr1 iArr3 = " + Double.doubleToLongBits(checkSum(fArr1)) + "," +
            checkSum(iArr3));

        System.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        System.out.println("sFld dFld lFld = " + sFld + "," + Double.doubleToLongBits(dFld) + "," + lFld);
        System.out.println("iFld1 iArrFld byArrFld = " + iFld1 + "," + checkSum(iArrFld) + "," +
            checkSum(byArrFld));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("fMeth_check_sum: " + fMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
