// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:14:40 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-167L;
    public static int iFld=-11;
    public static boolean bFld=true;
    public static byte byFld=-98;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i2=17, i3=170, i4=4581, i5=62334, i6=3, i7=1155, i8=13, i9=5, iArr[]=new int[N];
        short s=12629;
        float f1=2.119F;
        double d=-85.40773;
        boolean b=false;

        FuzzerUtils.init(iArr, 9);

        i2 = s;
        f1 -= 134;
        Test.instanceCount *= Test.iFld;
        i2 >>= 9;
        for (i3 = 4; 162 > i3; i3++) {
            for (i5 = i3; i5 < 10; i5++) {
                d += d;
                Test.iFld += i5;
                for (i7 = i5; i7 < 1; i7++) {
                    i4 *= (int)d;
                    f1 *= Test.instanceCount;
                    try {
                        iArr[i3 + 1] = (i3 % i9);
                        i9 = (iArr[i3] / i7);
                        iArr[(i6 >>> 1) % N] = (-2712 / i2);
                    } catch (ArithmeticException a_e) {}
                    if (i4 != 0) {
                    }
                }
                Test.instanceCount += (-2 + (i5 * i5));
                if (b) continue;
            }
        }
        long meth_res = i2 + s + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 +
            i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l, long l1) {

        int i10=1, i11=-6463, i12=-5415, i13=-44639, iArr1[][]=new int[N][N];
        float f2=38.1011F;
        short s1=23448;

        FuzzerUtils.init(iArr1, 0);

        l1 &= (long)(dMeth() * Test.iFld);
        for (i10 = 7; i10 < 184; i10++) {
            f2 = 1;
            while (++f2 < 9) {
                iArr1[i10][(int)(f2)] -= i10;
                Test.iFld = (int)-2855622914L;
                for (i12 = 1; 1 > i12; ++i12) {
                    try {
                        Test.iFld = (-57509 % i12);
                        Test.iFld = (1007264487 / i12);
                        Test.iFld = (i13 % iArr1[(int)(f2)][(int)(f2)]);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld /= (int)((long)(f2) | 1);
                }
                i11 = -13;
                if (Test.bFld) break;
                i11 = i12;
                l += i12;
                i13 += (int)(((f2 * Test.iFld) + Test.byFld) - Test.instanceCount);
                Test.iFld -= s1;
            }
            Test.instanceCount += (long)14.827F;
        }
        vMeth1_check_sum += l + l1 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + s1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1, float f) {

        long l2=28592L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -50647L);

        lArr[(9345 >>> 1) % N] /= ((-i1) | 1);
        i1 = (int)2615956738L;
        vMeth1(l2, l2);
        i1 = (int)Test.instanceCount;
        i1 = Test.iFld;
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + l2 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-43173, i14=-7223, i15=11, i16=36476, i17=-3147, i18=-4, i19=-66, i20=32555, i21=-13, i22=-2, i23=-19;
        float f3=-123.205F, fArr[]=new float[N];
        double d1=0.91118;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -2.179F);
        FuzzerUtils.init(byArr, (byte)-121);
        FuzzerUtils.init(lArr1, -26293L);

        fArr[(i >>> 1) % N] -= i;
        Test.instanceCount *= Test.instanceCount;
        vMeth(i, f3);
        for (i14 = 1; i14 < 278; i14++) {
            i16 = 1;
            do {
                f3 *= -31;
                d1 += d1;
                d1 -= f3;
            } while (++i16 < 91);
            try {
                iArrFld[i14 - 1] = (i / i16);
                iArrFld[i14] = (1365758419 / i15);
                i = (iArrFld[i14] / i16);
            } catch (ArithmeticException a_e) {}
            for (i17 = 1; i17 < 91; ++i17) {
                short s2=-32473;
                if (false) {
                    i19 = (int)Test.instanceCount;
                    iArrFld[i17 + 1] -= i16;
                    byArr[i17 + 1] *= (byte)i16;
                } else if (Test.bFld) {
                    Test.iFld += (i17 * i17);
                    Test.iFld -= (int)-2245312193L;
                    iArrFld[i17 - 1] += i17;
                }
                for (i20 = 1; i20 < 2; ++i20) {
                    Test.instanceCount += i18;
                }
                i += (i17 * s2);
                switch ((i17 % 4) + 123) {
                case 123:
                    i18 += (i17 * i17);
                    Test.instanceCount <<= Test.instanceCount;
                    break;
                case 124:
                    iArrFld[i14] = 197;
                    i15 >>= i20;
                    break;
                case 125:
                    i21 += (((i17 * f3) + Test.iFld) - i21);
                    break;
                case 126:
                    i21 += (i17 * i17);
                    break;
                default:
                    for (i22 = i14; i22 < 2; i22 += 2) {
                        lArr1[i17] -= i16;
                        f3 -= Test.byFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i f3 i14 = " + i + "," + Float.floatToIntBits(f3) + "," + i14);
        FuzzerUtils.out.println("i15 i16 d1 = " + i15 + "," + i16 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 fArr byArr = " + i23 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld iArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
