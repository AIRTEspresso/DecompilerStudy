// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:17:26 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=218L;
    public static double dFld=127.29154;
    public static float fFld=-95.660F;
    public static volatile int iFld=-6;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.33381);
        FuzzerUtils.init(Test.iArrFld, -19555);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, long l1, byte by1) {


        Test.dFld = i7;
        long meth_res = i7 + l1 + by1;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(byte by, long l, int i4) {

        int i5=-8873, i6=-4, i8=-127, i9=-125, iArr[]=new int[N];
        float f=101.700F;
        short s=28413;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr, 197);
        FuzzerUtils.init(bArr, false);

        for (i5 = 14; i5 < 284; ++i5) {
            i4 = (int)lMeth(i6, Test.instanceCount, by);
            lArr[i5] /= (long)2.199F;
            switch ((((i5 >>> 1) % 5) * 5) + 99) {
            case 104:
                f = 1;
                while (++f < 6) {
                    lArr[(int)(f)] = l;
                    iArr[(int)(f + 1)] = i5;
                    by += (byte)(f + Test.instanceCount);
                    Test.instanceCount += (long)f;
                }
                break;
            case 108:
                switch (((i5 % 6) * 5) + 16) {
                case 29:
                    s += (short)i5;
                    Test.fFld *= 11;
                    for (i8 = 1; i8 < 6; ++i8) {
                        boolean b=true;
                        bArr[i8] = b;
                        Test.dArrFld[i8] = i4;
                    }
                    break;
                case 22:
                    lArr[i5] = l;
                    break;
                case 30:
                    Test.instanceCount += (((i5 * i9) + i5) - Test.instanceCount);
                    break;
                case 37:
                    iArr[i5 + 1] -= by;
                    break;
                case 32:
                case 20:
                    lArr = lArr;
                    break;
                default:
                    i6 *= 192;
                }
            case 105:
            case 103:
                Test.fFld -= i9;
                break;
            case 110:
                s += (short)(((i5 * Test.instanceCount) + i4) - l);
                break;
            }
        }
        vMeth1_check_sum += by + l + i4 + i5 + i6 + Float.floatToIntBits(f) + s + i8 + i9 + FuzzerUtils.checkSum(lArr)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i2, int i3) {

        byte by2=54;
        int i11=4892, i12=11, i13=-22581, i14=-18913;
        long l2=63532L, lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -48573L);

        vMeth1(by2, Test.instanceCount, i3);
        for (i11 = 1; i11 < 304; i11++) {
            Test.fFld *= -14451;
        }
        Test.dFld += Test.fFld;
        i13 = 1;
        while (++i13 < 184) {
            for (l2 = 1; 9 > l2; l2++) {
                i12 += (int)Test.dFld;
                Test.dFld *= Test.instanceCount;
                i12 += (int)1.19241;
                by2 += (byte)Test.fFld;
                Test.dArrFld = Test.dArrFld;
                i12 -= (int)l2;
                i3 += (int)l2;
                lArr1[(int)(l2 - 1)] *= i11;
                i12 <<= (int)-55822L;
            }
        }
        vMeth_check_sum += i2 + i3 + by2 + i11 + i12 + i13 + l2 + i14 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i1=30, i16=-9, i17=11, i18=-161, i19=-16903, i20=-55683;
        short s1=16642;
        byte by3=23;
        boolean b1=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.426F);

        for (i = 24; i < 390; i++) {
            vMeth(i, i);
            fArr[i - 1] *= i;
            switch ((((7 >>> 1) % 8) * 5) + 112) {
            case 143:
                i1 = i;
                switch ((i % 9) + 77) {
                case 77:
                    Test.instanceCount = i;
                    Test.fFld += ((long)i | (long)i);
                    i1 = s1;
                    i1 = -68;
                    break;
                case 78:
                    for (i16 = i; i16 < 69; i16++) {
                        i18 = 1;
                        do {
                            Test.iArrFld[i] = (int)Test.dFld;
                            i1 <<= i17;
                            fArr = FuzzerUtils.float1array(N, (float)22.24F);
                        } while (++i18 < 1);
                        Test.instanceCount += (((i16 * Test.instanceCount) + i17) - i18);
                        switch ((i16 % 2) + 116) {
                        case 116:
                            Test.instanceCount -= 160;
                            Test.iFld += (i16 | i);
                            break;
                        case 117:
                            switch ((i16 % 4) + 106) {
                            case 106:
                                for (i19 = 1; i19 < 1; i19 += 3) {
                                    i20 <<= (int)Test.instanceCount;
                                    Test.fFld = i19;
                                    Test.iFld -= -7;
                                    Test.instanceCount = i1;
                                    switch (((i % 1) * 5) + 20) {
                                    case 25:
                                        Test.instanceCount <<= -5;
                                        break;
                                    }
                                    i20 -= (int)Test.instanceCount;
                                    Test.iFld += i20;
                                    Test.iArrFld[i16 - 1] += -22144;
                                }
                                break;
                            case 107:
                                Test.instanceCount >>>= i20;
                                break;
                            case 108:
                                i17 = i20;
                                break;
                            case 109:
                                Test.dFld = by3;
                                break;
                            default:
                                Test.iArrFld[i16 + 1] = s1;
                            }
                            break;
                        default:
                            Test.iFld = (int)Test.instanceCount;
                        }
                    }
                    break;
                case 79:
                    by3 += (byte)(i | i18);
                case 80:
                    Test.dFld = Test.iFld;
                    break;
                case 81:
                    i1 += i19;
                    break;
                case 82:
                    try {
                        i1 = (Test.iArrFld[i + 1] / -62670);
                        Test.iFld = (i17 / 4645);
                        Test.iFld = (i / i);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 83:
                    Test.fFld += (((i * Test.instanceCount) + i16) - s1);
                    break;
                case 84:
                    Test.fFld = by3;
                    break;
                case 85:
                    i17 = (int)Test.instanceCount;
                    break;
                default:
                    i1 %= (int)(s1 | 1);
                }
                break;
            case 128:
                i17 |= i18;
                break;
            case 145:
                Test.instanceCount = i18;
                break;
            case 124:
                i17 -= -45725;
                break;
            case 116:
                i17 += i18;
                break;
            case 118:
                i17 += (((i * i20) + i18) - i19);
            case 135:
                i1 *= i1;
                break;
            case 144:
                if (b1) break;
                break;
            default:
                i20 += (((i * i17) + i17) - Test.instanceCount);
            }
        }

        FuzzerUtils.out.println("i i1 s1 = " + i + "," + i1 + "," + s1);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by3 = " + i19 + "," + i20 + "," + by3);
        FuzzerUtils.out.println("b1 fArr = " + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.dArrFld Test.iArrFld = " + Test.iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
