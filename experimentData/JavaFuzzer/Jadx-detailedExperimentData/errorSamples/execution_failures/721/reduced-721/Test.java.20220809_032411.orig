import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 02:23:34 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3L;
    public static volatile int iFld=-4;
    public static float fFld=-108.280F;
    public static long lFld=-8873L;
    public static double dArrFld[][]=new double[N][N];
    public static int iArrFld[]=new int[N];

    static {
        init(Test.dArrFld, 1.33431);
        init(Test.iArrFld, -108);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i6) {

        float f2=-115.847F;
        int i7=-62272, i8=60116, i9=-212, i10=55906, i11=-177, iArr2[]=new int[N];
        short s=20319;
        boolean b=false;

        init(iArr2, -3);

        Test.iFld += (int)f2;
        for (i7 = 15; i7 < 382; ++i7) {
            s = s;
            for (i9 = 5; 1 < i9; --i9) {
                Test.iFld *= (int)Test.instanceCount;
                i6 += (((i9 * i7) + f2) - Test.iFld);
                i10 *= i6;
                Test.iFld = Test.iFld;
                if (b) continue;
                switch ((i7 % 2) + 124) {
                case 124:
                    s -= (short)l1;
                    i11 = 1;
                    while (++i11 < 2) {
                        iArr2[i9] = (int)l1;
                        l1 = 9;
                        i8 -= i7;
                    }
                    break;
                case 125:
                    f2 += i9;
                }
            }
        }
        vMeth_check_sum += l1 + i6 + Float.floatToIntBits(f2) + i7 + i8 + s + i9 + i10 + (b ? 1 : 0) + i11 +
            checkSum(iArr2);
    }

    public static long lMeth(float f1) {

        int i2=-22037, i3=-12, i4=251, i5=163, i12=-59140, i13=-22035, iArr[]=new int[N], iArr1[][]=new int[N][N];
        boolean b1=true;
        byte by=-47;
        long lArr[]=new long[N];

        init(iArr, 5185);
        init(lArr, -9083848344221977855L);
        init(iArr1, 18876);

        iArr = (iArr = (iArr = (iArr = int1array(N, (int)-188))));
        for (i2 = 11; 193 > i2; i2++) {
            lArr[i2] <<= (++i3);
            for (i4 = 1; i4 < 9; ++i4) {
                iArr1 = iArr1;
                vMeth(Test.instanceCount, i5);
                lArr = lArr;
                iArr1[i2 + 1][i4] |= (int)-26807L;
                lArr[i2] -= i3;
                iArr1[i4][i4] = i5;
            }
            Test.instanceCount += Test.instanceCount;
            for (i12 = 9; i12 > 1; i12 -= 3) {
                b1 = b1;
                i3 <<= Test.iFld;
                by += (byte)Test.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i4 + i5 + i12 + i13 + (b1 ? 1 : 0) + by +
            checkSum(iArr) + checkSum(lArr) + checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, double d1) {

        int i14=57627, i15=-131, i16=5, iArr3[]=new int[N];
        boolean b2=false;
        byte by1=109;
        float fArr[]=new float[N];

        init(iArr3, 40469);
        init(fArr, -2.475F);

        lMeth(Test.fFld);
        Test.iFld >>>= Test.iFld;
        Test.iFld ^= Test.iFld;
        for (i14 = 200; i14 > 6; i14 -= 3) {
            l = Test.iFld;
            Test.iFld += -31576;
        }
        Test.instanceCount >>>= -6;
        Test.instanceCount <<= i15;
        iArr3[(i15 >>> 1) % N] = i14;
        i16 = 1;
        do {
            if (b2) break;
            i15 += i16;
        } while (++i16 < 305);
        Test.fFld -= by1;
        fArr[(0 >>> 1) % N] += -4;
        fArr = fArr;
        long meth_res = l + Double.doubleToLongBits(d1) + i14 + i15 + i16 + (b2 ? 1 : 0) + by1 +
            checkSum(iArr3) + Double.doubleToLongBits(checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-218, i1=59392, i17=10470, i18=6, i19=-9, i20=49160, i21=-227, i22=1328;
        float f=105.348F;
        double d=1.28617;
        short s1=-12694;
        byte by2=22;
        long lArr1[]=new long[N];

        init(lArr1, -12023L);

        Test.iFld *= (int)1L;
        for (i = 8; i < 283; ++i) {
            f *= (float)d;
            i1 -= iMeth(Test.instanceCount, d);
        }
        Test.iFld -= (int)1L;
        i1 += (int)Test.instanceCount;
        for (i17 = 2; i17 < 158; ++i17) {
            i1 = i17;
            Test.lFld = Test.iFld;
            switch (((i17 % 4) * 5) + 76) {
            case 93:
                i1 += (((i17 * s1) + Test.iFld) - i1);
                i18 -= i1;
                Test.lFld += s1;
                break;
            case 80:
                for (i19 = i17; 161 > i19; ++i19) {
                    Test.dArrFld[i17][i17] -= 37983;
                    s1 <<= (short)i1;
                    for (i21 = i19; i21 < 1; ++i21) {
                        by2 <<= (byte)Test.iFld;
                        switch ((i17 % 4) + 112) {
                        case 112:
                        case 113:
                            i18 = (int)Test.instanceCount;
                            Test.iArrFld[i19] = Test.iFld;
                            break;
                        case 114:
                            i20 |= i22;
                            Test.instanceCount <<= -57976;
                            s1 += (short)(i21 * i21);
                            i18 = i1;
                        case 115:
                            i20 -= (int)Test.lFld;
                            Test.fFld *= Test.instanceCount;
                            d *= i21;
                            break;
                        default:
                            i20 &= i22;
                            s1 += (short)i21;
                        }
                    }
                }
            case 87:
                i18 += i17;
                break;
            case 92:
                Test.iArrFld[i17] *= Test.iFld;
            default:
                lArr1[i17] >>>= Test.instanceCount;
            }
        }

        System.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        System.out.println("d i17 i18 = " + Double.doubleToLongBits(d) + "," + i17 + "," + i18);
        System.out.println("s1 i19 i20 = " + s1 + "," + i19 + "," + i20);
        System.out.println("i21 i22 by2 = " + i21 + "," + i22 + "," + by2);
        System.out.println("lArr1 = " + checkSum(lArr1));

        System.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        System.out.println("Test.lFld Test.dArrFld Test.iArrFld = " + Test.lFld + "," +
            Double.doubleToLongBits(checkSum(Test.dArrFld)) + "," + checkSum(Test.iArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
