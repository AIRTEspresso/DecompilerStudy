// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:44:36 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3927L;
    public static boolean bFld=false;
    public static float fFld=92.572F;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.4F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i5, int i6) {

        int i7=51610, i8=13, i9=3, i10=85, i11=10, i12=12, i13=-217;
        float f=60.773F;
        short s=20;

        Test.instanceCount *= Test.instanceCount;
        i5 %= (int)(i5 | 1);
        for (i7 = 14; i7 < 251; ++i7) {
            for (i9 = 1; i9 < 7; i9++) {
                f = i9;
            }
            i10 += (i7 * i6);
            for (i11 = 1; i11 < 7; ++i11) {
                i10 += i11;
                i13 = 1;
                while (++i13 < 2) {
                    if (Test.bFld) break;
                    i10 += (((i13 * Test.instanceCount) + i10) - s);
                    Test.instanceCount = i10;
                    try {
                        i12 = (i7 % -57635);
                        i10 = (i6 / -1608782402);
                        i10 = (i8 / i6);
                    } catch (ArithmeticException a_e) {}
                    i10 -= i8;
                    f -= Test.instanceCount;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11 + i12 + i13 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(boolean b, long l, int i4) {

        int i14=-245, i15=2, i16=42729, i17=3959, iArr[]=new int[N];
        byte by=85;
        short s1=-22955;

        FuzzerUtils.init(iArr, -42462);

        l >>>= lMeth(i4, i4);
        for (i14 = 9; i14 < 397; ++i14) {
            Test.fFld += by;
            i4 += (((i14 * l) + i14) - i15);
            i15 += i14;
            i16 = 1;
            do {
                try {
                    i15 = (i14 / 59);
                    i4 = (197 % i15);
                    iArr[i14 - 1] = (39 % i16);
                } catch (ArithmeticException a_e) {}
                try {
                    i4 = (i15 % -25429);
                    i15 = (iArr[i16] / iArr[i16]);
                    i15 = (i4 / i16);
                } catch (ArithmeticException a_e) {}
                i4 += i16;
                i17 = 1;
                do {
                    s1 -= (short)i17;
                    if (Test.bFld) break;
                    try {
                        i4 = (i17 / iArr[i16]);
                        i15 = (i16 / i14);
                        i15 = (i4 % i16);
                    } catch (ArithmeticException a_e) {}
                    i15 |= -10;
                    if (true) break;
                } while (++i17 < 1);
            } while (++i16 < 4);
        }
        vMeth1_check_sum += (b ? 1 : 0) + l + i4 + i14 + i15 + by + i16 + i17 + s1 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2) {

        int i3=-128, i18=2, i19=-10041, i20=-102, i21=52;
        short s2=13631;
        byte by1=57;
        double d=0.73268;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -1619260512L);
        FuzzerUtils.init(fArr, 104.641F);

        i3 = 1;
        while (++i3 < 304) {
            vMeth1(Test.bFld, Test.instanceCount, i2);
            Test.instanceCount -= i2;
            if (Test.bFld) {
                i2 ^= i2;
                i18 = 1;
                do {
                    switch ((i3 % 6) + 24) {
                    case 24:
                        for (i19 = 1; i19 < 1; ++i19) {
                            s2 %= (short)2.368F;
                            i2 += (int)(-47324L + (i19 * i19));
                            lArr[i3 + 1] -= i21;
                            switch (((i3 % 1) * 5) + 78) {
                            case 81:
                                s2 += (short)(i19 - Test.instanceCount);
                                Test.instanceCount += i21;
                                break;
                            default:
                                i2 += by1;
                            }
                        }
                        break;
                    case 25:
                        i2 += i18;
                        break;
                    case 26:
                        Test.instanceCount -= i20;
                        break;
                    case 27:
                        Test.instanceCount <<= -961493510831919315L;
                    case 28:
                        i2 -= (int)d;
                        break;
                    case 29:
                        fArr[i18 - 1] *= i20;
                        break;
                    default:
                        Test.fFld *= -47046;
                    }
                } while (++i18 < 5);
            }
        }
        vMeth_check_sum += i2 + i3 + i18 + i19 + i20 + s2 + i21 + by1 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=127, i1=-1, i22=-41370, i23=-102, i24=-58575, i25=-28237, i26=2, i27=19077, i28=-6, i29=11, i30=-9,
            iArr1[]=new int[N];
        short s3=-32618;
        double d1=-2.65026;
        byte by2=-46;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -48971);
        FuzzerUtils.init(lArr1, -3630301093L);

        for (i = 6; i < 372; i++) {
            vMeth(i);
            i1 += i;
        }
        iArr1[(i1 >>> 1) % N] = i1;
        i22 = 1;
        do {
            i1 -= i;
            i1 = s3;
            switch ((i22 % 2) + 92) {
            case 92:
                d1 = Test.instanceCount;
                break;
            case 93:
                iArr1[i22] *= i;
                for (i23 = i22; i23 < 99; ++i23) {
                    for (i25 = i22; i25 < 1; ++i25) {
                        Test.instanceCount += i25;
                        Test.instanceCount += (i25 * i25);
                        i26 += (i25 * i25);
                    }
                }
                for (i27 = 5; i27 < 99; i27++) {
                    i26 = (int)Test.instanceCount;
                    for (i29 = i27; i29 < 2; ++i29) {
                        switch (((i22 % 2) * 5) + 127) {
                        case 135:
                            Test.instanceCount = Test.instanceCount;
                            i26 <<= by2;
                            if (Test.bFld) {
                                lArr1[i29 - 1] += i26;
                                i24 += i1;
                                iArr1[i29 - 1] = i22;
                                switch (((i22 >>> 1) % 10) * 5) {
                                case 7:
                                    switch (((i27 % 2) * 5) + 84) {
                                    case 93:
                                        i28 *= i24;
                                        break;
                                    case 88:
                                        Test.fArrFld[i27] -= i24;
                                        try {
                                            i30 = (i25 % i23);
                                            i28 = (iArr1[i29] % iArr1[i22]);
                                            iArr1[i22] = (i26 % 3227);
                                        } catch (ArithmeticException a_e) {}
                                        break;
                                    }
                                    break;
                                case 29:
                                    if (Test.bFld) continue;
                                case 40:
                                    i28 = -62;
                                    break;
                                case 17:
                                    Test.instanceCount = i;
                                    break;
                                case 30:
                                    try {
                                        i24 = (i28 % i1);
                                        i28 = (1485926013 / i22);
                                        i28 = (i1 % -21090);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 26:
                                    i24 = (int)-115L;
                                case 2:
                                    if (Test.bFld) continue;
                                    break;
                                case 24:
                                    i24 = (int)Test.fFld;
                                    break;
                                case 48:
                                    i1 += (int)1.111493;
                                    break;
                                case 31:
                                default:
                                    if (Test.bFld) continue;
                                }
                            }
                        case 134:
                            lArr1[i29 - 1] = (long)Test.fFld;
                            break;
                        }
                    }
                }
            default:
                Test.instanceCount *= i24;
            }
        } while (++i22 < 253);

        FuzzerUtils.out.println("i i1 i22 = " + i + "," + i1 + "," + i22);
        FuzzerUtils.out.println("s3 d1 i23 = " + s3 + "," + Double.doubleToLongBits(d1) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 by2 iArr1 = " + i30 + "," + by2 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
