// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:24:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public float fFld=89.320F;
    public static boolean bFld=true;
    public static volatile double dFld=-1.1967;
    public short sFld=-21962;
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 34974);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i8=-95;

        Test.dFld += 146L;
        i8 += -41196;
        i8 += i8;
        i8 >>= i8;
        i8 >>>= (int)Test.instanceCount;
        i8 = -80;
        Test.instanceCount = Test.instanceCount;
        vMeth1_check_sum += Float.floatToIntBits(f) + i8;
    }

    public double dMeth(double d, int i5) {

        int i6=5514, i7=-94, i9=-14, i10=-12, i11=10;
        double d1=-2.77755, dArr[]=new double[N];
        byte by=-84;
        long lArr1[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr1, 6812899197426637662L);
        FuzzerUtils.init(fArr, -2.285F);
        FuzzerUtils.init(dArr, 2.61954);

        i6 = 1;
        do {
            i5 -= (int)Test.instanceCount;
            for (d1 = 1; d1 < 6; ++d1) {
                lArr1[(int)(d1 + 1)] -= Test.instanceCount;
                Test.bFld = (Test.bArrFld[(i6 >>> 1) % N] = Test.bFld);
                vMeth1(fFld);
                d *= i7;
                i5 += (int)(-2.642F + (d1 * d1));
            }
        } while (++i6 < 280);
        for (i9 = 7; 224 > i9; i9 += 2) {
            fArr[i9 - 1][i9 - 1] -= (float)Test.dFld;
        }
        i7 |= i7;
        Test.iArrFld[(i7 >>> 1) % N] = by;
        i11 = 164;
        while (--i11 > 0) {
            Test.dFld = 214233187160359522L;
            dArr[i11 - 1] *= sFld;
        }
        long meth_res = Double.doubleToLongBits(d) + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i9 + i10 + by + i11 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void vMeth(int i3, long l, int i4) {

        long l1=181L, lArr2[]=new long[N];
        int i12=-70, i13=64, i14=-1, i15=-16609;
        byte by1=-66;

        FuzzerUtils.init(lArr2, 5242775699499073777L);

        fFld -= (float)(-((169 * dMeth(Test.dFld, i3)) * i4));
        i4 -= i3;
        for (l1 = 3; l1 < 229; l1++) {
            for (i13 = 1; i13 < 7; ++i13) {
                i4 = i4;
                fFld += (i13 * i13);
                i14 = i4;
                by1 = (byte)l1;
                i15 = 1;
                while (++i15 < 2) {
                    i4 *= -46;
                    lArr2 = lArr2;
                    Test.instanceCount = i15;
                    l >>= i12;
                }
                i14 ^= (int)l;
                i4 += (int)l;
            }
        }
        vMeth_check_sum += i3 + l + i4 + l1 + i12 + i13 + i14 + by1 + i15 + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=31075, i1=-2, i2=-107, i16=-34934, i17=3, i18=-71, i19=-7, i20=-41098, i21=-13, i22=9;
        byte by2=-43;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        for (i = 191; i > 3; --i) {
            i1 = Test.iArrFld[i + 1];
            switch ((i % 9) + 41) {
            case 41:
                i2 = 133;
                do {
                    lArr[i2 - 1] >>>= (i1 >>>= (int)(Test.instanceCount -= (long)(i2 % 95.71801)));
                } while (--i2 > 0);
                vMeth(i1, Test.instanceCount, i1);
                i16 = 133;
                while (--i16 > 0) {
                    i1 *= i1;
                }
                break;
            case 42:
                for (i17 = 3; i17 < 133; i17++) {
                    i1 += (-5 + (i17 * i17));
                    lArr[i + 1] <<= i1;
                }
                break;
            case 43:
            case 44:
                Test.instanceCount -= (long)fFld;
                i1 = -130;
                Test.iArrFld[i] = i18;
                break;
            case 45:
                Test.dFld = i2;
                lArr[i - 1] = Test.instanceCount;
                i1 *= (int)Test.dFld;
                break;
            case 46:
                Test.dFld = i;
                for (i19 = 6; i19 < 133; ++i19) {
                    i20 += (((i19 * by2) + i2) - Test.instanceCount);
                    i20 *= (int)fFld;
                    Test.instanceCount >>= i20;
                    i1 -= (int)fFld;
                    try {
                        i18 = (229 % i2);
                        Test.iArrFld[i] = (i17 % i2);
                        i18 = (Test.iArrFld[i - 1] / i16);
                    } catch (ArithmeticException a_e) {}
                    i18 += i19;
                    i20 = i16;
                    i21 = 1;
                    while (++i21 < 2) {
                        i18 = i;
                        i1 &= -37377;
                        try {
                            i18 = (i20 % i20);
                            i1 = (-2105654224 % Test.iArrFld[i + 1]);
                            i22 = (i2 % 11743);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            case 47:
                fFld = (float)Test.dFld;
                break;
            case 48:
                i22 += i18;
                break;
            case 49:
                Test.iArrFld = Test.iArrFld;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by2 = " + i19 + "," + i20 + "," + by2);
        FuzzerUtils.out.println("i21 i22 lArr = " + i21 + "," + i22 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld sFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + sFld +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
