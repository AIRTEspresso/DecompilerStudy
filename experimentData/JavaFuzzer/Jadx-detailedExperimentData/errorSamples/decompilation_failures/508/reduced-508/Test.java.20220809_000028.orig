import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 00:40:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=49446L;
    public static int iFld=-2975;
    public static boolean bFld=true;
    public static int iFld1=222;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        init(Test.iArrFld, 13);
        init(Test.lArrFld, 135268376471142250L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, long l1) {

        int i3=23828, i4=7, i5=25573, i6=-141, i7=56119, i8=0, i9=25139;
        byte by1=8;

        i3 = 1;
        while (++i3 < 320) {
            for (i4 = 1; i4 < 5; i4++) {
                Test.iArrFld[i4 + 1] = by1;
                by1 *= (byte)i5;
                if (true) break;
            }
            for (i6 = i3; i6 < 5; i6++) {
                i2 = (int)Test.instanceCount;
                Test.lArrFld[i6 + 1] = 2889189745785352286L;
                for (i8 = 1; i8 < 1; ++i8) {
                    if (i4 != 0) {
                    }
                    Test.lArrFld[i8] *= i8;
                    if (i9 != 0) {
                    }
                    l1 += 31453;
                    Test.iArrFld[i3 + 1] += (int)l1;
                    i5 /= (int)(l1 | 1);
                }
            }
        }
        long meth_res = i2 + l1 + i3 + i4 + i5 + by1 + i6 + i7 + i8 + i9;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i1, float f, long l) {

        double d=-108.36446;
        int i10=-3438, i11=-49, i12=0, i13=-14;
        byte by2=-126;
        boolean b=false;
        short s=-3483;

        Test.iArrFld[(i1 >>> 1) % N] = (int)((i1 * 1.726F) - (iMeth(Test.iFld, l) + f));
        if (b) {
            i1 += (int)l;
            for (d = 13; d < 298; ++d) {
                Test.iArrFld = Test.iArrFld;
                by2 += (byte)d;
                for (i11 = 1; i11 < 6; ++i11) {
                    l -= Test.iFld;
                    Test.instanceCount = i13;
                    switch ((int)(((d % 1) * 5) + 99)) {
                    case 101:
                        try {
                            i10 = (i13 % i13);
                            Test.iArrFld[(int)(d)] = (-46971 / i11);
                            Test.iArrFld[i11] = (18588 / i10);
                        } catch (ArithmeticException a_e) {}
                        if (false) {
                            Test.iArrFld[(Test.iFld >>> 1) % N] *= (int)l;
                            Test.iArrFld[i11 - 1] = 228;
                            l -= Test.iFld;
                        } else if (b) {
                            i13 -= i11;
                        } else if (b) {
                            by2 += (byte)1;
                        } else {
                            i12 += i11;
                        }
                    }
                }
            }
        } else if (b) {
            i13 = i13;
        } else {
            s += (short)l;
            vMeth1_check_sum += i1 + Float.floatToIntBits(f) + l + Double.doubleToLongBits(d) + i10 + by2 + i11 + i12 +
                i13 + (b ? 1 : 0) + s;
            return;
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f) + l + Double.doubleToLongBits(d) + i10 + by2 + i11 + i12 + i13
            + (b ? 1 : 0) + s;
    }

    public static void vMeth(int i) {

        byte by=2;
        float f1=0.395F;
        int i14=-6168, i15=32603, i16=-55754, i17=-94, i18=10, i19=-10;
        short s1=31687;
        long lArr[]=new long[N];

        init(lArr, 3L);

        lArr[(110 >>> 1) % N] = ((--Test.instanceCount) - ((8 + (Test.instanceCount * by)) - -38435));
        Test.iArrFld = int1array(N, (int)-44707);
        switch (((((i -= i) >>> 1) % 9) * 5) + 38) {
        case 54:
            vMeth1(-9, f1, Test.instanceCount);
            for (i14 = 16; i14 < 257; i14++) {
                i15 *= (int)94.476F;
                for (i16 = 1; i16 < 7; i16++) {
                    if (Test.bFld) {
                        f1 -= 28640;
                        Test.lArrFld[i14 - 1] += 23681;
                        for (i18 = 1; i18 < 2; i18++) {
                            by *= (byte)i14;
                            Test.iFld += 0;
                            Test.iFld = (int)244L;
                            f1 -= i;
                        }
                    } else {
                        Test.iArrFld[i14 - 1] = s1;
                    }
                }
            }
            break;
        case 56:
            i17 = i19;
            break;
        case 77:
            Test.iArrFld[(i16 >>> 1) % N] += i14;
            break;
        case 75:
            i17 = s1;
            break;
        case 49:
        case 52:
            Test.iFld /= (int)(i17 | 1);
        case 57:
            Test.iArrFld[(i17 >>> 1) % N] >>>= Test.iFld1;
            break;
        case 40:
            Test.instanceCount = -60761;
        case 46:
            by += (byte)Test.iFld1;
        default:
            i += (int)2.580F;
        }
        vMeth_check_sum += i + by + Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + i18 + i19 + s1 +
            checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=10, i21=11, i22=74, i23=-944, i24=146, i25=-5;
        byte by3=-12;
        float f2=-121.905F;
        double d1=23.21298;
        short s2=31988;

        vMeth(Test.iFld);
        for (i20 = 249; i20 > 13; i20--) {
            for (i22 = 1; i22 < 106; i22++) {
                for (i24 = 1; i24 < 2; i24++) {
                    i23 = i23;
                    Test.iFld1 = (int)Test.instanceCount;
                    Test.iArrFld[i24 - 1] = (int)Test.instanceCount;
                    i25 += i24;
                    i21 += i22;
                    by3 = (byte)i24;
                    switch (((i21 >>> 1) % 9) + 7) {
                    case 7:
                        Test.bFld = true;
                        Test.iFld += i24;
                        f2 = Test.instanceCount;
                    case 8:
                        if (Test.bFld) continue;
                        Test.instanceCount += (((i24 * Test.instanceCount) + i21) - Test.instanceCount);
                        Test.iFld1 += (-8 + (i24 * i24));
                        Test.iFld = i23;
                        break;
                    case 9:
                    case 10:
                        d1 %= (Test.instanceCount | 1);
                        i21 = s2;
                        break;
                    case 11:
                        i21 >>= (int)Test.instanceCount;
                        f2 /= (i21 | 1);
                        Test.iFld = Test.iFld;
                        d1 += -14;
                        break;
                    case 12:
                    case 13:
                        i23 += i24;
                        Test.lArrFld[i20] *= 87;
                        s2 = s2;
                        Test.iFld1 += (((i24 * s2) + s2) - Test.instanceCount);
                    case 14:
                        f2 += (43800 + (i24 * i24));
                        Test.iArrFld[i24 + 1] = (int)-9788L;
                        break;
                    case 15:
                        i25 += (((i24 * i23) + i22) - i21);
                    }
                }
            }
        }

        System.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        System.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        System.out.println("by3 f2 d1 = " + by3 + "," + Float.floatToIntBits(f2) + "," +
            Double.doubleToLongBits(d1));
        System.out.println("s2 = " + s2);

        System.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        System.out.println("Test.iFld1 Test.iArrFld Test.lArrFld = " + Test.iFld1 + "," +
            checkSum(Test.iArrFld) + "," + checkSum(Test.lArrFld));

        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
