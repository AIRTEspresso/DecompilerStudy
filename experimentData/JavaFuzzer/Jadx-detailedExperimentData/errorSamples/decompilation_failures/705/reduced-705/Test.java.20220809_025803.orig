import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 02:13:42 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4212500827L;
    public static boolean bFld=true;
    public float fFld=-1.281F;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        init(Test.iArrFld, -11);
        init(Test.lArrFld, -3911311148057376227L);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(byte by) {

        int i4=-127, i6=-8, i7=181, i8=193, i9=-33912;
        double dArr[]=new double[N];

        init(dArr, 0.4392);

        Test.lArrFld[(-11 >>> 1) % N] -= 14;
        i4 = (int)Test.instanceCount;
        i4 += i4;
        for (int i5 : Test.iArrFld) {
            if (Test.bFld) break;
            by = (byte)-157;
            for (i6 = 1; i6 < 4; ++i6) {
                i4 >>>= (int)Test.instanceCount;
                dArr[i6] *= i4;
                i7 -= i4;
                i8 = 1;
                do {
                    Test.lArrFld[i6 + 1] -= Test.instanceCount;
                    i7 = i5;
                    i5 = i7;
                    i9 = i8;
                } while (++i8 < 2);
            }
        }
        long meth_res = by + i4 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(long l1, float f, int i3) {

        byte by1=-60;
        int i10=-11, i11=-33930, i13=117;

        Test.iArrFld[(-76 >>> 1) % N] >>>= iMeth1(by1);
        for (i10 = 5; i10 < 358; i10++) {
            int i12=-60880;
            i3 += (((i10 * i11) + i11) - i10);
            i11 -= i10;
            i11 &= (int)l1;
            switch (((i10 % 10) * 5) + 30) {
            case 65:
                switch ((i10 % 2) + 4) {
                case 4:
                    i12 = i10;
                    i3 -= i11;
                    i11 += i11;
                    break;
                case 5:
                    i13 = 1;
                    do {
                        i3 += 20319;
                        Test.iArrFld[i10 + 1] &= (int)l1;
                        Test.bFld = Test.bFld;
                        i3 += (int)f;
                    } while (++i13 < 5);
                    break;
                default:
                    f = by1;
                }
                break;
            case 74:
                Test.lArrFld[i10 - 1] = i11;
                break;
            case 56:
                i3 >>>= i10;
                break;
            case 46:
                if (Test.bFld) break;
                break;
            case 45:
            case 60:
            case 57:
                l1 += (i10 + i11);
                break;
            case 67:
                Test.instanceCount += Test.instanceCount;
                break;
            case 70:
                i12 = (int)f;
                break;
            case 72:
                i12 += 10324;
                break;
            default:
                Test.iArrFld[i10 + 1] += i10;
            }
        }
        long meth_res = l1 + Float.floatToIntBits(f) + i3 + by1 + i10 + i11 + i13;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(long l) {

        int i2=-137, i14=-19481, i15=-21596, i16=-243, i17=105, i18=123;
        double d=-114.111568;
        boolean b=true;
        float f1=-1.349F;

        i2 = 318;
        while (--i2 > 0) {
            d = (Test.iArrFld[i2 - 1] *= ((i2 * 12472) + i2));
            if (b) break;
            l -= sMeth(l, f1, i2);
        }
        i14 <<= 43649;
        for (i15 = 167; i15 > 2; i15 -= 2) {
            switch ((i15 % 2) + 105) {
            case 105:
                Test.instanceCount += (i15 * i15);
                i16 = i15;
                for (i17 = 1; i17 < 19; ++i17) {
                    l <<= i14;
                    if (i14 != 0) {
                    }
                    Test.lArrFld[i15 - 1] += i15;
                }
                Test.iArrFld = Test.iArrFld;
                break;
            case 106:
                Test.iArrFld[i15 + 1] = (int)0L;
            default:
                d += Test.instanceCount;
            }
        }
        long meth_res = l + i2 + Double.doubleToLongBits(d) + (b ? 1 : 0) + Float.floatToIntBits(f1) + i14 + i15 + i16
            + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-139, i1=-160, i19=14, i20=-57266, i21=1, i22=-4, i23=13013;
        double d1=-1.22965;
        byte by2=-64;

        for (i = 2; i < 203; ++i) {
            i1 += (i | i1);
        }
        if (Test.bFld) {
            Test.instanceCount -= (Math.abs(iMeth(Test.instanceCount)) + Test.instanceCount);
            i1 = 137;
            i1 -= (int)Test.instanceCount;
        } else {
            i19 = 394;
            do {
                if (Test.bFld) break;
                Test.iArrFld[i19] >>= i19;
                i1 = (int)Test.instanceCount;
                i1 *= (int)1.258F;
                d1 = i19;
                i20 = 1;
                do {
                    i1 ^= i20;
                    if (Test.bFld) break;
                    for (i21 = i20; 1 > i21; i21++) {
                        i22 = i;
                        Test.iArrFld[i19] *= i21;
                        i22 += i21;
                        d1 = fFld;
                        Test.iArrFld[i21] = i20;
                        switch ((i21 % 3) + 44) {
                        case 44:
                        case 45:
                            switch ((i19 % 5) + 116) {
                            case 116:
                                i22 -= (int)Test.instanceCount;
                                i22 = i21;
                                Test.instanceCount -= (long)d1;
                            case 117:
                                i22 += (((i21 * Test.instanceCount) + Test.instanceCount) - i22);
                                i22 += i;
                                i1 -= i23;
                                break;
                            case 118:
                                i22 = (int)172L;
                                break;
                            case 119:
                                i22 <<= i19;
                                break;
                            case 120:
                                dArrFld[i21] -= by2;
                            }
                            break;
                        case 46:
                            Test.iArrFld[i21] = 11;
                            break;
                        }
                    }
                } while (++i20 < 64);
            } while (--i19 > 0);
        }

        System.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        System.out.println("d1 i20 i21 = " + Double.doubleToLongBits(d1) + "," + i20 + "," + i21);
        System.out.println("i22 i23 by2 = " + i22 + "," + i23 + "," + by2);

        System.out.println("Test.instanceCount Test.bFld fFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + Float.floatToIntBits(fFld));
        System.out.println("Test.iArrFld Test.lArrFld dArrFld = " + checkSum(Test.iArrFld) + "," +
            checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(checkSum(dArrFld)));

        System.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        System.out.println("sMeth_check_sum: " + sMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
