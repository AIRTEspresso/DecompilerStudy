import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 00:41:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=14;
    public volatile double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, long l2, short s) {

        int i3=14, i4=140, i5=50613, iArr[]=new int[N];
        float f=-1.342F, f1=-69.135F, f2=12.668F, fArr[]=new float[N];
        boolean b=false;
        double dArr[]=new double[N];

        init(iArr, -54799);
        init(fArr, 123.983F);
        init(dArr, 88.119575);

        i3 = 1;
        while (++i3 < 159) {
            f += (i3 + i3);
            for (f1 = i3; f1 < 10; ++f1) {
                for (f2 = 1; f2 < 1; f2++) {
                    b = b;
                    s += (short)f2;
                    s |= (short)l1;
                    try {
                        i4 = (i3 % iArr[(int)(f1)]);
                        i5 = (i5 / 64);
                        Test.iFld = (i3 / i3);
                    } catch (ArithmeticException a_e) {}
                    fArr[i3 - 1] += l1;
                    i4 = (int)Test.instanceCount;
                    f -= -2;
                    Test.iFld = Test.iFld;
                }
                dArr[(int)(f1 + 1)] += s;
                i4 *= (int)f;
                Test.instanceCount = i5;
            }
        }
        vMeth2_check_sum += l1 + l2 + s + i3 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i4 +
            Float.floatToIntBits(f2) + i5 + (b ? 1 : 0) + checkSum(iArr) +
            Double.doubleToLongBits(checkSum(fArr)) + Double.doubleToLongBits(checkSum(dArr));
    }

    public static void vMeth1(int i1) {

        byte by1=-90;
        int i2=-99, i6=-13, i7=-11, i8=-11, i9=21, iArr1[]=new int[N];
        boolean b1=false;
        short sArr[]=new short[N];

        init(iArr1, 32);
        init(sArr, (short)-27132);

        by1 = (byte)(++Test.instanceCount);
        i2 = 130;
        do {
            vMeth2(Test.instanceCount, Test.instanceCount, (short)(31255));
            i6 = 1;
            do {
                i1 += i6;
            } while (++i6 < 12);
            if (b1) break;
            for (i7 = 12; i7 > 1; i7 -= 3) {
                switch ((((i9 >>> 1) % 3) * 5) + 60) {
                case 63:
                    Test.instanceCount += i7;
                    iArr1[i2] += (int)Test.instanceCount;
                    i8 >>= Test.iFld;
                    sArr[i2 - 1] -= (short)41;
                    break;
                case 71:
                case 65:
                    Test.instanceCount -= i7;
                    i8 += i7;
                    Test.iFld += (((i7 * i1) + Test.instanceCount) - i1);
                    break;
                }
            }
        } while (--i2 > 0);
        vMeth1_check_sum += i1 + by1 + i2 + i6 + (b1 ? 1 : 0) + i7 + i8 + i9 + checkSum(iArr1) +
            checkSum(sArr);
    }

    public static void vMeth(int i, byte by) {


        vMeth1(Test.iFld);
        vMeth_check_sum += i + by;
    }

    public void mainTest(String[] strArr1) {

        long l=13L, lArr[][]=new long[N][N];
        byte by2=-55;
        int i10=199, i11=2, i12=-1, i13=1589, i14=-11, i15=125, iArr2[][]=new int[N][N];
        float f4=-1.321F, fArr1[]=new float[N];
        double d=36.72546;
        boolean b2=false;

        init(fArr1, 1.381F);
        init(lArr, 64005L);
        init(iArr2, -1);

        l = 1;
        do {
            vMeth(Test.iFld, by2);
            Test.instanceCount += Test.iFld;
            by2 += (byte)l;
        } while (++l < 282);
        lArr = lArr;
        for (i10 = 2; 365 > i10; i10++) {
            for (i12 = 1; i12 < 69; ++i12) {
                Test.instanceCount += i12;
                Test.iFld = -136;
                switch ((((i12 >>> 1) % 1) * 5) + 44) {
                case 49:
                    f4 = Test.iFld;
                    i13 -= (int)f4;
                    break;
                }
                switch (((i10 % 2) * 5) + 93) {
                case 102:
                    i11 *= i10;
                    d = 1;
                    do {
                        if (b2) break;
                        iArr2[i10 - 1][(int)(d)] = i12;
                        dArrFld = double1array(N, (double)84.12739);
                        f4 += (float)(d - by2);
                        Test.iFld -= (int)f4;
                        Test.iFld += -156;
                    } while (++d < 2);
                    Test.iFld = (int)61790L;
                    Test.instanceCount = Test.instanceCount;
                case 95:
                    by2 = (byte)Test.iFld;
                    iArr2[i10] = int1array(N, (int)-206);
                    f4 *= Test.iFld;
                default:
                    for (i14 = 1; i14 < 2; i14++) {
                        iArr2[i10][i14] += (int)Test.instanceCount;
                        Test.iFld += i10;
                        i15 -= i14;
                    }
                }
            }
        }

        System.out.println("l by2 i10 = " + l + "," + by2 + "," + i10);
        System.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        System.out.println("f4 d b2 = " + Float.floatToIntBits(f4) + "," + Double.doubleToLongBits(d) + "," + (b2
            ? 1 : 0));
        System.out.println("i14 i15 fArr1 = " + i14 + "," + i15 + "," +
            Double.doubleToLongBits(checkSum(fArr1)));
        System.out.println("lArr iArr2 = " + checkSum(lArr) + "," + checkSum(iArr2));

        System.out.println("Test.instanceCount Test.iFld dArrFld = " + Test.instanceCount + "," + Test.iFld + ","
            + Double.doubleToLongBits(checkSum(dArrFld)));

        System.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
