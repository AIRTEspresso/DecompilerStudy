import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:41:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6729139300331859853L;
    public static volatile boolean bFld=false;
    public volatile long lArrFld[]=new long[N];

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, long l, int i8) {

        int i9=-26, i10=-1;
        boolean b=false, bArr[][][]=new boolean[N][N][N];
        float f=-85.332F;

        init(bArr, true);

        for (i9 = 369; 16 < i9; i9 -= 3) {
            i7 <<= i10;
            bArr[i9 + 1][i9][i9 - 1] = b;
        }
        f += (float)-2.66792;
        l >>= i10;
        vMeth1_check_sum += i7 + l + i8 + i9 + i10 + (b ? 1 : 0) + Float.floatToIntBits(f) + checkSum(bArr);
    }

    public static void vMeth(int i1, int i2, int i3) {

        int i4=-16807, i5=-17420, i6=12, i11=8, i12=0, i13=12, iArr1[]=new int[N];
        byte by=57;
        float f1=-46.459F, fArr[]=new float[N];
        double d=1.126533;

        init(iArr1, -51677);
        init(fArr, -1.356F);

        i4 = 1;
        do {
            for (i5 = 1; i5 < 6; i5++) {
                switch ((i4 % 9) + 44) {
                case 44:
                    vMeth1(i3, Test.instanceCount, -52);
                    for (i11 = 1; i11 < 2; i11++) {
                        Test.instanceCount = i6;
                        i2 += (i11 | i11);
                        iArr1 = iArr1;
                        if (Test.bFld) break;
                        i12 = -1;
                        if (Test.bFld) break;
                        switch ((i4 % 7) + 28) {
                        case 28:
                        case 29:
                            i6 >>>= (int)Test.instanceCount;
                            by += (byte)(((i11 * Test.instanceCount) + Test.instanceCount) - i5);
                            break;
                        case 30:
                            if (i4 != 0) {
                                vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i11 + i12 + by +
                                    Float.floatToIntBits(f1) + i13 + Double.doubleToLongBits(d) +
                                    checkSum(iArr1) + Double.doubleToLongBits(checkSum(fArr));
                                return;
                            }
                            break;
                        case 31:
                            Test.instanceCount = i2;
                        case 32:
                            i2 -= -6;
                            break;
                        case 33:
                            i12 += (int)f1;
                            break;
                        case 34:
                            if (Test.bFld) continue;
                        }
                    }
                    break;
                case 45:
                    Test.instanceCount += (-20130 + (i5 * i5));
                    break;
                case 46:
                    i3 -= i13;
                case 47:
                    by += (byte)(-4L + (i5 * i5));
                case 48:
                    fArr[i5] *= i4;
                    break;
                case 49:
                    i1 += i5;
                case 50:
                case 51:
                    i6 *= (int)d;
                case 52:
                    i6 -= (int)f1;
                    break;
                }
            }
        } while (++i4 < 262);
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i11 + i12 + by + Float.floatToIntBits(f1) + i13 +
            Double.doubleToLongBits(d) + checkSum(iArr1) +
            Double.doubleToLongBits(checkSum(fArr));
    }

    public static float fMeth() {

        int i14=160, i15=-90, i16=-11, i17=-7;
        float f2=-35.358F;
        double d1=0.54138;
        long lArr[]=new long[N];

        init(lArr, -2522260819L);

        vMeth(-21017, i14, i14);
        i15 = 1;
        do {
            for (i16 = 1; i16 < 5; i16++) {
                if (Test.bFld) {
                    if (Test.bFld) continue;
                    i17 += (i16 ^ i14);
                    lArr[i16 + 1] -= i16;
                } else if (Test.bFld) {
                    i17 = (int)Test.instanceCount;
                    if (Test.bFld) break;
                } else {
                    i14 &= 5;
                }
                lArr = lArr;
                i17 <<= i17;
                i14 = (int)Test.instanceCount;
                f2 = i17;
                d1 -= Test.instanceCount;
            }
        } while (++i15 < 354);
        long meth_res = i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) +
            checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3, i18=-231, i19=5, i21=13324, i22=-142, i23=-7, i24=1, i25=198, i26=0, i27=46508, i28=-176, iArr[]=new
            int[N];
        double d2=125.61015;
        float f3=1.144F, fArr1[]=new float[N];
        short s=-17564;
        byte by1=11;

        init(iArr, -186);
        init(fArr1, 1.519F);

        i = 1;
        do {
            Test.instanceCount ^= -80;
            iArr[i + 1] += (int)((i - (-127 * fMeth())) - d2);
            f3 += (i * i);
            i18 += i;
            i19 = 1;
            do {
                lArrFld[i + 1] = i18;
                s = (short)i19;
                f3 += -165;
                iArr[i19 - 1] = 40967;
                i18 += (((i19 * f3) + i) - Test.instanceCount);
            } while (++i19 < 174);
            Test.instanceCount -= i18;
            i18 = (int)d2;
            f3 = -435779364L;
            for (i21 = i; 174 > i21; ++i21) {
                i22 += i21;
                fArr1[i21 + 1] = (float)d2;
                i22 = -62464;
                f3 += by1;
                Test.bFld = Test.bFld;
                iArr[i21 + 1] %= (int)(i19 | 1);
                for (i23 = 1; 1 > i23; i23++) {
                    s += (short)i23;
                }
            }
            for (i25 = 5; i25 < 174; i25++) {
                f3 -= i21;
            }
        } while (++i < 144);
        i22 = i26;
        lArrFld[(i18 >>> 1) % N] += i25;
        for (i27 = 4; i27 < 247; ++i27) {
            i18 >>= (int)Test.instanceCount;
            Test.instanceCount *= (long)d2;
        }

        System.out.println("i d2 f3 = " + i + "," + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f3));
        System.out.println("i18 i19 s = " + i18 + "," + i19 + "," + s);
        System.out.println("i21 i22 by1 = " + i21 + "," + i22 + "," + by1);
        System.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        System.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        System.out.println("iArr fArr1 = " + checkSum(iArr) + "," +
            Double.doubleToLongBits(checkSum(fArr1)));

        System.out.println("Test.instanceCount Test.bFld lArrFld = " + Test.instanceCount + "," + (Test.bFld ? 1 :
            0) + "," + checkSum(lArrFld));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
