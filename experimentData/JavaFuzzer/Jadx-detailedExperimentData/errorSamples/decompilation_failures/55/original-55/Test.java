// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 21:39:07 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-158286646L;
    public byte byFld=-97;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -10);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d) {

        int i4=1921, i5=-7924, i6=118, i7=5, i8=-50, i9=25745, i10=14340;
        double d1=-2.55413, dArr[]=new double[N];
        boolean b=false;
        short s=-25152;
        float f=2.425F, fArr[]=new float[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 1445252468L);
        FuzzerUtils.init(fArr, 0.830F);
        FuzzerUtils.init(dArr, 0.9963);

        for (i4 = 21; 344 > i4; ++i4) {
            for (i6 = 1; 5 > i6; ++i6) {
                for (d1 = 2; d1 > 1; --d1) {
                    i7 >>= i5;
                    if (b) break;
                    s = (short)i8;
                    if (b) break;
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount += (long)(((d1 * i5) + f) - Test.instanceCount);
                    lArr1[(int)(d1 + 1)][(int)(d1 + 1)] = i7;
                    d *= i6;
                    fArr[(i5 >>> 1) % N] -= Test.instanceCount;
                }
                for (i9 = 1; i9 < 2; ++i9) {
                    i7 = i5;
                    dArr[i9 - 1] = 127;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + i8 + (b ? 1
            : 0) + s + Float.floatToIntBits(f) + i9 + i10 + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i3) {

        float f1=-23.146F;
        int i11=113, i12=11, i13=10, i14=65, i15=-14, i16=-2;
        byte by=58;
        boolean b1=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 39L);

        vMeth1(0.90106);
        Test.instanceCount >>= 84;
        i3 = i3;
        lArr2 = lArr2;
        for (f1 = 5; f1 < 148; ++f1) {
            i11 *= -2;
        }
        i12 = 1;
        while (++i12 < 196) {
            i3 -= (int)f1;
            for (i13 = i12; i13 < 8; ++i13) {
                Test.iArrFld1[i12 - 1][i13] += i3;
            }
            if (b1) {
                for (i15 = 1; i15 < 8; ++i15) {
                    i3 >>= i13;
                    i14 ^= by;
                    b1 = b1;
                }
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + i16 + by + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i) {

        int i1=59070, i2=-50753, i17=-9, i18=-12350, i19=-132, i20=24342;
        boolean b2=true;
        float f2=48.730F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2328114433L);

        for (i1 = 367; 9 < i1; i1 -= 2) {
            i *= (iArrFld[i1] + iMeth(154));
            i2 += (((i1 * i1) + Test.instanceCount) - i2);
            i2 += i1;
            for (i17 = 9; i17 > 1; --i17) {
                Test.instanceCount -= -43719L;
                if (b2) {
                    i2 = 5;
                    Test.iArrFld1[i17 + 1][i1] = i1;
                    for (i19 = 1; 2 > i19; i19++) {
                        i20 += (-13 + (i19 * i19));
                        i = i18;
                        if (b2) continue;
                        Test.instanceCount += (-11018 + (i19 * i19));
                    }
                }
                Test.instanceCount += (long)f2;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i17 + i18 + i19 + i20 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=11, i22=-9, i23=241, i24=-20647, i25=136, i26=-29426, i27=237, i28=-54099, i29=-6, i30=202, i31=49305;
        double d2=-25.5744, d3=2.74049, dArr1[]=new double[N];
        float f3=-111.132F;
        boolean b3=false;
        long l1=3540616413L, lArr3[]=new long[N];

        FuzzerUtils.init(lArr3, 13L);
        FuzzerUtils.init(dArr1, -15.104837);

        vMeth(i21);
        for (d2 = 18; d2 < 352; ++d2) {
            i23 = 1;
            while (++i23 < 75) {
                try {
                    i21 = (1200060920 / Test.iArrFld1[i23][i23 - 1]);
                    iArrFld[(int)(d2)] = (i23 / i22);
                    i21 = (i21 / Test.iArrFld1[(int)(d2 - 1)][i23]);
                } catch (ArithmeticException a_e) {}
            }
        }
        i22 = (int)Test.instanceCount;
        for (i24 = 1; i24 < 243; i24++) {
            switch (((i24 >>> 1) % 9) + 18) {
            case 18:
                switch (((i24 % 3) * 5) + 67) {
                case 79:
                    switch ((i24 % 2) + 11) {
                    case 11:
                        Test.instanceCount += (i24 | i21);
                        for (i26 = 4; i26 < 104; ++i26) {
                            i22 -= 76;
                        }
                        for (i28 = 1; i28 < 104; i28++) {
                            for (i30 = i24; i30 < 2; i30++) {
                                f3 += i29;
                                f3 += (i30 - i30);
                                Test.iArrFld1[i24][i30 + 1] = i25;
                                switch (((i28 % 7) * 5) + 114) {
                                case 137:
                                case 129:
                                    Test.iArrFld1[i28][i28] ^= i21;
                                    i29 = (int)Test.instanceCount;
                                    f3 += (i30 * i29);
                                case 143:
                                    i29 = i27;
                                    Test.instanceCount = i29;
                                    i29 <<= (int)Test.instanceCount;
                                    i31 += i30;
                                case 139:
                                    switch (((i24 % 5) * 5) + 37) {
                                    case 59:
                                        if (b3) continue;
                                        d3 = i24;
                                        i21 += i30;
                                        break;
                                    case 62:
                                        i27 = (int)Test.instanceCount;
                                        break;
                                    case 60:
                                        i25 = (int)l1;
                                    case 57:
                                        l1 -= i28;
                                        break;
                                    case 51:
                                        if (b3) continue;
                                    default:
                                        Test.iArrFld1[i30][i28] += (int)-2374666152L;
                                    }
                                    break;
                                case 126:
                                    i21 = i28;
                                    break;
                                case 144:
                                    i22 += i28;
                                    break;
                                case 148:
                                    Test.instanceCount += l1;
                                    break;
                                default:
                                    if (b3) break;
                                }
                            }
                        }
                        break;
                    case 12:
                        f3 *= i28;
                    default:
                        i31 += (i24 ^ i21);
                    }
                    break;
                case 74:
                    lArr3[i24 - 1] += (long)f3;
                    break;
                case 69:
                    dArr1[i24] += -223;
                    break;
                }
            case 19:
                iArrFld[i24] &= i31;
            case 20:
                l1 += (((i24 * l1) + byFld) - l1);
                break;
            case 21:
                i21 /= 61145;
                break;
            case 22:
                i22 += i23;
                break;
            case 23:
                dArr1[i24 + 1] = -28.24458;
                break;
            case 24:
                i27 += i26;
                break;
            case 25:
                d3 = 5265;
                break;
            case 26:
                Test.instanceCount |= i28;
            }
        }

        FuzzerUtils.out.println("i21 d2 i22 = " + i21 + "," + Double.doubleToLongBits(d2) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("f3 b3 d3 = " + Float.floatToIntBits(f3) + "," + (b3 ? 1 : 0) + "," +
            Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("l1 lArr3 dArr1 = " + l1 + "," + FuzzerUtils.checkSum(lArr3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount byFld iArrFld = " + Test.instanceCount + "," + byFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
