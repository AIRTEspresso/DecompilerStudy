import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:29:00 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=79L;
    public int iFld=-3;
    public static float fFld=-1.311F;
    public static boolean bFld=true;
    public static double dFld=0.98551;
    public byte byFld=93;
    public int iFld1=-6207;
    public static float fFld1=17.148F;
    public int iArrFld[][]=new int[N][N];

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i6) {

        int i7=-4, i8=17884, i9=-14876, i10=2730, i11=0, i12=-6, i13=-9, i14=-106;
        long l2=242L, lArr[]=new long[N];
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        init(lArr, -9L);
        init(fArr, 3.569F);
        init(dArr, -100.96964);

        i7 = 1;
        do {
            lArr = long1array(N, (long)6L);
            for (l2 = 1; l2 < 8; ++l2) {
                Test.instanceCount = i7;
            }
            for (i9 = 1; i9 < 8; i9++) {
                i10 <<= (int)Test.instanceCount;
            }
            switch (((i7 % 3) * 5) + 90) {
            case 101:
                i10 ^= (int)Test.instanceCount;
                Test.instanceCount -= i8;
                for (i11 = i7; i11 < 8; i11++) {
                    for (i13 = 1; i13 < 1; i13++) {
                        byte by1=-27;
                        Test.dFld += Test.dFld;
                        i10 = i10;
                        fArr[i7] -= l1;
                        by1 += (byte)(45 + (i13 * i13));
                    }
                }
                break;
            case 105:
                i12 += (((i7 * l2) + l2) - i14);
            case 94:
                dArr = dArr;
                break;
            }
        } while (++i7 < 194);
        vMeth_check_sum += l1 + i6 + i7 + l2 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + checkSum(lArr) +
            Double.doubleToLongBits(checkSum(fArr)) + Double.doubleToLongBits(checkSum(dArr));
    }

    public static int iMeth(int i2, int i3, int i4) {

        int i5=-3, i15=-79, i16=108, i17=33566, i18=40034, i19=2, i20=-55934;
        byte by2=99;
        double dArr1[][]=new double[N][N];

        init(dArr1, -2.31288);

        i5 = 1;
        do {
            Test.instanceCount *= (++i2);
        } while (++i5 < 265);
        vMeth(Test.instanceCount, -11);
        for (i15 = 3; i15 < 126; i15++) {
            for (i17 = 13; i15 < i17; --i17) {
                i18 *= i2;
                Test.instanceCount = i17;
                i4 %= (int)(i17 | 1);
                for (i19 = i15; 1 > i19; ++i19) {
                    Test.instanceCount += Test.instanceCount;
                    dArr1[i15 + 1] = double1array(N, (double)72.82947);
                    i3 = i2;
                    i18 = by2;
                }
                Test.instanceCount *= i17;
                i16 >>= 135;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i15 + i16 + i17 + i18 + i19 + i20 + by2 +
            Double.doubleToLongBits(checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(long l, int i, int i1) {

        byte by=92;
        float f=0.163F, f1=-117.318F;
        int i21=86, i22=11, i23=21913, i24=12, iArr[]=new int[N];
        long lArr1[]=new long[N];
        short sArr[]=new short[N];

        init(iArr, -58175);
        init(lArr1, -5950751739634349034L);
        init(sArr, (short)17374);

        by += (byte)Math.max((int)((i << l) - iArr[(94 >>> 1) % N]), (int)((-168L - (Test.fFld - i1)) * (Test.fFld +=
            i1)));
        f = 1;
        do {
            i1 >>>= (int)((Short.reverseBytes((short)(-12927)) + (i - Test.instanceCount)) - ((++Test.instanceCount) -
                (Test.fFld++)));
            iArr = (iArr = (iArr = iArr));
        } while (++f < 183);
        Test.bFld = (i < iMeth(-4, 23834, i1));
        switch ((((i1 >>> 1) % 5) * 5) + 83) {
        case 89:
            for (i21 = 13; i21 < 268; i21++) {
                i22 &= i1;
                try {
                    i22 = (i22 / i21);
                    i1 = (-231 % i1);
                    i22 = (i % -65249);
                } catch (ArithmeticException a_e) {}
                Test.fFld = i;
                l = i;
                f1 = 1;
                while (++f1 < 6) {
                    for (i23 = 1; 1 > i23; i23++) {
                        i24 = (int)f1;
                        Test.instanceCount *= i24;
                    }
                }
            }
            break;
        case 107:
            lArr1[(i1 >>> 1) % N] = (long)f1;
            break;
        case 85:
            iArr[(i1 >>> 1) % N] = i21;
            break;
        case 95:
        case 103:
            i -= 3;
            break;
        default:
            sArr = sArr;
        }
        long meth_res = l + i + i1 + by + Float.floatToIntBits(f) + i21 + i22 + Float.floatToIntBits(f1) + i23 + i24 +
            checkSum(iArr) + checkSum(lArr1) + checkSum(sArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        short s=628;
        int i25=1, i26=17, i27=-6, i28=8, i29=19569, i30=-6, i31=-13, i32=-36174, i33=-26243;
        long lArr2[]=new long[N];

        init(lArr2, -1348721604L);

        try {
            iFld &= (-((s += (short)iFld) - Short.reverseBytes(s)));
            bMeth(Test.instanceCount, -39869, 6);
            iFld = iFld;
            byFld %= (byte)((long)(Test.dFld) | 1);
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            for (i25 = 9; i25 < 265; i25++) {
                Test.instanceCount <<= i25;
                if (Test.bFld) {
                    for (i27 = 2; i27 < 98; ++i27) {
                        iFld -= i26;
                    }
                    if (false) break;
                } else {
                    for (i29 = 2; 98 > i29; ++i29) {
                        Test.fFld *= i27;
                        for (i31 = 1; i31 < 2; ++i31) {
                            i28 = i25;
                            Test.bFld = Test.bFld;
                            iArrFld[i29 - 1][i31] = i25;
                            i28 >>= -44981;
                            switch (((i29 % 5) * 5) + 32) {
                            case 56:
                                Test.instanceCount -= i31;
                                break;
                            case 36:
                                switch (((i31 % 9) * 5) + 56) {
                                case 69:
                                    iFld += (-53180 + (i31 * i31));
                                    i30 -= i27;
                                    lArr2[i31 + 1] = i25;
                                    Test.instanceCount += (-185 + (i31 * i31));
                                case 75:
                                case 93:
                                    i28 = -28;
                                    iFld += iFld;
                                    Test.instanceCount += (long)(93.434F + (i31 * i31));
                                    iArrFld[i31 + 1][i31] -= (int)200117136828677555L;
                                    break;
                                case 72:
                                    iFld += (((i31 * byFld) + i26) - Test.instanceCount);
                                case 84:
                                    try {
                                        i32 = (iFld1 / iFld);
                                        i28 = (iArrFld[i31 + 1][i25] % -5603);
                                        i33 = (i30 / i30);
                                    } catch (ArithmeticException a_e) {}
                                case 98:
                                    i32 = i28;
                                case 85:
                                case 95:
                                    if (Test.bFld) continue;
                                    break;
                                case 82:
                                    Test.fFld1 = iFld1;
                                default:
                                    iFld1 >>= i32;
                                }
                                break;
                            case 42:
                                i32 <<= (int)Test.instanceCount;
                                break;
                            case 49:
                                i26 += (int)(0.800F + (i31 * i31));
                                break;
                            case 38:
                            }
                        }
                    }
                }
            }
        }

        System.out.println("s i25 i26 = " + s + "," + i25 + "," + i26);
        System.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        System.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        System.out.println("i33 lArr2 = " + i33 + "," + checkSum(lArr2));

        System.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        System.out.println("Test.bFld Test.dFld byFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + byFld);
        System.out.println("iFld1 Test.fFld1 iArrFld = " + iFld1 + "," + Float.floatToIntBits(Test.fFld1) + "," +
            checkSum(iArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
