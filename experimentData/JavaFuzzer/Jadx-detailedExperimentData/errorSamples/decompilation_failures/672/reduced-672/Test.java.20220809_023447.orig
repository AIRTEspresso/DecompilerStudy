import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:58:14 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6583368440205385030L;
    public static long lFld=-211L;
    public static volatile float fFld=-6.953F;
    public static float fFld1=1.240F;
    public static float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        init(Test.fArrFld, 0.873F);
        init(Test.sArrFld, (short)32457);
        init(Test.dArrFld, 124.127783);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i6=-199, i7=-12, i8=-29, i9=231, i10=-5, i11=-189, i12=33739, iArr2[]=new int[N];
        double d1=-2.103390, dArr[]=new double[N];
        short s=-20717;
        byte by=112;
        float f=0.938F;
        long lArr[]=new long[N], lArr1[]=new long[N];

        init(lArr, -3L);
        init(lArr1, 157226804L);
        init(iArr2, -10);
        init(dArr, 66.125295);

        i6 = (int)d1;
        s += (short)i6;
        switch (((i6 >>> 1) % 10) + 87) {
        case 87:
            for (i7 = 9; i7 < 282; ++i7) {
                for (i9 = i7; i9 < 6; i9++) {
                    by *= by;
                    for (i11 = i9; i11 < 1; ++i11) {
                        lArr[i7] += Test.instanceCount;
                        Test.instanceCount /= 180L;
                        i6 = i12;
                        i6 >>= (int)Test.instanceCount;
                        i10 = i8;
                        lArr1[i9 - 1] -= Test.instanceCount;
                        i12 = (int)Test.instanceCount;
                        lArr1[i11 - 1] >>>= i7;
                    }
                }
            }
            break;
        case 88:
            i12 = (int)Test.lFld;
            break;
        case 89:
            iArr2[(-24880 >>> 1) % N] *= (int)Test.instanceCount;
            break;
        case 90:
            iArr2[(i11 >>> 1) % N] = by;
        case 91:
            f += -2471888048L;
            break;
        case 92:
            i12 -= i7;
            break;
        case 93:
            Test.lFld = Test.lFld;
            break;
        case 94:
            Test.lFld = i12;
            break;
        case 95:
            dArr[(i12 >>> 1) % N] = 25.503F;
            break;
        case 96:
            i6 *= i12;
            break;
        default:
            Test.fArrFld[(i7 >>> 1) % N] -= i11;
        }
        vMeth_check_sum += i6 + Double.doubleToLongBits(d1) + s + i7 + i8 + i9 + i10 + by + i11 + i12 +
            Float.floatToIntBits(f) + checkSum(lArr) + checkSum(lArr1) +
            checkSum(iArr2) + Double.doubleToLongBits(checkSum(dArr));
    }

    public static int iMeth1(int i3, long l1, int i4) {

        int i5=-50711, i13=79, i14=-14335, iArr1[][][]=new int[N][N][N];
        double d=-2.109919;
        byte by1=50;
        long l2=-1847916536525504969L;

        init(iArr1, 167);

        i5 = 1;
        do {
            d = Math.max(i4++, iArr1[i5][i5][i5 + 1] * (i4++));
            switch (((i5 % 5) * 5) + 66) {
            case 75:
                vMeth();
                i4 = i4;
                Test.fFld = i5;
                break;
            case 77:
                by1 >>= (byte)i4;
                for (i13 = 1; i13 < 7; ++i13) {
                    i4 += -133;
                    i3 += (i13 * i4);
                    switch (((i13 % 6) * 5) + 24) {
                    case 27:
                        d -= i13;
                        i14 = i3;
                        if (false) continue;
                        i4 += (((i13 * i14) + by1) - i14);
                        break;
                    case 38:
                        Test.instanceCount += (i13 - i3);
                        break;
                    case 41:
                        i14 = (int)Test.fFld;
                        break;
                    case 26:
                        i4 += i5;
                    case 51:
                        i3 *= i13;
                        break;
                    case 45:
                        by1 |= (byte)l2;
                    }
                }
            case 67:
                Test.sArrFld = short1array(N, (short)11119);
                break;
            case 88:
                Test.dArrFld[i5 - 1][i5 + 1] -= i14;
                break;
            case 71:
                i14 = (int)l2;
                break;
            }
        } while (++i5 < 215);
        long meth_res = i3 + l1 + i4 + i5 + Double.doubleToLongBits(d) + by1 + i13 + i14 + l2 +
            checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l) {

        int i2=-11946, i15=-34618, i16=-43802, i17=-5392, i18=80, iArr[]=new int[N];
        double d2=-122.92781;
        byte by2=100;

        init(iArr, 107);

        iArr[(i2 >>> 1) % N] &= iMeth1(i2, Test.lFld, 221);
        Test.lFld += (long)d2;
        i2 += (int)l;
        for (i15 = 7; i15 < 164; ++i15) {
            short s1=-29950;
            Test.lFld += (i15 | s1);
            switch (((i15 % 2) * 5) + 103) {
            case 112:
                switch ((((i16 >>> 1) % 1) * 5) + 126) {
                case 128:
                    by2 -= (byte)Test.lFld;
                    i16 &= i2;
                    if (false) continue;
                    i16 += i2;
                    break;
                }
                i2 += i15;
                for (i17 = 1; i17 < 10; i17++) {
                    i2 >>= i18;
                    i2 += i18;
                }
                break;
            case 106:
                i16 = i2;
            }
        }
        long meth_res = l + i2 + Double.doubleToLongBits(d2) + i15 + i16 + by2 + i17 + i18 + checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-248, i1=-51413, i19=54, i20=60, i21=-7, i22=147, i23=12, i24=-22708, i25=4, iArr3[]=new int[N];
        byte by4=-98, byArr[][]=new byte[N][N];
        double d3=2.127295;
        short s2=7029;
        float fArr[][]=new float[N][N];

        init(byArr, (byte)-104);
        init(iArr3, -57864);
        init(fArr, 2.678F);

        for (i = 2; 373 > i; i += 3) {
            byArr[i][i - 1] -= (byte)iMeth(Test.lFld);
            i1 += (i ^ Test.lFld);
        }
        iArr3[(i >>> 1) % N] = i1;
        for (i19 = 3; i19 < 278; ++i19) {
            Test.dArrFld[i19 + 1][i19 + 1] += i20;
            for (i21 = 91; i21 > 3; i21--) {
                i1 -= (int)Test.fFld;
                Test.fFld1 += i19;
                i1 = i;
                switch ((i19 % 4) + 25) {
                case 25:
                    Test.lFld <<= i20;
                    fArr = fArr;
                    Test.instanceCount += (i21 * i21);
                    i23 = 1;
                    while (++i23 < 2) {
                        byte by3=-81;
                        i20 *= (int)29.91976;
                        by3 = (byte)23869;
                        i20 = i21;
                        i20 >>= i22;
                        i20 += (((i23 * Test.fFld1) + by3) - i1);
                        Test.instanceCount += 64;
                    }
                    break;
                case 26:
                    i22 *= by4;
                    Test.instanceCount += -3074L;
                    i22 = i20;
                    for (i24 = 1; i24 < 2; i24++) {
                        switch ((i19 % 1) + 84) {
                        case 84:
                            Test.fFld *= Test.fFld;
                            by4 += (byte)(i24 * i24);
                            try {
                                i25 = (i19 / i25);
                                i22 = (i21 % iArr3[i19 + 1]);
                                i20 = (i / i22);
                            } catch (ArithmeticException a_e) {}
                            i22 = i23;
                            break;
                        default:
                            i1 += (-121 + (i24 * i24));
                        }
                    }
                case 27:
                    d3 *= -177;
                    break;
                case 28:
                    s2 += (short)(((i21 * Test.lFld) + i19) - i1);
                    break;
                default:
                    i25 += (int)-44.300F;
                }
            }
        }

        System.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        System.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        System.out.println("i23 by4 i24 = " + i23 + "," + by4 + "," + i24);
        System.out.println("i25 d3 s2 = " + i25 + "," + Double.doubleToLongBits(d3) + "," + s2);
        System.out.println("byArr iArr3 fArr = " + checkSum(byArr) + "," + checkSum(iArr3)
            + "," + Double.doubleToLongBits(checkSum(fArr)));

        System.out.println("Test.instanceCount Test.lFld Test.fFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Float.floatToIntBits(Test.fFld));
        System.out.println("Test.fFld1 Test.fArrFld Test.sArrFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            Double.doubleToLongBits(checkSum(Test.fArrFld)) + "," + checkSum(Test.sArrFld));
        System.out.println("Test.dArrFld = " + Double.doubleToLongBits(checkSum(Test.dArrFld)));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
