import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:33:16 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static volatile byte byFld=-72;
    public static float fFld=0.890F;
    public static volatile int iFld=98;
    public volatile int iFld1=64985;
    public static float fArrFld[][]=new float[N][N];
    public int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        init(Test.fArrFld, 65.468F);
        init(Test.dArrFld, -46.37529);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {

        int i4=6, i5=-6, i6=-13, i7=-33451, i8=2;
        long l1=-40391L, lArr[]=new long[N];
        boolean b=true, bArr[]=new boolean[N];
        short s1=-32498;
        double d=0.63859;

        init(bArr, true);
        init(lArr, -7L);

        for (i4 = 4; i4 < 312; i4++) {
            Test.fFld += (((i4 * Test.byFld) + i3) - Test.instanceCount);
            i5 += (i4 ^ i6);
            l1 = 1;
            do {
                bArr[i4 + 1] = b;
                s1 -= (short)d;
                for (i7 = (int)(l1); i7 < 1; i7 += 2) {
                    i5 &= i7;
                    d *= i7;
                    i8 += (i7 | Test.instanceCount);
                    lArr = lArr;
                    Test.fFld = -217;
                    i6 <<= 6;
                    i6 <<= i5;
                }
                i3 *= (int)-595295054124772566L;
            } while (++l1 < 5);
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + l1 + (b ? 1 : 0) + s1 + Double.doubleToLongBits(d) + i7 + i8 +
            checkSum(bArr) + checkSum(lArr);
    }

    public static void vMeth(int i) {

        int i1=179, i2=10396, i9=-28928, i10=41455, i11=47385;
        short s=11447;
        double d1=-64.1845;

        i += (i * (--i));
        for (i1 = 11; i1 < 277; i1 += 2) {
            s = Short.reverseBytes((short)((Test.byFld++) >>> (Test.instanceCount - i)));
            i2 >>= i1;
            vMeth1(-192);
            for (i9 = i1; i9 < 12; i9++) {
                Test.instanceCount %= (i9 | 1);
                for (d1 = 1; d1 < 1; ++d1) {
                    i2 = (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + s + i9 + i10 + Double.doubleToLongBits(d1) + i11;
    }

    public static void vSmallMeth(long l) {


        vMeth(Test.iFld);
        Test.iFld <<= Test.iFld;
        vSmallMeth_check_sum += l;
    }

    public void mainTest(String[] strArr1) {

        int i12=26453, i13=5, i14=-9, i15=-34446, i16=5, i17=-43289, i18=-11, i19=-232, i20=5, i21=-238, i22=141,
            i23=6, i24=-34, i25=4;
        boolean b1=true;
        long l2=-113L, lArr1[]=new long[N];
        short s2=30430;

        init(lArr1, 5566697705650767690L);

        for (int smallinvoc=0; smallinvoc<868; smallinvoc++) vSmallMeth(Test.instanceCount);
        i12 -= (int)Test.instanceCount;
        Test.fArrFld[(i12 >>> 1) % N][(i12 >>> 1) % N] = Test.iFld;
        for (i13 = 4; i13 < 142; i13++) {
            try {
                i14 = (iArrFld[i13 - 1] % 1307249648);
                i12 = (i13 % -27689227);
                iArrFld[i13 + 1] = (iArrFld[i13 + 1] / i14);
            } catch (ArithmeticException a_e) {}
            if (b1) {
                Test.fFld -= Test.instanceCount;
                if (b1) break;
            } else {
                for (l2 = i13; l2 < 182; l2++) {
                    iArrFld[i13] |= (int)l2;
                    iFld1 *= i14;
                }
            }
        }
        if (b1) {
            iArrFld[(iFld1 >>> 1) % N] = (int)-48399L;
        } else {
            for (i16 = 4; i16 < 125; i16++) {
                for (i18 = i16; i18 < 207; ++i18) {
                    try {
                        iArrFld[i18 - 1] = (i15 / 94);
                        i17 = (21928 % iArrFld[(i17 >>> 1) % N]);
                        i19 = (i16 % i13);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount -= i15;
                }
                Test.iFld += i16;
                for (i20 = 8; i20 < 207; ++i20) {
                    Test.dArrFld[i20] *= 7L;
                    Test.fFld = Test.instanceCount;
                }
                Test.instanceCount += i16;
                Test.fFld += -86;
                Test.fFld *= i16;
                Test.fFld -= 121L;
                Test.iFld = (int)Test.fFld;
            }
            for (i22 = 8; i22 < 132; i22++) {
                for (i24 = 2; i24 < 202; i24++) {
                    lArr1[i24] <<= -130;
                    s2 = (short)Test.instanceCount;
                }
            }
        }

        System.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        System.out.println("b1 l2 i15 = " + (b1 ? 1 : 0) + "," + l2 + "," + i15);
        System.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        System.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        System.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        System.out.println("i25 s2 lArr1 = " + i25 + "," + s2 + "," + checkSum(lArr1));

        System.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        System.out.println("Test.iFld iFld1 Test.fArrFld = " + Test.iFld + "," + iFld1 + "," +
            Double.doubleToLongBits(checkSum(Test.fArrFld)));
        System.out.println("iArrFld Test.dArrFld = " + checkSum(iArrFld) + "," +
            Double.doubleToLongBits(checkSum(Test.dArrFld)));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
