import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:06:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8933235804963499611L;
    public static boolean bFld=false;
    public int iFld=-43857;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        init(Test.iArrFld, 93);
        init(Test.dArrFld, -106.100693);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth(int i, int i1, int i2) {

        float fArr[]=new float[N];

        init(fArr, 60.671F);

        fArr[(i1 >>> 1) % N] = -6;
        vSmallMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(checkSum(fArr));
    }

    public static void vMeth1(double d, float f1, int i9) {

        int i10=167, i11=-44421, i12=-28074, i13=-11, i14=-234, i15=244, i16=-213, iArr[]=new int[N];
        long l3=6838349389279639813L, lArr[]=new long[N];

        init(iArr, -14);
        init(lArr, 95L);

        iArr[(-3 >>> 1) % N] = i9;
        for (i10 = 4; i10 < 326; i10++) {
            Test.instanceCount = i9;
            Test.instanceCount += Test.instanceCount;
        }
        lArr[(i10 >>> 1) % N] &= 10;
        for (i12 = 156; i12 > 6; i12--) {
            iArr[i12 + 1] = (int)Test.instanceCount;
            i11 = (int)Test.instanceCount;
            f1 -= i10;
            for (l3 = 11; l3 > 1; l3 -= 2) {
                Test.instanceCount += (l3 - l3);
                i13 -= -166;
            }
        }
        for (i15 = 2; i15 < 201; ++i15) {
            i11 += i15;
            i16 += (i15 * i15);
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + l3 +
            i14 + i15 + i16 + checkSum(iArr) + checkSum(lArr);
    }

    public static short sMeth(long l, long l1, int i8) {

        double d1=108.69093;
        float f2=-34.420F;
        int i17=-18284, i18=12, i19=-38321, i20=112, i21=-46295, i22=10397, i23=-11, i24=-41008, i25=1899, iArr1[]=new
            int[N], iArr2[][][]=new int[N][N][N];
        long lArr1[]=new long[N];

        init(lArr1, 3188266214L);
        init(iArr1, 204);
        init(iArr2, -62320);

        vMeth1(d1, f2, -35740);
        i17 = 128;
        do {
            lArr1[i17] = i8;
            for (i18 = 12; i18 > i17; i18--) {
                f2 -= i19;
                f2 = (float)d1;
                for (i20 = 1; i20 > 1; i20--) {
                    l1 -= (long)d1;
                    Test.instanceCount += (((i20 * f2) + i21) - i17);
                    f2 += (((i20 * i8) + i21) - i8);
                }
            }
            iArr1[i17] = i21;
        } while (--i17 > 0);
        for (i22 = 6; 272 > i22; ++i22) {
            for (i24 = 1; 6 > i24; ++i24) {
                iArr2 = iArr2;
                f2 = 8;
            }
        }
        long meth_res = l + l1 + i8 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 +
            i21 + i22 + i23 + i24 + i25 + checkSum(lArr1) + checkSum(iArr1) +
            checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(boolean b, int i4, int i5) {

        int i6=151, i7=239, i26=11, i27=-32, i28=16, i29=-201;
        float f3=0.673F;

        for (i6 = 10; 265 > i6; ++i6) {
            vSmallMeth(i6, (int)((i5++) % ((sMeth(Test.instanceCount, Test.instanceCount, i6) + Test.instanceCount) |
                1)), 206);
            if (b) {
                Test.instanceCount = i6;
                Test.iArrFld[i6 + 1] -= i7;
                i5 += i6;
                i7 += (((i6 * Test.instanceCount) + i4) - Test.instanceCount);
            }
            for (i26 = 1; i26 < 6; i26++) {
                f3 -= Test.instanceCount;
                i27 *= i7;
                Test.dArrFld[i26] += i5;
                for (i28 = 1; i28 < 2; ++i28) {
                    if (i4 != 0) {
                        vMeth_check_sum += (b ? 1 : 0) + i4 + i5 + i6 + i7 + i26 + i27 + Float.floatToIntBits(f3) + i28
                            + i29;
                        return;
                    }
                    i4 *= (int)Test.instanceCount;
                    i4 -= 49;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i4 + i5 + i6 + i7 + i26 + i27 + Float.floatToIntBits(f3) + i28 + i29;
    }

    public void mainTest(String[] strArr1) {

        int i3=960, i30=0, i31=-9, i32=-13, i33=-16687, i34=161, i35=-235, iArr3[][]=new int[N][N];
        float f=1.797F;
        double d2=-72.86975;
        long lArr2[]=new long[N];

        init(iArr3, 0);
        init(lArr2, -7L);

        for (int smallinvoc=0; smallinvoc<204; smallinvoc++) vSmallMeth(i3++, --i3, i3);
        i3 *= (int)(--f);
        vMeth(Test.bFld, i3, i3);
        i3 ^= i3;
        for (i30 = 1; i30 < 192; i30++) {
            switch (((i30 % 2) * 5) + 121) {
            case 126:
                for (i32 = 131; i32 > i30; --i32) {
                    for (i34 = 1; i34 < 1; i34++) {
                        Test.instanceCount += (i34 | i34);
                        Test.iArrFld[i34 - 1] *= (int)Test.instanceCount;
                        switch ((i30 % 1) + 21) {
                        case 21:
                            i3 = i3;
                            Test.iArrFld[i30 - 1] >>>= -13;
                            Test.instanceCount |= i31;
                            Test.instanceCount = i30;
                            break;
                        }
                        iArr3 = iArr3;
                        i35 = i35;
                        switch (((i34 % 10) * 5) + 91) {
                        case 116:
                            i31 >>>= (int)Test.instanceCount;
                            i33 = (int)Test.instanceCount;
                            if (Test.bFld) {
                                i35 = (int)Test.instanceCount;
                            } else {
                                i35 += (i34 * i34);
                                f -= i32;
                            }
                            break;
                        case 122:
                            i31 &= i32;
                        case 110:
                            i35 = i31;
                            i3 += (i34 * i34);
                            break;
                        case 118:
                            i31 += i34;
                            lArr2[i30 - 1] >>= i32;
                            i3 = (int)Test.instanceCount;
                        case 115:
                            lArr2 = lArr2;
                            break;
                        case 96:
                            iFld += (i34 | i33);
                            break;
                        case 129:
                            i35 += (i34 | i30);
                            break;
                        case 126:
                            try {
                                iFld = (iArr3[i34 - 1][i32] / i30);
                                i33 = (iFld / i3);
                                iArr3[i32][i30 + 1] = (-679811288 % iFld);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 109:
                            i33 += (int)d2;
                            break;
                        case 134:
                            Test.bFld = Test.bFld;
                            break;
                        }
                    }
                }
                break;
            case 131:
                i3 -= (int)d2;
                break;
            }
        }

        System.out.println("i3 f i30 = " + i3 + "," + Float.floatToIntBits(f) + "," + i30);
        System.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        System.out.println("i34 i35 d2 = " + i34 + "," + i35 + "," + Double.doubleToLongBits(d2));
        System.out.println("iArr3 lArr2 = " + checkSum(iArr3) + "," + checkSum(lArr2));

        System.out.println("Test.instanceCount Test.bFld iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + iFld);
        System.out.println("Test.iArrFld Test.dArrFld = " + checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(checkSum(Test.dArrFld)));

        System.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("sMeth_check_sum: " + sMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
