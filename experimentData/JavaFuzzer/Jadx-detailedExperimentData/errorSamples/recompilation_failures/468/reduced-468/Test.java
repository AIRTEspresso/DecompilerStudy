import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 00:22:33 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-157L;
    public float fFld=1.809F;
    public static int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld1[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        init(Test.iArrFld, 20852);
        init(Test.lArrFld, -1877516366L);
        init(Test.iArrFld1, 242);
        init(Test.fArrFld, -119.534F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i11) {

        int i12=-4689, i13=5104, i14=-50981, i15=-39770, i16=-83, i17=-63;
        double d2=0.40652;
        float f=-82.330F, fArr[]=new float[N];
        byte by=-94;
        boolean b=false;
        short s=-1330;

        init(fArr, -3.339F);

        i12 -= (int)Test.instanceCount;
        for (i13 = 10; i13 < 168; i13++) {
            i12 *= -191;
            switch ((i13 * 5) + 20) {
            case 331:
                i15 = 10;
                do {
                    i11 += -13798;
                    Test.instanceCount += i15;
                    for (i16 = 1; i16 < 1; i16++) {
                        Test.instanceCount += (i16 + Test.instanceCount);
                    }
                    i11 >>>= i17;
                    d2 += -41243;
                } while (--i15 > 0);
                f += (i13 * i17);
                i12 = (int)Test.instanceCount;
                Test.instanceCount = i13;
                break;
            case 348:
            case 357:
                i12 += i17;
                break;
            case 315:
                i17 += (((i13 * Test.instanceCount) + f) - Test.instanceCount);
                break;
            case 115:
                by = (byte)Test.instanceCount;
            case 138:
                i11 *= i15;
            case 44:
                f = -1L;
                break;
            case 191:
                try {
                    i14 = (Test.iArrFld[i13 + 1] % i16);
                    i12 = (1861907854 % i17);
                    i11 = (Test.iArrFld[i13 - 1] % i17);
                } catch (ArithmeticException a_e) {}
                break;
            case 123:
                if (b) continue;
                break;
            case 169:
                Test.instanceCount += 17547;
                break;
            case 358:
                Test.instanceCount = 2237;
            case 349:
                fArr[i13] += Test.instanceCount;
            case 88:
                i14 = 9;
                break;
            case 339:
                i12 >>= i14;
                break;
            case 312:
                b = b;
                break;
            case 175:
                i12 += i14;
                break;
            case 369:
                d2 -= i15;
                break;
            case 82:
                i12 += (i13 * i15);
                break;
            case 248:
                i12 = (int)Test.instanceCount;
                break;
            case 333:
                Test.instanceCount += i13;
            case 256:
                Test.instanceCount += (i13 - i11);
                break;
            case 151:
                i11 = -148;
                break;
            case 57:
                i17 = s;
                break;
            case 153:
                if (i11 != 0) {
                }
            case 117:
                i17 = s;
            case 200:
                d2 -= i17;
                break;
            case 95:
                Test.lArrFld[i13] = Test.instanceCount;
            case 328:
                s = (short)i14;
                break;
            case 208:
                i14 -= -171;
            case 26:
                i14 -= i17;
            case 120:
                i14 |= i15;
                break;
            case 78:
                i11 += i15;
            case 156:
                Test.instanceCount -= i12;
                break;
            case 268:
                f += (i13 + i15);
                break;
            case 23:
                Test.instanceCount = i15;
                break;
            case 197:
                i14 = i17;
                break;
            case 289:
                Test.iArrFld[i13] = (int)45648L;
                break;
            case 274:
                i17 <<= i16;
                break;
            case 69:
                i12 = (int)194L;
                break;
            case 71:
                b = b;
                break;
            case 319:
                i11 -= (int)Test.instanceCount;
            case 335:
                i14 += (int)f;
            case 326:
                d2 = s;
                break;
            case 262:
                i17 <<= i17;
            case 43:
            case 298:
                Test.iArrFld[i13] &= i11;
            case 347:
                i11 = i16;
                break;
            case 33:
            case 98:
                i17 += i11;
                break;
            case 302:
                f = Test.instanceCount;
                break;
            case 172:
                by += (byte)-182;
                break;
            case 221:
                i11 *= (int)Test.instanceCount;
                break;
            case 140:
            case 239:
                try {
                    i12 = (i12 % i14);
                    i11 = (i14 / i12);
                    Test.iArrFld[i13 + 1] = (i14 / i11);
                } catch (ArithmeticException a_e) {}
            case 359:
                i12 += (int)d2;
                break;
            case 317:
                if (i11 != 0) {
                }
                break;
            case 251:
                i14 += i13;
            case 136:
                if (i13 != 0) {
                }
                break;
            case 276:
                try {
                    i14 = (-109 % i13);
                    i14 = (184 / Test.iArrFld[i13]);
                    Test.iArrFld[i13 + 1] = (-210 / i12);
                } catch (ArithmeticException a_e) {}
                break;
            case 362:
                f = -148;
                break;
            case 316:
                f *= i15;
                break;
            case 91:
            case 230:
                by >>= (byte)i14;
            case 187:
                Test.iArrFld[i13] = -8;
                break;
            case 296:
            case 363:
                d2 = i15;
                break;
            case 203:
                i17 = 149;
                break;
            case 234:
                i14 += (int)Test.instanceCount;
                break;
            case 198:
                Test.instanceCount = i14;
                break;
            case 202:
                Test.iArrFld1[i13 - 1] += i13;
                break;
            default:
                i11 += i12;
            }
        }
        long meth_res = i11 + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f)
            + by + (b ? 1 : 0) + s + Double.doubleToLongBits(checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i7, int i8) {

        int i9=-7, i10=-2, i21=-13, i22=-7, i23=3, iArr1[]=new int[N];
        double d3=1.122722;
        byte by1=112;
        boolean b1=false;
        float fArr1[]=new float[N];

        init(iArr1, -9);
        init(fArr1, -44.528F);

        for (i9 = 1; i9 < 139; i9++) {
            iArr1[i9] >>>= iMeth(i8);
            switch ((((i8 >>> 1) % 1) * 5) + 65) {
            case 67:
                i8 += (i9 * i9);
                d3 = 1;
                do {
                    i7 = 0;
                    i7 -= (int)1.184F;
                    Test.instanceCount = Test.instanceCount;
                    i10 = by1;
                } while (++d3 < 11);
                if (b1) {
                    for (i21 = 11; i21 > 1; i21--) {
                        i23 -= 19568;
                        Test.instanceCount += 162;
                        i22 += (i21 + i7);
                        Test.instanceCount = i7;
                    }
                } else {
                    i23 -= (int)Test.instanceCount;
                    vMeth_check_sum += i7 + i8 + i9 + i10 + Double.doubleToLongBits(d3) + by1 + i21 + i22 + i23 + (b1 ?
                        1 : 0) + checkSum(iArr1) + Double.doubleToLongBits(checkSum(fArr1));
                    return;
                }
            default:
                fArr1[i9] *= i21;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + Double.doubleToLongBits(d3) + by1 + i21 + i22 + i23 + (b1 ? 1 : 0) +
            checkSum(iArr1) + Double.doubleToLongBits(checkSum(fArr1));
    }

    public static void vSmallMeth(double d1, int i5, int i6) {


        vMeth(i6, 20157);
        vSmallMeth_check_sum += Double.doubleToLongBits(d1) + i5 + i6;
    }

    public void mainTest(String[] strArr1) {

        int i=-16904, i1=58062, i2=-175, i3=32099, i4=-28749, i24=-233, i25=16581, i26=-210, i27=-211, i28=-7,
            iArr[]=new int[N];
        double d=-18.44299;
        byte by2=-69;

        init(iArr, 236);

        for (i = 196; i > 7; i -= 3) {
            boolean b2=true;
            for (i2 = 397; i2 > 13; --i2) {
                for (d = 1; d < 2; d++) {
                    i4 += (-247 + (d * d));
                    fFld = ((long)(d + (++fFld)) >> iArr[i2 - 1]);
                    i1 += (int)d;
                }
                i1 = (int)Test.instanceCount;
            }
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(d, i, i2);
            if (b2) {
                Test.instanceCount += (((i * i3) + i2) - i4);
                for (i24 = i; 397 > i24; ++i24) {
                    i1 = 6;
                    Test.iArrFld1[i] += 46760;
                    i25 += i2;
                    try {
                        iArr[i24 + 1] = (Test.iArrFld[i24] % 196);
                        i4 = (i1 % i4);
                        i4 = (i24 / -116);
                    } catch (ArithmeticException a_e) {}
                    for (i26 = 1; i26 < 1; ++i26) {
                        Test.instanceCount = Test.instanceCount;
                        Test.fArrFld[i26 - 1] += Test.instanceCount;
                        iArr[i26] >>= i3;
                        i1 *= i26;
                        Test.instanceCount += i26;
                        i27 += (((i26 * fFld) + i1) - i4);
                        i1 -= (int)4L;
                    }
                    try {
                        i3 = (i25 / -144);
                        i4 = (i26 % i3);
                        Test.iArrFld[i24 - 1] = (-8 / i3);
                    } catch (ArithmeticException a_e) {}
                    i1 += -70;
                }
                Test.lArrFld[i] += i24;
            }
            b2 = b2;
            i28 = 1;
            do {
                i27 -= by2;
                i3 ^= i4;
            } while (++i28 < 397);
        }

        System.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        System.out.println("i3 d i4 = " + i3 + "," + Double.doubleToLongBits(d) + "," + i4);
        System.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        System.out.println("i27 i28 by2 = " + i27 + "," + i28 + "," + by2);
        System.out.println("iArr = " + checkSum(iArr));

        System.out.println("Test.instanceCount fFld Test.iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + checkSum(Test.iArrFld));
        System.out.println("Test.lArrFld Test.iArrFld1 Test.fArrFld = " + checkSum(Test.lArrFld) + ","
            + checkSum(Test.iArrFld1) + "," + Double.doubleToLongBits(checkSum(Test.fArrFld)));

        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
