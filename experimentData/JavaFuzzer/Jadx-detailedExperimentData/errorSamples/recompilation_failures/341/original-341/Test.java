// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:28:56 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4977358156190995254L;
    public static double dFld=24.84776;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, boolean b, long l1) {

        float f=105.538F;
        int i8=-224, i9=-22810, iArr1[]=new int[N];
        double d=108.128360;

        FuzzerUtils.init(iArr1, -114);

        i7 = i7;
        for (f = 7; f < 134; f++) {
            i8 = (int)f;
            i8 ^= (int)4L;
            l1 += (long)(((f * Test.instanceCount) + Test.instanceCount) - i7);
            i7 += (int)((long)f ^ Test.instanceCount);
            l1 = i8;
            b = b;
            if (b) break;
            Test.instanceCount += i8;
        }
        iArr1[(i7 >>> 1) % N] = (int)80.64304;
        i7 = i7;
        for (d = 1; 379 > d; d++) {
            i8 += i7;
            i7 &= i8;
        }
        long meth_res = i7 + (b ? 1 : 0) + l1 + Float.floatToIntBits(f) + i8 + Double.doubleToLongBits(d) + i9 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i4) {

        int i5=-3, i6=178, i10=0, iArr2[]=new int[N];
        boolean b1=false;
        byte by=19;
        short s1=-28969;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 13L);
        FuzzerUtils.init(iArr2, 10);

        i4 -= -113;
        for (i5 = 370; 5 < i5; i5 -= 3) {
            i4 = (int)(Test.instanceCount += lMeth(i4, b1, -10L));
            lArr[i5 + 1] = Test.instanceCount;
            i4 += i5;
            i6 += (int)Test.instanceCount;
            i10 = 1;
            while (++i10 < 13) {
                i6 >>= -10;
                iArr2[i5] *= i4;
            }
            Test.instanceCount += (i5 | i10);
            i4 += 194;
            by += (byte)(-2.281F + (i5 * i5));
            i6 >>= (int)Test.instanceCount;
            by = (byte)3;
        }
        Test.dFld *= s1;
        long meth_res = i4 + i5 + i6 + (b1 ? 1 : 0) + i10 + by + s1 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i3) {

        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 8);

        iArr[(i3 >>> 1) % N][(194 >>> 1) % N] ^= iMeth(i3);
        Test.instanceCount += i3;
        vSmallMeth_check_sum += i3 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-158, i1=-27, i2=-3744, i11=-147, i12=-8, i13=-54321, i14=-23129;
        long l=-173L;
        float f1=0.499F;
        boolean b2=false;

        for (i = 4; i < 133; i += 3) {
            short s=-17549;
            i1 *= s;
            for (l = i; l > 1; l--) {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(i1);
                i1 = i2;
                i1 += (int)(l * i);
                try {
                    i1 = (Test.iArrFld[(int)(l + 1)] / Test.iArrFld[(int)(l - 1)]);
                    i1 = (i1 / i1);
                    Test.iArrFld[i] = (i / Test.iArrFld[(int)(l - 1)]);
                } catch (ArithmeticException a_e) {}
                i2 = (int)f1;
                Test.instanceCount = i;
                if (b2) {
                    i2 -= (int)l;
                    i1 += -10;
                    i11 = 1;
                    do {
                        i1 += -3675;
                        i1 = (int)Test.instanceCount;
                        Test.iArrFld[i - 1] <<= -15632;
                        Test.dFld += 30.76305;
                        i1 = (int)l;
                        s += (short)f1;
                        i2 += (((i11 * i2) + i) - i1);
                    } while (++i11 < 2);
                    i12 = i1;
                } else {
                    switch (((i % 4) * 5) + 98) {
                    case 114:
                        for (i13 = 1; 2 > i13; ++i13) {
                            if (b2) break;
                            b2 = b2;
                        }
                        i2 += (int)(l * i12);
                        i14 *= i;
                        break;
                    case 102:
                        i12 += (int)(l * l);
                        Test.iArrFld[i] = (int)-3174602701573942483L;
                        break;
                    case 118:
                        f1 += i11;
                        break;
                    case 101:
                        i12 = i;
                        break;
                    default:
                        Test.iArrFld[(int)(l)] -= i1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 l = " + i + "," + i1 + "," + l);
        FuzzerUtils.out.println("i2 f1 i11 = " + i2 + "," + Float.floatToIntBits(f1) + "," + i11);
        FuzzerUtils.out.println("i12 b2 i13 = " + i12 + "," + (b2 ? 1 : 0) + "," + i13);
        FuzzerUtils.out.println("i14 = " + i14);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
