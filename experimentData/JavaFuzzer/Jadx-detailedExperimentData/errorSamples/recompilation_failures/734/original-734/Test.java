// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 02:26:25 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7636187329640604205L;
    public static int iFld=-10;
    public static volatile float fFld=82.154F;
    public static double dFld=-1.19911;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4617474070751630229L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {

        float f1=-36.734F;
        int i9=-29860, i10=-40889, i11=-33164, iArr1[]=new int[N];
        double d1=-1.129212;

        FuzzerUtils.init(iArr1, 4);

        Test.instanceCount >>= -43501;
        i7 = 10;
        Test.instanceCount >>= i8;
        i7 >>>= (int)-9L;
        i8 -= (int)f1;
        Test.iFld -= 5502;
        i9 = 1;
        do {
            Test.iFld |= Test.iFld;
            i8 += (((i9 * Test.iFld) + i7) - Test.iFld);
            Test.instanceCount += (long)d1;
            iArr1[i9 + 1] += (int)d1;
            for (i10 = i9; i10 < 6; i10++) {
                Test.instanceCount += i10;
                f1 *= -1.613F;
            }
            Test.fFld = -41745;
        } while (++i9 < 296);
        vMeth1_check_sum += i7 + i8 + Float.floatToIntBits(f1) + i9 + Double.doubleToLongBits(d1) + i10 + i11 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth() {

        int i12=-51427, i13=7, i14=53, i15=-17, i16=-104;
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 90.17663);

        vMeth1(Test.iFld, Test.iFld);
        if (b) {
            dArr[(Test.iFld >>> 1) % N] += Test.iFld;
            if (b) {
                for (i12 = 7; i12 < 144; i12++) {
                    Test.iFld -= (int)9L;
                    Test.iFld += (i12 - i12);
                    for (i14 = 1; 11 > i14; i14++) {
                        i16 = 1;
                        while (++i16 < 2) {
                            Test.iFld >>= i12;
                            Test.iFld = -5;
                            Test.instanceCount = (long)Test.fFld;
                        }
                    }
                    i13 = 177;
                    Test.instanceCount >>= i14;
                    Test.instanceCount = -1839228828L;
                }
            } else if (b) {
                Test.instanceCount += i15;
            } else {
                Test.dFld *= i13;
            }
        }
        long meth_res = i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(double d, int i1, int i2) {

        int i3=-16607, i4=-2, i5=9, i6=-21939, i17=-14, i18=4982, iArr[]=new int[N];
        short s=-13919;
        byte by=-18;

        FuzzerUtils.init(iArr, 17);

        for (i3 = 162; i3 > 2; i3 -= 3) {
            for (i5 = i3; i5 < 29; i5 += 2) {
                i2 -= ((Test.iFld--) + (iArr[i5]++));
            }
            Test.lArrFld[i3] += (long)d;
            i2 *= (int)(-((d - i6) + Long.reverseBytes(Test.instanceCount)));
            i6 += i3;
            d -= (58278 * fMeth());
            Test.dFld += i5;
            for (i17 = 29; i17 > 1; i17 -= 3) {
                s = (short)Test.instanceCount;
                Test.instanceCount %= (by | 1);
                Test.fFld = Test.fFld;
                iArr[i17 - 1] += i2;
                Test.fFld = Test.fFld;
                i6 += (int)1.57359;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + i5 + i6 + i17 + i18 + s + by +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=9, i19=-62, i20=-121, i21=26540, i22=-9, i23=-223, i24=-5, i25=-27598, i26=-22, i27=-48803;
        float f=2.677F;
        byte by1=55;
        short s1=16495;

        Test.instanceCount -= (((i + Test.instanceCount) / ((--Test.instanceCount) | 1)) - ((long)(f - 31.53F) >>> (i +
            Test.instanceCount)));
        vMeth(Test.dFld, Test.iFld, Test.iFld);
        Test.iFld <<= -57;
        Test.lArrFld[(Test.iFld >>> 1) % N] = i;
        for (i19 = 11; i19 < 254; ++i19) {
            i = i20;
            Test.instanceCount = i20;
            i20 = (int)Test.instanceCount;
            i21 = 1;
            while (++i21 < 103) {
                boolean b1=true;
                for (i22 = 1; i22 < 1; ++i22) {
                    Test.instanceCount &= Test.iFld;
                    i += -5;
                }
                if (b1) continue;
                i20 ^= i23;
                try {
                    i20 = (-122 % i19);
                    i20 = (i21 % -77);
                    Test.iFld = (-64502 % i21);
                } catch (ArithmeticException a_e) {}
                for (i24 = 1; 1 > i24; ++i24) {
                    Test.dFld = i20;
                    Test.dFld *= 0;
                    i23 <<= by1;
                    i23 = (int)Test.instanceCount;
                    i25 += (i24 ^ (long)Test.fFld);
                    Test.instanceCount = i20;
                }
                i25 = -156;
                f -= s1;
            }
            Test.iFld -= i20;
            Test.iFld += i22;
            f += (i19 + i);
            for (i26 = 4; i26 < 103; i26 += 2) {
                Test.instanceCount = 228;
                try {
                    i23 = (25 % i20);
                    Test.iFld = (i27 / i26);
                    i23 = (-38234 % i22);
                } catch (ArithmeticException a_e) {}
            }
        }

        FuzzerUtils.out.println("i f i19 = " + i + "," + Float.floatToIntBits(f) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("by1 s1 i26 = " + by1 + "," + s1 + "," + i26);
        FuzzerUtils.out.println("i27 = " + i27);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
