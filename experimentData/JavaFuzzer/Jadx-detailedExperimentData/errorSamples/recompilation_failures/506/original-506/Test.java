// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 00:40:57 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=23228L;
    public byte byFld=91;
    public static volatile int iFld=7599;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7026);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(byte by, long l) {

        int i4=-64061, iArr[]=new int[N];
        long l1=-7049337105499461961L;
        float f=0.421F;
        double d1=0.88641;

        FuzzerUtils.init(iArr, 216);

        i4 >>= (int)6657316236708007661L;
        i4 = i4;
        for (int i5 : iArr) {
            l1 = 1;
            while (++l1 < 4) {
                boolean b=false;
                if (b) break;
                Test.instanceCount = i5;
                iArr[(int)(l1)] = i4;
                Test.instanceCount *= l1;
                try {
                    iArr[(int)(l1)] = (iArr[(int)(l1 + 1)] / i4);
                    i5 = (-48490 % iArr[(int)(l1)]);
                    i5 = (4364 % iArr[(int)(l1 - 1)]);
                } catch (ArithmeticException a_e) {}
                f = (float)d1;
                f -= l1;
            }
            d1 = i4;
            l -= -60462;
            iArr[(i5 >>> 1) % N] <<= i4;
            Test.instanceCount >>>= i5;
        }
        vMeth1_check_sum += by + l + i4 + l1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i1, int i2, int i3) {

        byte by1=-79;
        long l2=-4L;
        int i6=-24444, i7=1, i8=-204, i9=-38476, iArr1[]=new int[N];
        float f1=2.430F;
        double d2=104.101451;

        FuzzerUtils.init(iArr1, 139);

        vMeth1(by1, Test.instanceCount);
        i2 = i2;
        for (l2 = 21; 348 > l2; ++l2) {
            i1 <<= (int)l2;
            for (i7 = 1; i7 < 5; i7++) {
                Test.instanceCount += i7;
                i3 += (((i7 * Test.instanceCount) + f1) - i1);
                i6 = i6;
                i9 = 1;
                do {
                    i2 *= -62;
                    Test.instanceCount = -19491;
                    by1 %= (byte)((long)(d2) | 1);
                    iArr1[i9 + 1] += i1;
                    iArr1[i9 + 1] = i2;
                    i2 = i6;
                } while (++i9 < 2);
            }
        }
        long meth_res = i1 + i2 + i3 + by1 + l2 + i6 + i7 + i8 + Float.floatToIntBits(f1) + i9 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        double d=20.45073, d3=0.117066;
        int i=-202, i10=0, i11=-24001, i12=-19797, i13=115, iArr2[]=new int[N];
        float f2=-45.487F;
        short s=31749;

        FuzzerUtils.init(iArr2, -35);

        for (d = 9; d < 177; d += 2) {
            lMeth(i, i, i);
            for (i10 = 1; i10 < 18; i10++) {
                f2 += i10;
                i12 = 1;
                while (++i12 < 2) {
                    f2 += (((i12 * s) + i11) - i11);
                    iArr2[i10 - 1] >>= (int)Test.instanceCount;
                    switch ((i10 % 10) + 103) {
                    case 103:
                        try {
                            iArr2[i10 + 1] = (iArr2[i10 + 1] / i12);
                            i11 = (i11 % 166);
                            i = (6713 % i);
                        } catch (ArithmeticException a_e) {}
                        d3 *= Test.instanceCount;
                        i11 = 204;
                        i ^= (int)Test.instanceCount;
                        break;
                    case 104:
                        byFld += (byte)(((i12 * i) + Test.iFld) - Test.instanceCount);
                        i += i12;
                    case 105:
                        i11 <<= 4;
                    case 106:
                        Test.iFld += (2 + (i12 * i12));
                    case 107:
                        d3 -= Test.instanceCount;
                        break;
                    case 108:
                        iArr2 = iArr2;
                        break;
                    case 109:
                        d3 = 10;
                    case 110:
                        Test.instanceCount -= i13;
                    case 111:
                    case 112:
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i10 + i11 + Float.floatToIntBits(f2) + i12 + s +
            Double.doubleToLongBits(d3) + i13 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        long l3=27083L, lArr[][]=new long[N][N];
        int i14=204, i15=-10, i16=-33968, i17=45859, i18=-6, i19=36753, i20=216;
        boolean b1=false;
        float f3=0.798F;
        double d4=-3.93295;

        FuzzerUtils.init(lArr, -7148775128771739964L);

        vMeth();
        for (l3 = 6; l3 < 310; ++l3) {
            Test.iArrFld[(int)(l3)] <<= -7110;
        }
        for (i15 = 125; i15 > 6; --i15) {
            Test.iArrFld[i15 + 1] = i15;
            Test.instanceCount = i16;
            if (b1) break;
            i17 = 1;
            while (++i17 < 211) {
                i16 += i17;
                Test.iArrFld[i17 + 1] -= (int)l3;
                Test.instanceCount += (i17 - i16);
                for (i18 = 1; i18 > 1; --i18) {
                    Test.instanceCount -= 10L;
                    Test.iArrFld[i18 - 1] >>= i15;
                    f3 += i19;
                    i16 = 152;
                    Test.instanceCount += i14;
                    i14 &= i15;
                    Test.iFld = (int)Test.instanceCount;
                }
                i20 = 1;
                while (++i20 < 1) {
                    d4 = -101;
                    switch (((i20 % 6) * 5) + 26) {
                    case 51:
                    case 45:
                        i19 >>= i17;
                        break;
                    case 38:
                        i19 -= i16;
                        break;
                    case 33:
                        d4 *= Test.instanceCount;
                        Test.instanceCount >>= i20;
                        if (b1) break;
                    case 27:
                        Test.iFld = i15;
                        f3 -= (float)d4;
                        lArr[i20 - 1][i17 - 1] = i18;
                        break;
                    case 30:
                        byFld += (byte)(((i20 * i16) + byFld) - i16);
                        break;
                    default:
                        i16 = i14;
                    }
                }
            }
        }

        FuzzerUtils.out.println("l3 i14 i15 = " + l3 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 b1 i17 = " + i16 + "," + (b1 ? 1 : 0) + "," + i17);
        FuzzerUtils.out.println("i18 i19 f3 = " + i18 + "," + i19 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i20 d4 lArr = " + i20 + "," + Double.doubleToLongBits(d4) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.iFld = " + Test.instanceCount + "," + byFld + "," +
            Test.iFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
