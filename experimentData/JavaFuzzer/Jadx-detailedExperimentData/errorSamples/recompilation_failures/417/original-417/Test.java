// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:52:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2701252561513436752L;
    public static double dFld=-85.58383;
    public int iFld=7;
    public short sFld=24750;
    public int iArrFld[][]=new int[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, long l) {

        int i7=-110, i8=-192, i9=0, i10=153, i11=14961, i12=4, i13=-24, iArr[][][]=new int[N][N][N], iArr1[]=new int[N];
        byte by=-100;

        FuzzerUtils.init(iArr, 38445);
        FuzzerUtils.init(iArr1, -28176);

        Test.dFld = Test.dFld;
        i7 = 230;
        while ((i7 -= 3) > 0) {
            i8 = 185;
            i8 -= i8;
            i8 -= (int)f1;
            f1 += i9;
            for (i10 = 20; i10 > 1; i10--) {
                l = 5L;
                try {
                    i9 = (-45 / i10);
                    iArr[i7][i10][i7] = (6404 % i11);
                    i11 = (32354 / iArr1[i7 + 1]);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount /= (i10 | 1);
            }
            i9 += (int)l;
            for (i12 = 1; i12 < 20; ++i12) {
                l += l;
                i8 += (int)(7.712F + (i12 * i12));
                i11 += by;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i3, float f, int i4) {

        double d=-70.16871;
        int i5=9, i6=10, i14=-60888, i15=-12, i16=-12, i17=58, i18=80, i19=62877;
        boolean b=false;
        short s=-7743;
        long lArr[]=new long[N];
        byte byArr[][][]=new byte[N][N][N];

        FuzzerUtils.init(lArr, 192L);
        FuzzerUtils.init(byArr, (byte)67);

        switch ((((--i4) >>> 1) % 1) + 7) {
        case 7:
            d *= lArr[(i3 >>> 1) % N];
            for (i5 = 4; i5 < 150; ++i5) {
                vMeth1(f, Test.instanceCount);
                for (i14 = 1; i14 < 11; i14 += 3) {
                    f -= Test.instanceCount;
                }
            }
            break;
        default:
            Test.instanceCount *= i5;
        }
        for (i16 = 7; i16 < 268; ++i16) {
            i3 += (i16 ^ i6);
            i6 += i17;
            byArr = byArr;
            for (i18 = 1; 6 > i18; i18 += 2) {
                b = b;
                s = (short)i14;
                s <<= (short)67;
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f) + i4 + Double.doubleToLongBits(d) + i5 + i6 + i14 + i15 + i16 +
            i17 + i18 + i19 + (b ? 1 : 0) + s + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vSmallMeth(int i, int i1, int i2) {


        vMeth(i, -1.191F, i1);
        vSmallMeth_check_sum += i + i1 + i2;
    }

    public void mainTest(String[] strArr1) {

        float f2=0.80F, f3=-127.316F, fArr[]=new float[N];
        int i20=-34147, i21=-1624, i22=13, i23=178, i24=-8, i25=131;
        boolean b1=true;
        double dArr[]=new double[N];
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(dArr, 1.12241);
        FuzzerUtils.init(lArr1, -229L);
        FuzzerUtils.init(fArr, -24.591F);

        for (int smallinvoc=0; smallinvoc<597; smallinvoc++) vSmallMeth(iFld, iFld, iFld);
        iFld <<= (int)Test.instanceCount;
        iFld = (int)f2;
        i20 = 1;
        while (++i20 < 125) {
            f2 += i20;
            iFld += (i20 - f2);
            iFld *= (int)f2;
            iFld >>= iFld;
        }
        for (f3 = 1; f3 < 131; f3++) {
            for (i22 = 12; i22 < 193; ++i22) {
                for (i24 = 1; i24 < 2; i24++) {
                    switch (((i24 % 10) * 5) + 91) {
                    case 103:
                        dArr[i24] += iFld;
                        if (b1) continue;
                        iArrFld[i24][i22 + 1] *= -1;
                        break;
                    case 105:
                        iFld -= i23;
                        i21 = -30168;
                        Test.instanceCount += i24;
                        f2 *= i21;
                    case 108:
                        if (b1) {
                            iFld += (i24 ^ i24);
                            Test.instanceCount = i25;
                            iArrFld[i22 + 1][(int)(f3 + 1)] >>= i21;
                            if (false) {
                                i23 = sFld;
                            } else {
                                lArr1[i24][i24 + 1] = Test.instanceCount;
                                i25 = 63609;
                            }
                        } else {
                            i21 += i20;
                            lArr1[i24] = lArr1[i24 + 1];
                            i21 >>>= i24;
                        }
                        break;
                    case 94:
                    case 122:
                        i25 = (int)-12L;
                    case 109:
                        i25 -= i21;
                        break;
                    case 134:
                        fArr[(int)(f3 + 1)] *= f2;
                        break;
                    case 93:
                    case 120:
                    case 140:
                        sFld *= (short)19560;
                    default:
                        i25 = -12;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f2 i20 f3 = " + Float.floatToIntBits(f2) + "," + i20 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 b1 = " + i24 + "," + i25 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("dArr lArr1 fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(lArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + iFld);
        FuzzerUtils.out.println("sFld iArrFld = " + sFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
