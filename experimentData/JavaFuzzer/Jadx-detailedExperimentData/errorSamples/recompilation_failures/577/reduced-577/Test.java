import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:16:46 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-986655698L;
    public static float fFld=-110.61F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];
    public float fArrFld[]=new float[N];

    static {
        init(Test.iArrFld, -6);
        init(Test.lArrFld, 4118668901L);
        init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        int i2=5, i3=52768, i4=58823, i5=38703, i6=-33;
        byte by=-67;
        float f1=1.128F;
        double d1=-2.29660;

        i2 >>= i2;
        i2 = (int)Test.instanceCount;
        by = (byte)i2;
        Test.iArrFld = Test.iArrFld;
        for (f1 = 13; f1 < 337; ++f1) {
            i2 = i3;
            for (d1 = 1; 5 > d1; ++d1) {
                i4 -= (int)Test.instanceCount;
                for (i5 = 2; i5 > d1; i5 -= 2) {
                    i6 += i5;
                    f += i6;
                }
                i2 *= i6;
                if (true) {
                    i6 += (int)d1;
                    Test.instanceCount -= (long)d1;
                } else {
                    Test.instanceCount *= (long)d1;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i2 + by + Float.floatToIntBits(f1) + i3 +
            Double.doubleToLongBits(d1) + i4 + i5 + i6;
    }

    public static void vMeth1(double d) {

        float f2=-73.296F;
        int i7=-119, i8=5, i9=132;
        double d2=119.101080, dArr[]=new double[N];
        byte by1=0;

        init(dArr, 2.70453);

        vMeth2(f2);
        i7 *= (int)-3067815193812624574L;
        Test.lArrFld = Test.lArrFld;
        d -= i7;
        i8 = 1;
        do {
            for (d2 = 7; d2 > 1; d2--) {
                d += i7;
                dArr[(int)(d2)] += -3612765705L;
                Test.iArrFld = Test.iArrFld;
                switch ((i8 % 7) + 117) {
                case 117:
                    i7 = by1;
                    d -= Test.instanceCount;
                    i9 += (int)(d2 * d2);
                case 118:
                case 119:
                    Test.lArrFld[i8 + 1] -= i8;
                    i9 = 14;
                    break;
                case 120:
                case 121:
                    i7 += (int)((long)d2 ^ Test.instanceCount);
                    break;
                case 122:
                    i7 += (int)((long)d2 | (long)f2);
                    break;
                case 123:
                    Test.instanceCount += (long)(((d2 * Test.instanceCount) + i7) - i7);
                    break;
                default:
                    Test.instanceCount += (long)((long)d2 | i9);
                }
            }
        } while (++i8 < 238);
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i7 + i8 +
            Double.doubleToLongBits(d2) + i9 + by1 + Double.doubleToLongBits(checkSum(dArr));
    }

    public static void vMeth(int i, int i1) {

        double d3=-5.73201;
        short s=-14577;
        int i10=-9, i11=-2, i12=-38, i13=32815, i14=-1;
        byte by2=94;

        vMeth1(d3);
        s += (short)i;
        if (true) {
            Test.instanceCount >>= i;
            i1 += i;
        } else {
            i = 0;
            Test.instanceCount -= i1;
        }
        for (i10 = 15; 282 > i10; ++i10) {
            for (i12 = 1; i12 < 6; ++i12) {
                i14 = 1;
                while (++i14 < 2) {
                    Test.lArrFld[i10 + 1] >>= i13;
                    i /= (int)(i11 | 1);
                    i1 += by2;
                    Test.bArrFld = Test.bArrFld;
                    i1 = -176;
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d3) + s + i10 + i11 + i12 + i13 + i14 + by2;
    }

    public void mainTest(String[] strArr1) {

        int i15=-239, i16=-16311, i17=-46140, i18=-18483, i19=7, i20=-243, i21=1, i22=44251, i23=-62, i24=-196;
        float f3=-2.493F;
        boolean b=false;
        byte byArr[]=new byte[N];

        init(byArr, (byte)50);

        vMeth(i15, i15);
        i16 = 1;
        do {
            i15 = i16;
            Test.instanceCount += (i16 - i16);
            Test.iArrFld[i16 + 1] *= 6;
            i15 += (int)Test.instanceCount;
        } while (++i16 < 261);
        f3 += 62975;
        for (i17 = 3; i17 < 323; i17++) {
            for (i19 = 3; i19 < 79; i19++) {
                for (i21 = i17; i21 < 2; ++i21) {
                    i15 += i21;
                    i15 += (56 + (i21 * i21));
                }
                Test.instanceCount = 31;
                Test.instanceCount += i19;
                i20 = (int)Test.instanceCount;
                byArr[i17 - 1] -= (byte)Test.instanceCount;
                if (b) {
                    Test.iArrFld[i19] <<= i19;
                    f3 -= -103;
                    for (i23 = 1; i23 < 2; i23++) {
                        i15 -= i17;
                        if (b) break;
                        switch (((i19 % 2) * 5) + 38) {
                        case 39:
                            fArrFld[i23 - 1] -= i24;
                            break;
                        case 46:
                            i20 += i23;
                            i24 >>= i23;
                            break;
                        default:
                            Test.fFld = Test.instanceCount;
                            b = b;
                            i20 *= (int)1.505F;
                        }
                        i22 = (int)-1L;
                    }
                }
            }
        }

        System.out.println("i15 i16 f3 = " + i15 + "," + i16 + "," + Float.floatToIntBits(f3));
        System.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        System.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        System.out.println("i23 i24 b = " + i23 + "," + i24 + "," + (b ? 1 : 0));
        System.out.println("byArr = " + checkSum(byArr));

        System.out.println("Test.instanceCount Test.fFld Test.iArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + checkSum(Test.iArrFld));
        System.out.println("Test.lArrFld Test.bArrFld fArrFld = " + checkSum(Test.lArrFld) + "," +
            checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(checkSum(fArrFld)));

        System.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
