import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 21:26:47 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13400L;
    public static short sFld=29789;
    public static int iFld=41363;
    public static volatile float fFld=-107.670F;
    public static boolean bFld=true;
    public double dFld=-1.19269;
    public static int iFld1=24598;
    public static byte byArrFld[]=new byte[N];

    static {
        init(Test.byArrFld, (byte)27);
    }

    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, boolean b1, int i4) {

        int i5=-2, i6=-45388, i7=-11, i8=-5, i9=10, i10=-188, i11=5;
        double d1=97.80612;
        float f=2.674F, f1=2.74F, fArr[]=new float[N];

        init(fArr, -1.711F);

        for (i5 = 306; i5 > 12; i5 -= 3) {
            fArr[i5] *= i3;
            for (i7 = 1; i7 < 16; i7++) {
                i3 = (int)d1;
                Test.sFld += (short)i7;
                for (i9 = i7; i9 < 2; i9++) {
                    if (b1) continue;
                    i8 |= i9;
                    Test.byArrFld[i5] >>= (byte)i6;
                    i10 += (int)f;
                    i8 += (((i9 * i8) + i5) - Test.instanceCount);
                    Test.byArrFld[i7 - 1] += (byte)Test.sFld;
                }
                for (f1 = 1; f1 < 2; ++f1) {
                    if (b1) break;
                    Test.instanceCount += (long)f;
                }
            }
        }
        vMeth_check_sum += i3 + (b1 ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 +
            Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i11 +
            Double.doubleToLongBits(checkSum(fArr));
    }

    public static float fMeth(int i2, double d) {

        int i12=-58601, i13=19738, i14=2, i15=9, i16=4, i17=6, i18=-141, iArr[]=new int[N];

        init(iArr, 33251);

        vMeth(i2, true, -12);
        for (i12 = 170; i12 > 6; --i12) {
            for (i14 = 10; i14 > 1; i14 -= 3) {
                if (i2 != 0) {
                }
                i15 = i2;
                for (i16 = 1; i16 < 4; ++i16) {
                    try {
                        i13 = (-18681 / i17);
                        i2 = (i17 / -9306);
                        i15 = (i16 % iArr[i12 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
                iArr[i14 + 1] -= i12;
                d -= Test.iFld;
                Test.fFld -= i14;
            }
            i13 = i12;
            if (Test.bFld) break;
        }
        i18 = 1;
        while (++i18 < 253) {
            Test.byArrFld[i18 - 1] -= (byte)d;
            Test.instanceCount -= i15;
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16 + i17 + i18 +
            checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(long l) {

        short s=-16580;
        int i1=-143;
        double d2=-89.46318;

        s -= (short)i1;
        Test.byArrFld[(i1 >>> 1) % N] -= (byte)fMeth(i1, d2);
        long meth_res = l + s + i1 + Double.doubleToLongBits(d2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i=54830, i19=-218, i20=231, i21=9, i22=-17949, i23=-7, i24=57, i25=-58117, i26=-188, i27=-54, iArr1[]=new
            int[N];
        long l1=-57605L, lArr[]=new long[N];
        float fArr1[]=new float[N];

        init(iArr1, 240);
        init(lArr, -49946L);
        init(fArr1, 0.824F);

        b = ((i++) <= (Math.abs(i) - lMeth(Test.instanceCount)));
        for (i19 = 1; i19 < 125; ++i19) {
            i21 = 1;
            while (++i21 < 202) {
                for (i22 = i19; i22 < 1; ++i22) {
                    i20 -= Test.sFld;
                    i20 <<= -90;
                    Test.iFld ^= 7;
                    Test.instanceCount += i19;
                    try {
                        i = (-49243 / iArr1[i19 + 1]);
                        i20 = (12 % i19);
                        Test.iFld = (i22 % i23);
                    } catch (ArithmeticException a_e) {}
                }
            }
            i24 = 1;
            while (++i24 < 202) {
                for (i25 = 1; i25 < 1; i25++) {
                    byte by=43;
                    switch ((i24 % 10) + 29) {
                    case 29:
                        Test.fFld -= i26;
                        break;
                    case 30:
                        Test.instanceCount = i20;
                        break;
                    case 31:
                        i27 += i23;
                        i26 = (int)l1;
                        dFld = Test.instanceCount;
                        break;
                    case 32:
                        i += (((i25 * Test.fFld) + i22) - Test.instanceCount);
                        i27 += i25;
                        switch (((i25 % 2) * 5) + 85) {
                        case 90:
                            l1 += i25;
                            i -= Test.iFld1;
                            break;
                        case 91:
                            lArr[i19] |= 10265L;
                            by += (byte)i26;
                            break;
                        }
                        break;
                    case 33:
                        fArr1 = fArr1;
                        break;
                    case 34:
                        Test.fFld += i27;
                        Test.iFld -= i;
                    case 35:
                        l1 = (long)Test.fFld;
                        Test.fFld += i25;
                        break;
                    case 36:
                        Test.instanceCount += (((i25 * i26) + by) - i26);
                    case 37:
                        l1 += (((i25 * i26) + l1) - i24);
                        break;
                    case 38:
                        Test.fFld += (((i25 * l1) + i23) - i20);
                    }
                }
            }
        }

        System.out.println("b i i19 = " + (b ? 1 : 0) + "," + i + "," + i19);
        System.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        System.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        System.out.println("i26 i27 l1 = " + i26 + "," + i27 + "," + l1);
        System.out.println("iArr1 lArr fArr1 = " + checkSum(iArr1) + "," + checkSum(lArr)
            + "," + Double.doubleToLongBits(checkSum(fArr1)));

        System.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        System.out.println("Test.fFld Test.bFld dFld = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(dFld));
        System.out.println("Test.iFld1 Test.byArrFld = " + Test.iFld1 + "," + checkSum(Test.byArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("fMeth_check_sum: " + fMeth_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
