import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:18:28 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9197421431258648103L;
    public static float fFld=-2.584F;
    public static int iFld=5;
    public static boolean bFld=true;
    public static volatile int iFld1=38602;
    public double dFld=-15.37410;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(boolean b, byte by1, long l2) {

        long l3=-8255520576848102185L;
        int i10=-46813, i11=-9, i12=-13, i13=-6, i14=-35261, iArr2[]=new int[N];
        short s=-17359;
        boolean b1=true;

        init(iArr2, -29303);

        for (l3 = 1; 134 > l3; l3++) {
            for (i11 = 1; i11 < 12; ++i11) {
                i12 |= i12;
                s = by1;
                i10 += i11;
                i10 += (-14 + (i11 * i11));
                i10 += i12;
            }
            switch ((int)(((l3 % 3) * 5) + 66)) {
            case 71:
                if (true) {
                    Test.fFld += -10301;
                    iArr2[(int)(l3 + 1)] += (int)Test.instanceCount;
                    i10 += i12;
                } else if (b1) {
                    for (i13 = 1; i13 < 12; ++i13) {
                        Test.iFld *= (int)Test.instanceCount;
                        Test.instanceCount <<= Test.instanceCount;
                    }
                } else if (b) {
                    Test.iFld += (int)(l3 * l3);
                }
                break;
            case 74:
                if (b1) break;
            case 72:
                i12 /= (int)(i12 | 1);
                break;
            }
        }
        long meth_res = (b ? 1 : 0) + by1 + l2 + l3 + i10 + i11 + i12 + s + i13 + i14 + (b1 ? 1 : 0) +
            checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l1) {

        double d=0.118181;
        byte by=111;
        int i4=21626, i5=-20569, i6=-4, i7=-177, i8=33738, i9=6, i15=77, iArr1[]=new int[N];
        long l4=227L;

        init(iArr1, 4);

        d = 1;
        do {
            int i3=203;
            i3 = ((Math.abs(i3) - iArr1[(int)(d + 1)]) - ((i3 + by) - i3));
            for (i4 = 1; i4 < 5; i4++) {
                for (i6 = 1; i6 < 2; ++i6) {
                    i5 += (i6 ^ Test.instanceCount);
                }
                for (i8 = 1; i8 < 2; i8++) {
                    i5 += i8;
                    by |= (byte)(58 - ((Test.fFld + -2.864F) + i5));
                    iArr1[i8] *= (int)(((i4 * i9) + (d - i9)) * ((++Test.instanceCount) - (-(30233 - (i8 + i8)))));
                    i3 %= (int)(lMeth(Test.bFld, by, 12L) | 1);
                    if (Test.bFld) break;
                    Test.iFld += (int)142L;
                }
                for (l4 = 1; l4 < 2; ++l4) {
                    i5 += i15;
                    Test.fFld += (((l4 * Test.iFld) + Test.instanceCount) - i7);
                }
            }
        } while (++d < 323);
        vMeth_check_sum += l1 + Double.doubleToLongBits(d) + by + i4 + i5 + i6 + i7 + i8 + i9 + l4 + i15 +
            checkSum(iArr1);
    }

    public static int iMeth(long l, int i2) {

        short s1=-5847;
        int i16=3, i17=2781, i18=-48, i19=45708, iArr3[]=new int[N];
        byte by2=117;
        long lArr[]=new long[N];

        init(lArr, -6L);
        init(iArr3, -29624);

        vMeth(Test.instanceCount);
        lArr[(0 >>> 1) % N] = Test.instanceCount;
        iArr3[(61512 >>> 1) % N] -= i2;
        s1 -= (short)i2;
        for (i16 = 12; i16 < 283; ++i16) {
            Test.instanceCount = -177;
            by2 *= (byte)-27284;
            i2 = 42122;
            lArr[i16] = (long)Test.fFld;
            i2 = -10;
        }
        Test.iFld = (int)-123L;
        for (i18 = 13; i18 < 389; i18++) {
            l <<= i17;
            Test.iFld = i2;
            Test.fFld *= -8;
        }
        long meth_res = l + i2 + s1 + i16 + i17 + by2 + i18 + i19 + checkSum(lArr) +
            checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-130, i20=14, i21=51760, i22=128, i23=26449, i24=-14, i25=14, i26=-15920, iArr[]=new int[N];
        float f=0.48F;
        byte by3=74;
        short s2=-2402;

        init(iArr, -141);

        i = 1;
        do {
            f *= ((i1++) - iArr[i]);
            iArr[i] *= (Math.max(i1, (int)(Test.instanceCount * i1)) + Math.min(i, -34466 * iMeth(Test.instanceCount,
                i1)));
            by3 -= (byte)-49782;
            iArr[i + 1] = Test.iFld;
            Test.iFld = i;
            for (i20 = 5; i20 < 186; ++i20) {
                i1 += (i20 | i21);
                Test.iFld = Test.iFld1;
                Test.iFld += Test.iFld1;
                iArr[i20] -= i1;
                s2 <<= (short)-30424;
            }
            Test.iFld += i20;
            i22 = 1;
            do {
                for (i23 = 1; i23 < 1; i23++) {
                    i24 -= (int)Test.instanceCount;
                    i21 += (i23 * i23);
                    f -= Test.iFld;
                    i1 = 132;
                    i21 = i22;
                    i1 -= -55756;
                    i21 |= s2;
                    iArr[i23] += (int)Test.instanceCount;
                    iArr[i - 1] <<= i1;
                }
                f += f;
                for (i25 = 1; i25 < 1; i25++) {
                    i26 = -42598;
                    dFld += 50540L;
                    dFld -= Test.iFld;
                    i26 += (i25 ^ (long)Test.fFld);
                }
            } while (++i22 < 186);
        } while (++i < 135);

        System.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        System.out.println("by3 i20 i21 = " + by3 + "," + i20 + "," + i21);
        System.out.println("s2 i22 i23 = " + s2 + "," + i22 + "," + i23);
        System.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        System.out.println("iArr = " + checkSum(iArr));

        System.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        System.out.println("Test.bFld Test.iFld1 dFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," +
            Double.doubleToLongBits(dFld));

        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
