// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:28:34 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=40795L;
    public static int iFld=-116;
    public short sFld=9548;
    public static boolean bFld=true;
    public static byte byFld=21;
    public double dFld=-2.129898;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5512993925053146759L);
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        double d1=-53.129656;
        int i2=1, i3=-52751, i4=8, i5=1;
        boolean b=false;
        short s=-25433;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, 1.1015F);
        FuzzerUtils.init(lArr1, 2200290079L);

        for (d1 = 11; 246 > d1; d1 += 2) {
            for (i3 = 1; i3 < 13; ++i3) {
                i2 += (((i3 * Test.instanceCount) + i4) - i4);
                i4 >>= i2;
                i5 = 1;
                do {
                    fArr[i5 - 1] = i2;
                    i2 -= (int)-118L;
                    Test.instanceCount ^= i5;
                    if (b) break;
                    s += (short)i5;
                    i4 >>= i4;
                } while (++i5 < 2);
                if (b) continue;
                i2 += i2;
                lArr1[(int)(d1)] >>= -52244;
                i2 = i3;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i2 + i3 + i4 + i5 + (b ? 1 : 0) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1(int i1) {

        int i6=-10117;
        double d2=-12.125172;
        float f1=2.186F;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)118);

        vMeth2();
        i6 = 1;
        while (++i6 < 122) {
            Test.instanceCount += (long)d2;
            Test.lArrFld[i6] <<= i1;
            d2 = -8149L;
            i1 *= i6;
            f1 += i1;
            i1 <<= (int)Test.instanceCount;
            switch (((i6 % 2) * 5) + 21) {
            case 23:
                i1 -= i1;
                Test.iFld = 34909;
                break;
            case 25:
                Test.iFld = (int)d2;
                byArr1[i6 - 1] = (byte)i1;
                break;
            }
        }
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld >>= 72;
        vMeth1_check_sum += i1 + i6 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(byArr1);
    }

    public static void vMeth() {

        int i=71, i7=-6, iArr[]=new int[N];
        double d=79.67282, dArr[]=new double[N];
        long l=6578109779049630165L, lArr[]=new long[N];
        float f=-76.686F;
        short sArr[]=new short[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(sArr, (short)15536);
        FuzzerUtils.init(iArr, -223);
        FuzzerUtils.init(lArr, 3494467435L);
        FuzzerUtils.init(byArr, (byte)42);
        FuzzerUtils.init(dArr, 65.64447);

        i >>= sArr[(i >>> 1) % N];
        d = ((Long.reverseBytes(Test.instanceCount) * (i--)) - (iArr[(i >>> 1) % N] - (-Test.instanceCount)));
        l += (((i--) - (++lArr[(i >>> 1) % N])) + i);
        byArr[(i >>> 1) % N] <<= (byte)(--i);
        byArr[(i >>> 1) % N] = (byte)Math.min(Integer.reverseBytes((int)(f - d)), (int)((++iArr[(228 >>> 1) % N]) - (f
            * l)));
        vMeth1(-13);
        i7 = 1;
        do {
            Test.iFld += i7;
            i += (i7 | Test.instanceCount);
            i = i7;
            Test.iFld += (((i7 * i) + i) - Test.iFld);
            dArr[i7 - 1] += Test.iFld;
            Test.iFld = i7;
            Test.iFld += (((i7 * i7) + i) - i7);
        } while (++i7 < 263);
        l += 65495;
        vMeth_check_sum += i + Double.doubleToLongBits(d) + l + Float.floatToIntBits(f) + i7 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i8=-1, i9=-58017, i10=10, i11=12938, i12=1950, i13=-8, i14=-31547;
        float f2=-20.45F;

        vMeth();
        Test.iFld |= Test.iFld;
        i8 = 1;
        do {
            sFld += (short)(i8 - f2);
            for (i9 = 5; i9 < 183; ++i9) {
                Test.bFld = Test.bFld;
                Test.iFld = Test.iFld;
                switch ((i9 % 3) + 115) {
                case 115:
                case 116:
                    if (true) break;
                    for (i11 = 1; 2 > i11; ++i11) {
                        Test.bFld = Test.bFld;
                        Test.iFld += i11;
                        Test.iFld -= sFld;
                        Test.iArrFld[i11] <<= i8;
                        Test.iFld *= i11;
                        i12 -= (int)f2;
                        switch (((i12 >>> 1) % 1) + 36) {
                        case 36:
                            try {
                                Test.iFld = (Test.iFld % Test.iFld);
                                Test.iArrFld[i8 + 1] = (i11 / i10);
                                i10 = (i9 % Test.iArrFld[i11 - 1]);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.instanceCount /= 173;
                    }
                    for (i13 = i9; i13 < 2; i13++) {
                        try {
                            i12 = (4755 % Test.iArrFld[i9 + 1]);
                            Test.iFld = (-227 % i11);
                            i12 = (-35 / i8);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 117:
                    i12 = i12;
                    try {
                        i12 = (i9 % i12);
                        i12 = (i11 % 34528);
                        i14 = (Test.iFld % i9);
                    } catch (ArithmeticException a_e) {}
                    if (true) {
                        i14 = (int)Test.instanceCount;
                        Test.iArrFld[i9 - 1] = Test.byFld;
                        Test.instanceCount -= i14;
                        if (true) break;
                    } else {
                        f2 = i9;
                        dFld -= i13;
                    }
                    break;
                default:
                    i10 = i9;
                }
            }
        } while (++i8 < 137);

        FuzzerUtils.out.println("i8 f2 i9 = " + i8 + "," + Float.floatToIntBits(f2) + "," + i9);
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 = " + i13 + "," + i14);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld sFld = " + Test.instanceCount + "," + Test.iFld + "," +
            sFld);
        FuzzerUtils.out.println("Test.bFld Test.byFld dFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
