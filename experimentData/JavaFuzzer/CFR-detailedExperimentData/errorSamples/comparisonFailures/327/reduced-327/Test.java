import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:28:34 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=40795L;
    public static int iFld=-116;
    public short sFld=9548;
    public static boolean bFld=true;
    public static byte byFld=21;
    public double dFld=-2.129898;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        init(Test.lArrFld, -5512993925053146759L);
        init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        double d1=-53.129656;
        int i2=1, i3=-52751, i4=8, i5=1;
        boolean b=false;
        short s=-25433;
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        init(fArr, 1.1015F);
        init(lArr1, 2200290079L);

        for (d1 = 11; 246 > d1; d1 += 2) {
            for (i3 = 1; i3 < 13; ++i3) {
                i2 += (((i3 * Test.instanceCount) + i4) - i4);
                i4 >>= i2;
                i5 = 1;
                do {
                    fArr[i5 - 1] = i2;
                    i2 -= (int)-118L;
                    Test.instanceCount ^= i5;
                    if (b) break;
                    s += (short)i5;
                    i4 >>= i4;
                } while (++i5 < 2);
                if (b) continue;
                i2 += i2;
                lArr1[(int)(d1)] >>= -52244;
                i2 = i3;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d1) + i2 + i3 + i4 + i5 + (b ? 1 : 0) + s +
            Double.doubleToLongBits(checkSum(fArr)) + checkSum(lArr1);
    }

    public static void vMeth1(int i1) {

        int i6=-10117;
        double d2=-12.125172;
        float f1=2.186F;
        byte byArr1[]=new byte[N];

        init(byArr1, (byte)118);

        vMeth2();
        i6 = 1;
        while (++i6 < 122) {
            Test.instanceCount += (long)d2;
            Test.lArrFld[i6] <<= i1;
            d2 = -8149L;
            i1 *= i6;
            f1 += i1;
            i1 <<= (int)Test.instanceCount;
            switch (((i6 % 2) * 5) + 21) {
            case 23:
                i1 -= i1;
                Test.iFld = 34909;
                break;
            case 25:
                Test.iFld = (int)d2;
                byArr1[i6 - 1] = (byte)i1;
                break;
            }
        }
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld >>= 72;
        vMeth1_check_sum += i1 + i6 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) +
            checkSum(byArr1);
    }

    public static void vMeth() {

        int i=71, i7=-6, iArr[]=new int[N];
        double d=79.67282, dArr[]=new double[N];
        long l=6578109779049630165L, lArr[]=new long[N];
        float f=-76.686F;
        short sArr[]=new short[N];
        byte byArr[]=new byte[N];

        init(sArr, (short)15536);
        init(iArr, -223);
        init(lArr, 3494467435L);
        init(byArr, (byte)42);
        init(dArr, 65.64447);

        i >>= sArr[(i >>> 1) % N];
        d = ((Long.reverseBytes(Test.instanceCount) * (i--)) - (iArr[(i >>> 1) % N] - (-Test.instanceCount)));
        l += (((i--) - (++lArr[(i >>> 1) % N])) + i);
        byArr[(i >>> 1) % N] <<= (byte)(--i);
        byArr[(i >>> 1) % N] = (byte)Math.min(Integer.reverseBytes((int)(f - d)), (int)((++iArr[(228 >>> 1) % N]) - (f
            * l)));
        vMeth1(-13);
        i7 = 1;
        do {
            Test.iFld += i7;
            i += (i7 | Test.instanceCount);
            i = i7;
            Test.iFld += (((i7 * i) + i) - Test.iFld);
            dArr[i7 - 1] += Test.iFld;
            Test.iFld = i7;
            Test.iFld += (((i7 * i7) + i) - i7);
        } while (++i7 < 263);
        l += 65495;
        vMeth_check_sum += i + Double.doubleToLongBits(d) + l + Float.floatToIntBits(f) + i7 +
            checkSum(sArr) + checkSum(iArr) + checkSum(lArr) +
            checkSum(byArr) + Double.doubleToLongBits(checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i8=-1, i9=-58017, i10=10, i11=12938, i12=1950, i13=-8, i14=-31547;
        float f2=-20.45F;

        vMeth();
        Test.iFld |= Test.iFld;
        i8 = 1;
        do {
            sFld += (short)(i8 - f2);
            for (i9 = 5; i9 < 183; ++i9) {
                Test.bFld = Test.bFld;
                Test.iFld = Test.iFld;
                switch ((i9 % 3) + 115) {
                case 115:
                case 116:
                    if (true) break;
                    for (i11 = 1; 2 > i11; ++i11) {
                        Test.bFld = Test.bFld;
                        Test.iFld += i11;
                        Test.iFld -= sFld;
                        Test.iArrFld[i11] <<= i8;
                        Test.iFld *= i11;
                        i12 -= (int)f2;
                        switch (((i12 >>> 1) % 1) + 36) {
                        case 36:
                            try {
                                Test.iFld = (Test.iFld % Test.iFld);
                                Test.iArrFld[i8 + 1] = (i11 / i10);
                                i10 = (i9 % Test.iArrFld[i11 - 1]);
                            } catch (ArithmeticException a_e) {}
                        }
                        Test.instanceCount /= 173;
                    }
                    for (i13 = i9; i13 < 2; i13++) {
                        try {
                            i12 = (4755 % Test.iArrFld[i9 + 1]);
                            Test.iFld = (-227 % i11);
                            i12 = (-35 / i8);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 117:
                    i12 = i12;
                    try {
                        i12 = (i9 % i12);
                        i12 = (i11 % 34528);
                        i14 = (Test.iFld % i9);
                    } catch (ArithmeticException a_e) {}
                    if (true) {
                        i14 = (int)Test.instanceCount;
                        Test.iArrFld[i9 - 1] = Test.byFld;
                        Test.instanceCount -= i14;
                        if (true) break;
                    } else {
                        f2 = i9;
                        dFld -= i13;
                    }
                    break;
                default:
                    i10 = i9;
                }
            }
        } while (++i8 < 137);

        System.out.println("i8 f2 i9 = " + i8 + "," + Float.floatToIntBits(f2) + "," + i9);
        System.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        System.out.println("i13 i14 = " + i13 + "," + i14);

        System.out.println("Test.instanceCount Test.iFld sFld = " + Test.instanceCount + "," + Test.iFld + "," +
            sFld);
        System.out.println("Test.bFld Test.byFld dFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," +
            Double.doubleToLongBits(dFld));
        System.out.println("Test.lArrFld Test.iArrFld = " + checkSum(Test.lArrFld) + "," +
            checkSum(Test.iArrFld));

        System.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
