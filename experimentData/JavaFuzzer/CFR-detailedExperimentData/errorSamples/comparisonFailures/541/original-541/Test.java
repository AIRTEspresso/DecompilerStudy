// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 01:09:04 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=252L;
    public static short sFld=15107;
    public int iFld=194;
    public static float fFld=103.505F;
    public static boolean bFld=false;
    public static volatile long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -36L);
        FuzzerUtils.init(Test.iArrFld, 16937);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i3) {

        int i4=-27109, i5=45689, i6=-37857, i7=36196, i8=-5957, i9=-181, i10=213;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.88260);

        Test.iArrFld[(i3 >>> 1) % N] -= (int)Test.instanceCount;
        for (i4 = 138; 1 < i4; --i4) {
            i5 = i4;
            i3 <<= Test.sFld;
        }
        for (i6 = 127; i6 > 2; --i6) {
            Test.iArrFld[i6 - 1] -= -213;
            i8 = 1;
            do {
                i3 += i4;
                for (i9 = 1; i9 < 1; i9++) {
                    if (b1) {
                        i5 += (-4 + (i9 * i9));
                        dArr[i8 - 1] += 5;
                    } else if (b1) {
                        Test.sFld += (short)(((i9 * i7) + i9) - Test.instanceCount);
                        Test.fFld -= i3;
                        if (i5 != 0) {
                        }
                    } else {
                        Test.lArrFld[i8 + 1] += i9;
                    }
                }
            } while (++i8 < 13);
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i1) {

        int i2=-6, i11=-35524, i12=8, i13=-250, i14=8, i15=57115;
        byte by=20;
        double d=-117.77503;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 97.215F);

        i2 = 1;
        do {
            i1 *= i1;
            fMeth(i2);
        } while (++i2 < 235);
        Test.instanceCount = i1;
        Test.bFld = Test.bFld;
        i11 = 1;
        while (++i11 < 158) {
            i1 += i1;
            switch (((i1 >>> 1) % 8) + 16) {
            case 16:
                Test.fFld += (i11 + i2);
                break;
            case 17:
                Test.instanceCount <<= by;
                for (i12 = i11; i12 < 10; i12++) {
                    for (i14 = 1; i14 < 1; ++i14) {
                        by += (byte)(i14 | Test.instanceCount);
                        d = Test.instanceCount;
                    }
                    try {
                        i13 = (-155 % i1);
                        i13 = (591746516 / i11);
                        i1 = (-69 / i2);
                    } catch (ArithmeticException a_e) {}
                }
                break;
            case 18:
                Test.bArrFld = Test.bArrFld;
                break;
            case 19:
                i15 += (i11 - i11);
                break;
            case 20:
                Test.sFld = (short)Test.instanceCount;
                break;
            case 21:
                Test.iArrFld[i11 + 1] *= 4;
                break;
            case 22:
                fArr[i11 - 1] += Test.instanceCount;
                break;
            case 23:
                i1 += (i11 * i11);
            default:
                Test.sFld >>= (short)7318;
            }
        }
        vMeth_check_sum += i1 + i2 + i11 + by + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth(long l, int i) {


        l *= Test.iArrFld[(i >>> 1) % N];
        vMeth(i);
        vSmallMeth_check_sum += l + i;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        int i16=9, i17=10, i18=183, i19=4, i20=-43618, i21=13, i22=9, i23=-31904, i24=1, i25=9;
        double d1=0.121613;
        byte by1=-23;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(fArr1, 75.346F);

        b = (b = true);
        Test.sFld = (short)Long.reverseBytes(--Test.lArrFld[(iFld >>> 1) % N]);
        for (int smallinvoc=0; smallinvoc<155; smallinvoc++) vSmallMeth(Test.instanceCount, iFld);
        Test.instanceCount = iFld;
        iFld = iFld;
        iFld >>>= iFld;
        for (i16 = 1; i16 < 326; ++i16) {
            if (b) {
                iFld -= i16;
                Test.instanceCount <<= -6;
                Test.fFld = i17;
                if (true) {
                    iFld -= Test.sFld;
                    for (i18 = i16; i18 < 77; i18++) {
                        i17 = (int)d1;
                        for (i20 = 1; i20 < 1; ++i20) {
                            d1 *= i18;
                        }
                        for (i22 = i18; 1 > i22; i22++) {
                            Test.iArrFld[i16 + 1] <<= i23;
                            Test.fFld += by1;
                            Test.sFld += (short)i21;
                        }
                        i23 >>>= iFld;
                        fArr1[i18][i18] *= i17;
                        i23 += i17;
                        for (i24 = i18; i24 < 1; i24++) {
                            Test.instanceCount += Test.instanceCount;
                            Test.instanceCount += (i24 ^ Test.sFld);
                            Test.fFld += 65459;
                            i17 = (int)Test.fFld;
                            Test.lArrFld[i18 - 1] += by1;
                        }
                    }
                } else {
                    i21 *= i24;
                }
            } else if (Test.bFld) {
                Test.fFld = i22;
            } else if (Test.bFld) {
                i25 *= by1;
            }
        }

        FuzzerUtils.out.println("b i16 i17 = " + (b ? 1 : 0) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 d1 = " + i18 + "," + i19 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 by1 i24 = " + i23 + "," + by1 + "," + i24);
        FuzzerUtils.out.println("i25 fArr1 = " + i25 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld iFld = " + Test.instanceCount + "," + Test.sFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.fFld Test.bFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            (Test.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
