import
java
.
util
.
concurrent
.
atomic
.
AtomicLong
;
import
java
.
io
.
PrintStream
;
import
java
.
util
.
Random
;
public
class
Test
{
public
static
final
int
N
=
400
;
public
static
long
instanceCount
=
1723977013L
;
public
byte
byFld
=
15
;
public
volatile
float
fFld
=
-
93.335F
;
public
static
int
iArrFld
[
]
=
new
int
[
N
]
;
public
boolean
bArrFld
[
]
[
]
[
]
=
new
boolean
[
N
]
[
N
]
[
N
]
;
static
{
init
(
Test
.
iArrFld
,
33391
)
;
}
public
static
long
iMeth_check_sum
=
0
;
public
static
long
vMeth_check_sum
=
0
;
public
static
long
vMeth1_check_sum
=
0
;
public
static
long
vMeth2_check_sum
=
0
;
public
static
int
iMeth
(
int
i1
)
{
i1
=
(
--
i1
)
;
long
meth_res
=
i1
;
iMeth_check_sum
+=
meth_res
;
return
(
int
)
meth_res
;
}
public
static
void
vMeth2
(
)
{
int
i3
=
172
;
i3
=
i3
;
vMeth2_check_sum
+=
i3
;
}
public
static
void
vMeth1
(
)
{
int
i4
=
53
,
i5
=
-
58396
,
i6
=
-
8681
,
i7
=
-
8
,
i8
=
11268
,
i9
=
21390
;
byte
by
=
36
;
boolean
b
=
false
;
short
sArr
[
]
=
new
short
[
N
]
;
init
(
sArr
,
(
short
)
7937
)
;
vMeth2
(
)
;
i4
&=
(
int
)
Test
.
instanceCount
;
for
(
i5
=
3
;
i5
<
226
;
++
i5
)
{
by
=
(
byte
)
i6
;
i6
=
i6
;
Test
.
instanceCount
+=
(
long
)
26.895F
;
i7
=
1
;
do
{
if
(
b
)
break
;
b
=
b
;
for
(
i8
=
1
;
1
>
i8
;
++
i8
)
{
i4
+=
(
i8
^
i9
)
;
i4
=
(
int
)
Test
.
instanceCount
;
i9
+=
i8
;
sArr
[
i5
+
1
]
>>>=
(
short
)
i4
;
i9
=
225
;
}
}
while
(
++
i7
<
7
)
;
}
vMeth1_check_sum
+=
i4
+
i5
+
i6
+
by
+
i7
+
(
b
?
1
:
0
)
+
i8
+
i9
+
checkSum
(
sArr
)
;
}
public
static
void
vMeth
(
float
f
)
{
int
i2
=
-
2
,
i10
=
5
,
i11
=
64798
,
i12
=
-
1
;
short
s
=
-
23269
;
i2
=
1
;
while
(
++
i2
<
224
)
{
vMeth1
(
)
;
}
for
(
i10
=
173
;
i10
>
2
;
i10
-=
3
)
{
Test
.
instanceCount
^=
i10
;
switch
(
(
(
-
156
>
>
>
1
)
%
1
)
+
119
)
{
case
119
:
i11
=
i10
;
i11
*=
-
110
;
Test
.
iArrFld
[
i10
]
=
i10
;
switch
(
(
i10
%
2
)
+
61
)
{
case
61
:
Test
.
instanceCount
=
i2
;
try
{
i11
=
(
i10
%
i10
)
;
i11
=
(
37353
%
i11
)
;
i11
=
(
-
10
/
i11
)
;
}
catch
(
ArithmeticException
a_e
)
{
}
i11
=
i10
;
break
;
case
62
:
s
=
(
short
)
i12
;
Test
.
instanceCount
<<=
i11
;
i12
-=
i2
;
break
;
}
break
;
default
:
i12
+=
-
24524
;
}
}
vMeth_check_sum
+=
Float
.
floatToIntBits
(
f
)
+
i2
+
i10
+
i11
+
s
+
i12
;
}
public
void
mainTest
(
String
[
]
strArr1
)
{
int
i
=
-
138
,
i13
=
186
,
i14
=
6
,
i15
=
-
12281
;
double
d
=
0.124347
,
dArr
[
]
=
new
double
[
N
]
;
long
lArr
[
]
[
]
=
new
long
[
N
]
[
N
]
;
init
(
lArr
,
1447614521L
)
;
init
(
dArr
,
45.35738
)
;
i
=
(
int
)
(
(
++
i
)
*
(
(
12
+
iMeth
(
-
56875
)
)
*
Test
.
instanceCount
)
)
;
i
<<=
(
-
21451
+
(
--
byFld
)
)
;
vMeth
(
fFld
)
;
d
=
d
;
lArr
[
(
i
>
>
>
1
)
%
N
]
=
lArr
[
(
i
>
>
>
1
)
%
N
]
;
i13
=
1
;
do
{
dArr
[
i13
+
1
]
=
-
126.10907
;
for
(
i14
=
101
;
i14
>
6
;
i14
-=
2
)
{
bArrFld
[
i14
-
1
]
[
i14
-
1
]
=
bArrFld
[
i14
+
1
]
[
i14
-
1
]
;
i
=
43276
;
byFld
+=
(
byte
)
i14
;
if
(
true
)
continue
;
}
i
+=
(
i13
^
Test
.
instanceCount
)
;
}
while
(
++
i13
<
248
)
;
System
.
out
.
println
(
"i d i13 = "
+
i
+
","
+
Double
.
doubleToLongBits
(
d
)
+
","
+
i13
)
;
System
.
out
.
println
(
"i14 i15 lArr = "
+
i14
+
","
+
i15
+
","
+
checkSum
(
lArr
)
)
;
System
.
out
.
println
(
"dArr = "
+
Double
.
doubleToLongBits
(
checkSum
(
dArr
)
)
)
;
System
.
out
.
println
(
"Test.instanceCount byFld fFld = "
+
Test
.
instanceCount
+
","
+
byFld
+
","
+
Float
.
floatToIntBits
(
fFld
)
)
;
System
.
out
.
println
(
"Test.iArrFld bArrFld = "
+
checkSum
(
Test
.
iArrFld
)
+
","
+
checkSum
(
bArrFld
)
)
;
System
.
out
.
println
(
"iMeth_check_sum: "
+
iMeth_check_sum
)
;
System
.
out
.
println
(
"vMeth2_check_sum: "
+
vMeth2_check_sum
)
;
System
.
out
.
println
(
"vMeth1_check_sum: "
+
vMeth1_check_sum
)
;
System
.
out
.
println
(
"vMeth_check_sum: "
+
vMeth_check_sum
)
;
}
public
static
void
main
(
String
[
]
strArr
)
{
try
{
Test
_instance
=
new
Test
(
)
;
_instance
.
mainTest
(
strArr
)
;
}
catch
(
Exception
ex
)
{
System
.
out
.
println
(
ex
.
getClass
(
)
.
getCanonicalName
(
)
)
;
}
}
public
static
PrintStream
out
=
System
.
out
;
public
static
Random
random
=
new
Random
(
1
)
;
public
static
long
seed
=
1L
;
public
static
int
UnknownZero
=
0
;
public
static
int
nextInt
(
)
{
return
random
.
nextInt
(
)
;
}
public
static
long
nextLong
(
)
{
return
random
.
nextLong
(
)
;
}
public
static
float
nextFloat
(
)
{
return
random
.
nextFloat
(
)
;
}
public
static
double
nextDouble
(
)
{
return
random
.
nextDouble
(
)
;
}
public
static
boolean
nextBoolean
(
)
{
return
random
.
nextBoolean
(
)
;
}
public
static
byte
nextByte
(
)
{
return
(
byte
)
random
.
nextInt
(
)
;
}
public
static
short
nextShort
(
)
{
return
(
short
)
random
.
nextInt
(
)
;
}
public
static
char
nextChar
(
)
{
return
(
char
)
random
.
nextInt
(
)
;
}
public
static
void
init
(
boolean
[
]
a
,
boolean
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
j
%
2
==
0
)
?
seed
:
(
j
%
3
==
0
)
;
}
}
public
static
void
init
(
boolean
[
]
[
]
a
,
boolean
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
long
[
]
a
,
long
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
;
}
}
public
static
void
init
(
long
[
]
[
]
a
,
long
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
int
[
]
a
,
int
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
;
}
}
public
static
void
init
(
int
[
]
[
]
a
,
int
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
short
[
]
a
,
short
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
short
)
(
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
)
;
}
}
public
static
void
init
(
short
[
]
[
]
a
,
short
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
char
[
]
a
,
char
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
char
)
(
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
)
;
}
}
public
static
void
init
(
char
[
]
[
]
a
,
char
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
byte
[
]
a
,
byte
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
byte
)
(
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
)
;
}
}
public
static
void
init
(
byte
[
]
[
]
a
,
byte
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
double
[
]
a
,
double
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
;
}
}
public
static
void
init
(
double
[
]
[
]
a
,
double
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
float
[
]
a
,
float
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
a
[
j
]
=
(
j
%
2
==
0
)
?
seed
+
j
:
seed
-
j
;
}
}
public
static
void
init
(
float
[
]
[
]
a
,
float
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
Object
[
]
[
]
a
,
Object
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
init
(
a
[
j
]
,
seed
)
;
}
}
public
static
void
init
(
Object
[
]
a
,
Object
seed
)
{
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
try
{
a
[
j
]
=
seed
.
getClass
(
)
.
newInstance
(
)
;
}
catch
(
Exception
ex
)
{
a
[
j
]
=
seed
;
}
}
public
static
long
checkSum
(
boolean
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
a
[
j
]
?
j
+
1
:
0
)
;
}
return
sum
;
}
public
static
long
checkSum
(
boolean
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
long
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
long
checkSum
(
long
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
int
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
long
checkSum
(
int
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
short
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
short
)
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
long
checkSum
(
short
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
char
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
char
)
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
long
checkSum
(
char
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
byte
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
byte
)
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
long
checkSum
(
byte
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
double
checkSum
(
double
[
]
a
)
{
double
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
double
checkSum
(
double
[
]
[
]
a
)
{
double
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
double
checkSum
(
float
[
]
a
)
{
double
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
(
a
[
j
]
/
(
j
+
1
)
+
a
[
j
]
%
(
j
+
1
)
)
;
}
return
sum
;
}
public
static
double
checkSum
(
float
[
]
[
]
a
)
{
double
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
Object
[
]
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
;
}
return
sum
;
}
public
static
long
checkSum
(
Object
[
]
a
)
{
long
sum
=
0
;
for
(
int
j
=
0
;
j
<
a
.
length
;
j
++
)
{
sum
+=
checkSum
(
a
[
j
]
)
*
Math
.
pow
(
2
,
j
)
;
}
return
sum
;
}
public
static
long
checkSum
(
Object
a
)
{
if
(
a
==
null
)
return
0L
;
return
(
long
)
a
.
getClass
(
)
.
getCanonicalName
(
)
.
length
(
)
;
}
public
static
byte
[
]
byte1array
(
int
sz
,
byte
seed
)
{
byte
[
]
ret
=
new
byte
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
byte
[
]
[
]
byte2array
(
int
sz
,
byte
seed
)
{
byte
[
]
[
]
ret
=
new
byte
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
short
[
]
short1array
(
int
sz
,
short
seed
)
{
short
[
]
ret
=
new
short
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
short
[
]
[
]
short2array
(
int
sz
,
short
seed
)
{
short
[
]
[
]
ret
=
new
short
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
int
[
]
int1array
(
int
sz
,
int
seed
)
{
int
[
]
ret
=
new
int
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
int
[
]
[
]
int2array
(
int
sz
,
int
seed
)
{
int
[
]
[
]
ret
=
new
int
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
long
[
]
long1array
(
int
sz
,
long
seed
)
{
long
[
]
ret
=
new
long
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
long
[
]
[
]
long2array
(
int
sz
,
long
seed
)
{
long
[
]
[
]
ret
=
new
long
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
float
[
]
float1array
(
int
sz
,
float
seed
)
{
float
[
]
ret
=
new
float
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
float
[
]
[
]
float2array
(
int
sz
,
float
seed
)
{
float
[
]
[
]
ret
=
new
float
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
double
[
]
double1array
(
int
sz
,
double
seed
)
{
double
[
]
ret
=
new
double
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
double
[
]
[
]
double2array
(
int
sz
,
double
seed
)
{
double
[
]
[
]
ret
=
new
double
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
char
[
]
char1array
(
int
sz
,
char
seed
)
{
char
[
]
ret
=
new
char
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
char
[
]
[
]
char2array
(
int
sz
,
char
seed
)
{
char
[
]
[
]
ret
=
new
char
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
Object
[
]
Object1array
(
int
sz
,
Object
seed
)
{
Object
[
]
ret
=
new
Object
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
Object
[
]
[
]
Object2array
(
int
sz
,
Object
seed
)
{
Object
[
]
[
]
ret
=
new
Object
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
boolean
[
]
boolean1array
(
int
sz
,
boolean
seed
)
{
boolean
[
]
ret
=
new
boolean
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
boolean
[
]
[
]
boolean2array
(
int
sz
,
boolean
seed
)
{
boolean
[
]
[
]
ret
=
new
boolean
[
sz
]
[
sz
]
;
init
(
ret
,
seed
)
;
return
ret
;
}
public
static
AtomicLong
runningThreads
=
new
AtomicLong
(
0
)
;
public
static
synchronized
void
runThread
(
Runnable
r
)
{
final
Thread
t
=
new
Thread
(
r
)
;
t
.
start
(
)
;
runningThreads
.
incrementAndGet
(
)
;
Thread
t1
=
new
Thread
(
new
Runnable
(
)
{
public
void
run
(
)
{
try
{
t
.
join
(
)
;
runningThreads
.
decrementAndGet
(
)
;
}
catch
(
InterruptedException
e
)
{
}
}
}
)
;
t1
.
start
(
)
;
}
public
static
void
joinThreads
(
)
{
while
(
runningThreads
.
get
(
)
>
0
)
{
try
{
Thread
.
sleep
(
1000
)
;
}
catch
(
InterruptedException
e
)
{
}
}
}
}
