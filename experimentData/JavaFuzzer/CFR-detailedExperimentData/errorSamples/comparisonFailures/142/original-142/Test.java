// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:19:23 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=3594617949L;
    public int iFld=-3;
    public float fFld=0.124F;
    public static volatile short sFld=9772;
    public boolean bFld=false;
    public static volatile byte byFld=-22;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.98955);
        FuzzerUtils.init(Test.iArrFld, 13);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public int iMeth(int i8) {

        int i9=7927, i10=-193, i11=-119, i12=-12, i13=-9715, i14=241;
        float f1=-111.650F;
        byte by=108;
        long l2=-14L;

        i8 += (int)1.158F;
        for (i9 = 19; i9 < 398; i9++) {
            for (i11 = 1; i11 < 4; i11 += 2) {
                iFld = (int)Test.instanceCount;
                for (i13 = 1; i13 < 4; i13++) {
                    Test.dArrFld[i13] = f1;
                    Test.instanceCount *= Test.instanceCount;
                }
                Test.instanceCount -= Test.instanceCount;
                by = (byte)Test.instanceCount;
                l2 -= i13;
                if (false) continue;
                i10 = i11;
                i10 *= 21168;
                l2 += (-26549 + (i11 * i11));
            }
        }
        i14 = (int)f1;
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + by + l2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(float f, int i1) {

        double d2=-2.65346;
        int i2=-144, i3=-174, i4=73, i5=4, i6=5, i7=9;
        long l1=112483535L, lArr1[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -68.326F);
        FuzzerUtils.init(lArr1, 1591523943L);

        fArr[(iFld >>> 1) % N] = (float)d2;
        for (i2 = 9; i2 < 148; i2++) {
            lArr1 = (lArr1 = (lArr1 = (lArr1 = lArr1)));
        }
        for (i4 = 15; i4 < 257; i4++) {
            i6 = 1;
            do {
                for (l1 = 1; l1 < 1; ++l1) {
                    i1 += (int)(l1 - iFld);
                    iFld += iMeth(i2);
                    Test.dArrFld[i4 + 1] = l1;
                    i1 += (int)(l1 - i7);
                    lArr1[(int)(l1)] += i4;
                    i5 = (int)f;
                    i7 += (int)Test.instanceCount;
                    i3 >>>= i7;
                    i7 += (2162 + (l1 * l1));
                }
            } while (++i6 < 7);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d2) + i2 + i3 + i4 + i5 + i6 + l1 +
            i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(double d, long l, double d1) {

        int i=4, i15=-13, i16=58, i17=-226, i18=94, i19=5457, iArr[]=new int[N];
        byte by1=98;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2918919998L);
        FuzzerUtils.init(iArr, 7);

        i = 139;
        while (--i > 0) {
            iFld += (int)(iFld = (int)(i + lArr[i]));
            vMeth1(fFld, i);
            iFld += (i ^ by1);
            iFld >>>= i;
            iFld <<= Test.sFld;
        }
        for (i15 = 2; i15 < 348; ++i15) {
            for (i17 = 1; i17 < 5; i17++) {
                iFld += (int)Test.instanceCount;
                i18 >>= iFld;
                i19 = 1;
                while (++i19 < 2) {
                    bFld = true;
                    try {
                        i16 = (iArr[i19 - 1] % 254);
                        iFld = (i15 % iArr[i19 - 1]);
                        iArr[i15] = (i19 % i18);
                    } catch (ArithmeticException a_e) {}
                    d *= Test.sFld;
                    i18 = (int)l;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + Double.doubleToLongBits(d1) + i + by1 + i15 + i16 + i17 +
            i18 + i19 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d3=-1.115433;
        int i21=-231, i22=-239, i23=74, i24=79, i25=-72, i26=-41365, i27=11, iArr1[][]=new int[N][N], iArr2[]=new
            int[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr1, -193);
        FuzzerUtils.init(lArr2, 2527083260L);
        FuzzerUtils.init(iArr2, 5);

        vMeth(d3, Test.instanceCount, d3);
        d3 = iFld;
        iFld *= 142;
        iArr1[(iFld >>> 1) % N][(iFld >>> 1) % N] -= -2;
        lArr2[(iFld >>> 1) % N] >>>= Test.instanceCount;
        for (int i20 : iArr2) {
            Test.sFld = (short)iFld;
            i20 = (int)Test.instanceCount;
            iFld = (int)Test.instanceCount;
            iArr2[(iFld >>> 1) % N] = iFld;
            Test.iArrFld[(i20 >>> 1) % N] *= (int)Test.instanceCount;
            i21 = 1;
            do {
                i20 <<= i20;
                i20 -= iFld;
                iArr1[i21 - 1][i21 - 1] = i21;
                fFld -= Test.instanceCount;
                bFld = bFld;
                iFld -= (int)d3;
            } while (++i21 < 63);
            for (i22 = 63; i22 > 1; i22 -= 2) {
                for (i24 = i22; i24 < 3; ++i24) {
                    i20 += i24;
                }
                Test.instanceCount += Test.sFld;
                if (bFld) break;
            }
            iArr1[(i23 >>> 1) % N][(0 >>> 1) % N] = i21;
            if (bFld) {
                for (i26 = 3; i26 < 63; i26++) {
                    i25 >>= i25;
                    fFld = Test.byFld;
                    Test.instanceCount += i21;
                }
            } else if (bFld) {
                i25 /= 88;
            } else {
                i27 >>= (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("d3 i21 i22 = " + Double.doubleToLongBits(d3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 iArr1 = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("lArr2 iArr2 = " + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount iFld fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.sFld bFld Test.byFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
