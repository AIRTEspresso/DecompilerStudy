import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:52:50 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1068005935077800450L;
    public static short sFld=-18457;
    public static byte byFld=-40;
    public int iFld=-113;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        init(Test.iArrFld, 7108);
        init(Test.byArrFld, (byte)-95);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6, int i7) {

        boolean b=false, bArr[]=new boolean[N];
        int i8=106, i9=58978, i10=-6, i11=5549, i12=6, i13=40033;
        double d=-2.94548;

        init(bArr, true);

        i5 += i5;
        Test.iArrFld[(i6 >>> 1) % N] = i7;
        if (b) {
            vMeth1_check_sum += i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 +
                Double.doubleToLongBits(d) + checkSum(bArr);
            return;
        } else {
            for (i8 = 8; i8 < 161; ++i8) {
                for (i10 = i8; i10 < 10; ++i10) {
                    int i14=-70;
                    for (i12 = 1; i12 < 1; i12++) {
                        Test.sFld = (short)d;
                        i7 *= (int)Test.instanceCount;
                    }
                    Test.instanceCount += i14;
                    Test.iArrFld[i10 - 1] -= (int)-18.334F;
                    i9 = i13;
                    Test.instanceCount -= 30310;
                    i13 = (int)Test.instanceCount;
                    i7 += i9;
                    bArr[i10] = b;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) +
            checkSum(bArr);
    }

    public static void vMeth() {

        int i2=-5815, i3=223, i4=4;
        float f1=91.809F;
        long lArr[]=new long[N];

        init(lArr, 60350L);

        lArr[(i2 >>> 1) % N] = (long)-1.746F;
        i2 >>= Integer.reverseBytes(i2);
        i3 = 364;
        while (--i3 > 0) {
            i4 = 1;
            while (++i4 < 5) {
                i2 <<= i4;
                vMeth1(i4, i4, i3);
                f1 = 1;
                do {
                    Test.iArrFld[(int)(f1 + 1)] += 4;
                    Test.instanceCount += (long)(f1 * f1);
                    i2 -= i4;
                    if (true) {
                        Test.iArrFld[i4 - 1] = i2;
                        Test.byFld = (byte)i3;
                    } else {
                        Test.iArrFld[i3] *= i2;
                        Test.instanceCount += Test.instanceCount;
                    }
                } while (++f1 < 1);
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f1) + checkSum(lArr);
    }

    public static void vSmallMeth(float f, int i, int i1) {


        i1 += (int)Test.instanceCount;
        vMeth();
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + i1;
    }

    public void mainTest(String[] strArr1) {

        float f2=-16.177F;
        int i15=-4235, i16=11, i17=12, i18=56856, i19=0;
        double d1=-2.57488;
        boolean bArr1[]=new boolean[N];

        init(bArr1, false);

        for (int smallinvoc=0; smallinvoc<411; smallinvoc++) vSmallMeth(f2, 70, iFld);
        for (i15 = 2; i15 < 305; ++i15) {
            i16 = (int)1264579708L;
            i17 = 1;
            do {
                iFld = Test.sFld;
                i16 += (i17 * i17);
                Test.instanceCount += i17;
                Test.instanceCount = iFld;
                i16 <<= (int)Test.instanceCount;
                Test.instanceCount += (i17 * i17);
                for (i18 = 1; i18 < 1; i18++) {
                    switch ((i17 % 2) + 124) {
                    case 124:
                        bArr1[i18 - 1] = true;
                        switch (((iFld >>> 1) % 2) + 54) {
                        case 54:
                            if (Test.bFld) {
                                d1 = i15;
                                Test.byArrFld[i18] = (byte)-126;
                                i16 *= (int)Test.instanceCount;
                                i16 = i17;
                            }
                            i16 += (i18 + i18);
                        case 55:
                            i19 += (((i18 * i18) + i18) - f2);
                            iFld = i15;
                            iFld -= (int)f2;
                            bArr1[i18 + 1] = Test.bFld;
                            break;
                        default:
                            iFld += (i18 - f2);
                        }
                        try {
                            i16 = (i18 / -29);
                            i19 = (i18 / 18);
                            Test.iArrFld[i17] = (10448 % Test.iArrFld[i15]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount *= i16;
                    case 125:
                        try {
                            Test.iArrFld[i17 + 1] = (-17 % i17);
                            i16 = (i17 % -249);
                            i16 = (i19 % -40431);
                        } catch (ArithmeticException a_e) {}
                        f2 = f2;
                        break;
                    default:
                        Test.byFld = (byte)Test.instanceCount;
                    }
                }
            } while (++i17 < 83);
        }

        System.out.println("f2 i15 i16 = " + Float.floatToIntBits(f2) + "," + i15 + "," + i16);
        System.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        System.out.println("d1 bArr1 = " + Double.doubleToLongBits(d1) + "," + checkSum(bArr1));

        System.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.byFld);
        System.out.println("iFld Test.bFld Test.iArrFld = " + iFld + "," + (Test.bFld ? 1 : 0) + "," +
            checkSum(Test.iArrFld));
        System.out.println("Test.byArrFld = " + checkSum(Test.byArrFld));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
