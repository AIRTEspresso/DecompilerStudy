import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 21:26:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1107322595L;
    public static int iFld1=221;
    public static double dFld=1.7509;
    public static byte byFld=-111;
    public static float fFld=63.531F;
    public int iFld2=10;
    public static int iArrFld[]=new int[N];

    static {
        init(Test.iArrFld, -8723);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(int i3, int i4) {

        float f1=-2.295F;
        byte by1=0;

        Test.iFld1 -= (int)((Test.iFld1 * (Test.instanceCount++)) * (~(long)(i4 - f1)));
        by1 -= (byte)-172L;
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f1) + by1;
    }

    public static int iMeth(long l) {

        long lArr[]=new long[N];

        init(lArr, 39L);

        vMeth((-(Test.iFld1 + Test.iFld1)) - (Test.iFld1--), (int)(((lArr[(Test.iFld1 >>> 1) % N] ^= -13L) - (l +
            Test.iFld1)) - (++Test.iFld1)));
        long meth_res = l + checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i14, int i15) {


        Test.dFld = Test.iFld1;
        Test.instanceCount = i15;
        i14 = -32870;
        vMeth1_check_sum += i14 + i15;
    }

    public static int iMeth1(long l2, int i12, int i13) {

        boolean b1=true, bArr[]=new boolean[N];
        int i16=24, i17=-155;

        init(bArr, false);

        vMeth1(i12, Test.iFld1);
        bArr[(i13 >>> 1) % N] = b1;
        Test.fFld = i13;
        Test.fFld -= Test.fFld;
        for (i16 = 18; i16 < 337; i16++) {
            i13 -= i12;
            if (i12 != 0) {
            }
        }
        i17 *= (int)Test.fFld;
        Test.byFld = (byte)i12;
        long meth_res = l2 + i12 + i13 + (b1 ? 1 : 0) + i16 + i17 + checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(boolean b, int i11) {

        int i18=-117, i19=13, i20=-26357, i21=15;
        short s2=-24286, sArr[]=new short[N];
        long lArr2[]=new long[N];

        init(lArr2, -61985L);
        init(sArr, (short)30045);

        Test.dFld -= ((++Test.instanceCount) + (++Test.byFld));
        if (b) {
            i11 = iMeth1(Test.instanceCount, 7, -12);
            for (i18 = 8; i18 < 224; i18++) {
                i11 = (int)-2.368F;
                if (b) {
                    lArr2[i18 + 1] += 14;
                    switch ((i18 % 1) + 26) {
                    case 26:
                    default:
                        i20 = 1;
                        while (++i20 < 7) {
                            Test.instanceCount -= i18;
                            i11 += (i20 - Test.iFld1);
                            i11 += s2;
                            Test.fFld = i20;
                            lArr2[i18] -= i21;
                            sArr[i20] -= (short)Test.fFld;
                        }
                    }
                }
            }
        } else {
            lArr2[(-27343 >>> 1) % N] += i18;
        }
        long meth_res = (b ? 1 : 0) + i11 + i18 + i19 + i20 + s2 + i21 + checkSum(lArr2) +
            checkSum(sArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr3) {

        long l1=59078L, lArr1[]=new long[N];
        int i5=-35, i6=-20392, i7=7, i8=5, i9=-248, i10=-41679, i22=9, i23=-57771, i24=14435;
        short s1=17275;
        boolean b2=true;
        float fArr[]=new float[N];
        double dArr[]=new double[N];
        byte byArr[]=new byte[N];

        init(fArr, -2.167F);
        init(lArr1, -155L);
        init(dArr, -2.33952);
        init(byArr, (byte)82);

        Test.iFld1 -= (int)((fArr[(Test.iFld1 >>> 1) % N] / ((--Test.iFld1) | 1)) * ((Test.instanceCount + 0.48934) +
            Test.iFld1));
        Test.iFld1 *= (int)((iMeth(Test.instanceCount) + (++lArr1[(Test.iFld1 >>> 1) % N])) * iMeth(l1));
        vMeth((int)(Test.iFld1 /= (int)(((long)(Test.dFld++)) | 1)), --Test.iFld1);
        for (i5 = 13; 224 > i5; ++i5) {
            for (i7 = 5; 119 > i7; i7++) {
                for (i9 = i5; i9 < 2; ++i9) {
                    vMeth((int)(s1 - l1), Test.iArrFld[i9 - 1]);
                    Test.instanceCount = ((sMeth(b2, i10) - i10) + i7);
                    Test.iFld1 >>>= i6;
                    dArr[i7 - 1] -= i8;
                }
                Test.byFld -= (byte)Test.fFld;
                i10 += i7;
                byArr[i5] *= (byte)i9;
                i8 >>= i7;
            }
            if (b2) {
                Test.instanceCount += (i5 | i8);
                Test.fFld -= i6;
                Test.dFld -= i6;
                i6 = i6;
            } else if (true) {
                for (i22 = 7; i22 < 119; i22++) {
                    i6 -= (int)l1;
                    l1 = Test.instanceCount;
                    Test.iArrFld[i22 + 1] <<= i5;
                }
                i6 += (((i5 * i6) + l1) - Test.iFld1);
                i23 = i7;
            }
            i24 = 1;
            do {
                s1 += (short)(i24 - Test.byFld);
                l1 -= iFld2;
                Test.instanceCount += (((i24 * Test.instanceCount) + Test.instanceCount) - Test.fFld);
            } while (++i24 < 119);
            Test.fFld += i5;
        }

        System.out.println("l1 i5 i6 = " + l1 + "," + i5 + "," + i6);
        System.out.println("i7 i8 i9 = " + i7 + "," + i8 + "," + i9);
        System.out.println("i10 s1 b2 = " + i10 + "," + s1 + "," + (b2 ? 1 : 0));
        System.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        System.out.println("fArr lArr1 dArr = " + Double.doubleToLongBits(checkSum(fArr)) + "," +
            checkSum(lArr1) + "," + Double.doubleToLongBits(checkSum(dArr)));
        System.out.println("byArr = " + checkSum(byArr));

        System.out.println("Test.instanceCount Test.iFld1 Test.dFld = " + Test.instanceCount + "," + Test.iFld1 +
            "," + Double.doubleToLongBits(Test.dFld));
        System.out.println("Test.byFld Test.fFld iFld2 = " + Test.byFld + "," + Float.floatToIntBits(Test.fFld) +
            "," + iFld2);
        System.out.println("Test.iArrFld = " + checkSum(Test.iArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        System.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr2);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
