// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:41:09 2022
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=12L;
    public static volatile double dFld=-2.14946;
    public int iFld=-9;
    public static int iFld1=-11;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.fArrFld, -86.35F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i9, double d) {

        int i10=-17, i11=-7, i12=4, i13=-238, i14=-10;
        short s=17175;

        Test.iArrFld[(i9 >>> 1) % N] += i9;
        for (i10 = 15; i10 < 386; i10++) {
            for (i12 = 1; i12 < 5; i12++) {
                Test.iArrFld[i12 + 1] = i13;
                switch (((i10 % 2) * 5) + 111) {
                case 117:
                    i9 -= (int)Test.instanceCount;
                    break;
                case 114:
                    i14 = 1;
                    do {
                        Test.iArrFld[i12] &= i9;
                        try {
                            i13 = (-239 % i13);
                            i13 = (-64313 / Test.iArrFld[i12 + 1]);
                            i13 = (i9 / Test.iArrFld[(i9 >>> 1) % N]);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount *= s;
                        Test.fArrFld[i10] = 37948;
                        i11 += (int)Test.instanceCount;
                        Test.instanceCount += (i14 * i9);
                        i11 |= i12;
                    } while (++i14 < 2);
                    i13 *= (int)Test.instanceCount;
                    break;
                }
            }
        }
        long meth_res = i9 + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + i14 + s;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth(int i7, float f2) {

        int i8=-10, i15=82, i16=56930, i17=-7736;
        boolean b=true, bArr[]=new boolean[N];
        byte by=-6;

        FuzzerUtils.init(bArr, false);

        i8 = 1;
        while (++i8 < 201) {
            if (bMeth(i7, Test.dFld) || b) break;
            bArr[i8 - 1] = b;
            Test.instanceCount += i8;
            i15 = 1;
            do {
                i7 += (((i15 * f2) + i8) - i15);
                i7 >>= 57128;
            } while (++i15 < 8);
        }
        i7 <<= i7;
        Test.iArrFld[(Test.iFld1 >>> 1) % N] += (int)Test.dFld;
        i7 >>= -2;
        for (i16 = 134; 3 < i16; i16 -= 3) {
            i7 >>= (int)Test.instanceCount;
            Test.iArrFld[i16 + 1] &= by;
            Test.fArrFld[i16 - 1] += by;
            Test.iFld1 = 42;
        }
        long meth_res = i7 + Float.floatToIntBits(f2) + i8 + (b ? 1 : 0) + i15 + i16 + i17 + by +
            FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i) {

        float f=1.720F, fArr[]=new float[N];
        int i1=41902, i2=0, i3=5, i4=-8, i5=14, i6=-145;
        short s1=-16114;

        FuzzerUtils.init(fArr, 87.460F);

        Test.instanceCount -= Long.reverseBytes(-2187064611379246730L);
        i *= (++Test.iArrFld[(i >>> 1) % N]);
        fArr[(i >>> 1) % N] -= (-f);
        for (i1 = 3; i1 < 126; ++i1) {
            for (i3 = 1; i3 < 13; ++i3) {
                for (i5 = 1; i5 < 2; i5++) {
                    Test.dFld -= (++Test.dFld);
                    fArr[i1 - 1] -= lMeth(i5, f);
                    i += i2;
                    fArr[(i6 >>> 1) % N] = s1;
                    Test.iFld1 += i5;
                    Test.iFld1 = s1;
                }
            }
            f += ((long)i1 ^ (long)f);
            i += i1;
            i6 += (7521 + (i1 * i1));
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + i6 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        float f3=1.179F;
        int i18=62, i19=50259, i20=-14, i21=-110, i22=144, i23=13;
        boolean b1=false;
        long l=118L;
        short s2=-5077;

        Test.dFld *= ((--Test.instanceCount) + iFld);
        iFld = (((iFld - -11897) - (iFld + 34092)) + Test.iArrFld[(iFld >>> 1) % N]);
        vMeth(Test.iFld1);
        f3 = (float)Test.dFld;
        for (i18 = 228; i18 > 11; i18--) {
            Test.instanceCount += (i18 * i18);
            Test.iFld1 += i18;
            Test.instanceCount += i19;
            Test.iArrFld[i18 + 1] |= (int)Test.instanceCount;
            b1 = b1;
            for (l = 7; l < 116; l += 3) {
                for (i21 = 1; i21 < 4; i21 += 2) {
                    switch (((i21 % 2) * 5) + 114) {
                    case 116:
                        f3 += Test.iFld1;
                        i20 += (int)l;
                        Test.instanceCount += (((i21 * i18) + i22) - Test.instanceCount);
                        if (true) break;
                        break;
                    case 118:
                        i22 *= (int)l;
                        break;
                    default:
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)13);
                        f3 = i21;
                        s2 *= (short)2511;
                        Test.iArrFld[i18 - 1] += i21;
                    }
                    i22 += (i21 ^ i22);
                    switch ((int)((l % 6) + 19)) {
                    case 19:
                        byArrFld[i21] &= (byte)iFld;
                    case 20:
                        Test.instanceCount >>= i21;
                        Test.instanceCount += (i21 * i21);
                        Test.iFld1 += (int)l;
                    case 21:
                        i23 >>= (int)Test.instanceCount;
                        Test.instanceCount = i18;
                        break;
                    case 22:
                        i23 += (i21 ^ i21);
                        break;
                    case 23:
                        iFld -= iFld;
                        break;
                    case 24:
                    }
                }
            }
        }

        FuzzerUtils.out.println("f3 i18 i19 = " + Float.floatToIntBits(f3) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("b1 l i20 = " + (b1 ? 1 : 0) + "," + l + "," + i20);
        FuzzerUtils.out.println("i21 i22 s2 = " + i21 + "," + i22 + "," + s2);
        FuzzerUtils.out.println("i23 = " + i23);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + iFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld Test.fArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("byArrFld = " + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
