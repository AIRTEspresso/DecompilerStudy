import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 02:36:34 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=5122183147755864801L;
    public static int iFld=-10;
    public static boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];

    static {
        init(Test.iArrFld, -23);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f) {

        int i1=6, i2=-24211, i3=38823, i4=-3652, i5=-6, i6=-54809;
        double d=-69.2332, dArr[]=new double[N];
        short s=-32617;

        init(dArr, -2.39078);

        for (i1 = 9; 333 > i1; ++i1) {
            Test.instanceCount = (long)f;
            Test.iFld = (int)0L;
            i2 -= i2;
            for (i3 = i1; i3 < 5; ++i3) {
                switch ((i3 % 9) + 116) {
                case 116:
                    f += (float)d;
                    Test.instanceCount -= i3;
                    f += (i3 - s);
                    for (i5 = 1; i5 < 1; i5++) {
                        i2 >>= i6;
                        dArr[i5] -= i4;
                        d -= Test.instanceCount;
                        i4 = (int)f;
                        i6 -= -9;
                    }
                case 117:
                    Test.iFld >>= (int)Test.instanceCount;
                case 118:
                    Test.iFld -= i1;
                case 119:
                    i4 <<= 0;
                    break;
                case 120:
                    i2 = -128;
                    break;
                case 121:
                    Test.iArrFld[i1] %= (int)(i2 | 1);
                    break;
                case 122:
                    Test.iFld >>= i2;
                case 123:
                    s = (short)i1;
                    break;
                case 124:
                    i4 += i3;
                    break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + s + i5 + i6 +
            Double.doubleToLongBits(checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l) {

        float f1=1.486F;
        int i7=-224, i8=-32262, i9=-91, i10=9, i11=107;

        Test.iFld <<= (int)(-((Test.instanceCount++) - (Test.iFld++)));
        Test.iFld -= (Test.iArrFld[(-236 >>> 1) % N] - iMeth(f1));
        i7 = 1;
        while (++i7 < 256) {
            for (i8 = 1; i8 < 6; i8++) {
                i9 += (((i8 * i7) + Test.iFld) - i9);
                i9 -= Test.iFld;
                Test.iFld >>>= (int)Test.instanceCount;
                Test.iFld -= i9;
                for (i10 = 2; i10 > 1; i10 -= 3) {
                    Test.iFld += i8;
                    switch (((i9 >>> 1) % 3) + 6) {
                    case 6:
                        i11 += (int)Test.instanceCount;
                        l = i11;
                        i9 += i10;
                        if (i9 != 0) {
                            vMeth1_check_sum += l + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11;
                            return;
                        }
                    case 7:
                        Test.iArrFld[i7] += 27231;
                        break;
                    case 8:
                        Test.iFld += (int)f1;
                    }
                }
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11;
    }

    public static void vMeth(int i) {

        int i12=4, i13=42463, i14=-196, i15=-53014, i16=-64581, i17=11, i18=2;
        byte by=-127;
        float f2=0.15F, fArr[]=new float[N];

        init(fArr, -71.821F);

        vMeth1(Test.instanceCount);
        Test.instanceCount ^= Test.iFld;
        for (i12 = 5; i12 < 248; i12++) {
            if (Test.bFld) {
                switch ((i12 % 2) + 122) {
                case 122:
                    for (i14 = 1; i14 < 7; ++i14) {
                        Test.instanceCount -= Test.instanceCount;
                        try {
                            Test.iFld = (i / 24413);
                            i13 = (-106 / i14);
                            i = (i15 / -8);
                        } catch (ArithmeticException a_e) {}
                        switch ((i12 % 5) + 71) {
                        case 71:
                            i16 |= (int)Test.instanceCount;
                            Test.iFld = 128;
                            by += (byte)(i14 * f2);
                        case 72:
                            for (i17 = 2; i17 > 1; --i17) {
                                Test.instanceCount /= (i15 | 1);
                                Test.iArrFld[i14 + 1] += (int)Test.instanceCount;
                            }
                            break;
                        case 73:
                            if (Test.bFld) break;
                            break;
                        case 74:
                            Test.iFld *= i17;
                            break;
                        case 75:
                            Test.iFld = i16;
                            break;
                        }
                    }
                    break;
                case 123:
                    by = (byte)-10387;
                    break;
                default:
                    fArr[i12 - 1] += i14;
                }
            } else {
                Test.instanceCount += i12;
            }
        }
        vMeth_check_sum += i + i12 + i13 + i14 + i15 + i16 + by + Float.floatToIntBits(f2) + i17 + i18 +
            Double.doubleToLongBits(checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {


        vMeth(14);


        System.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        System.out.println("Test.iArrFld = " + checkSum(Test.iArrFld));

        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
