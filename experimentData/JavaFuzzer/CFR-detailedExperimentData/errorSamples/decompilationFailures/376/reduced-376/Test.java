import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:41:01 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3693941265L;
    public static boolean bFld=true;
    public static float fFld=-31.681F;
    public short sFld=17401;
    public static volatile int iArrFld[]=new int[N];

    static {
        init(Test.iArrFld, 58);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(boolean b) {

        int i8=47924, i9=-9, i10=-60361, i11=2721, i12=-9, i13=6, iArr1[]=new int[N];
        float f2=1.702F;
        double d1=93.121787;

        init(iArr1, 193);

        i8 -= (int)f2;
        d1 += i8;
        i9 = 1;
        while (++i9 < 328) {
            i10 = 1;
            do {
                Test.instanceCount = i10;
                i8 -= 742;
                i11 = 1;
                do {
                    i8 >>= i10;
                    i8 += (i11 * i11);
                } while (++i11 < 1);
                iArr1[i9] -= 29245;
            } while (++i10 < 5);
            for (i12 = 1; i12 < 5; ++i12) {
                i8 >>>= i10;
            }
            i8 >>= i12;
            i8 += i9;
            i13 ^= i9;
        }
        long meth_res = (b ? 1 : 0) + i8 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i9 + i10 + i11 +
            i12 + i13 + checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(long l2, int i3) {

        double d=-82.119233;
        int i4=-35215, i5=-113, i6=1, i7=-150, iArr[]=new int[N];
        float f1=-23.356F;
        long lArr1[]=new long[N];

        init(lArr1, -1675037240L);
        init(iArr, 7);

        for (d = 8; d < 146; d++) {
            for (i5 = 1; i5 < 11; i5++) {
                f1 *= Math.min(--i4, (int)(i4 * (54059 + (--lArr1[i5 - 1]))));
                i7 = 1;
                do {
                    short s=17037;
                    switch ((i5 % 6) + 93) {
                    case 93:
                        iArr[i7 - 1] = (int)((Float.intBitsToFloat(i4) + (i4 + s)) - ((i7 + -165) * lMeth(Test.bFld)));
                        iArr = iArr;
                        iArr[(int)(d - 1)] ^= (int)Test.instanceCount;
                        i6 = i5;
                        break;
                    case 94:
                        i4 += (((i7 * i4) + l2) - i5);
                        i6 += (int)l2;
                        i4 -= i5;
                        break;
                    case 95:
                        i3 = i3;
                        iArr[i5] &= (int)l2;
                        try {
                            i4 = (-44798 / iArr[i7 + 1]);
                            i4 = (54885 / iArr[(int)(d)]);
                            i4 = (2072336639 / i5);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 96:
                        i3 -= i3;
                        break;
                    case 97:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 98:
                        iArr[i5] = i5;
                        break;
                    }
                } while (++i7 < 2);
            }
        }
        vMeth1_check_sum += l2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 +
            checkSum(lArr1) + checkSum(iArr);
    }

    public static void vMeth(long l, long l1, int i) {

        float f=14.176F;
        int i1=-86, i2=0, i14=-9, iArr2[]=new int[N];
        long l3=1663839326L, lArr[]=new long[N];

        init(lArr, -350440897L);
        init(iArr2, -28809);

        if (Test.bFld) {
            lArr[(i >>> 1) % N] *= (long)(((i * f) + (i * -43807L)) + f);
            for (i1 = 8; 207 > i1; ++i1) {
                vMeth1(Test.instanceCount, i1);
                try {
                    i2 = (-399906325 / i1);
                    i2 = (iArr2[i1] % i2);
                    i = (iArr2[i1] / i2);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount -= i;
            }
            for (l3 = 5; l3 < 313; l3++) {
                f *= i2;
                i2 += (int)61.227F;
                i2 += (int)4175365416L;
                i2 += (int)(((l3 * i2) + i2) - i2);
                if (false) continue;
                i2 = (int)Test.instanceCount;
                i2 = 7;
                i14 = i;
            }
        }
        vMeth_check_sum += l + l1 + i + Float.floatToIntBits(f) + i1 + i2 + l3 + i14 + checkSum(lArr) +
            checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i15=52964, i16=45938, i17=-24, i18=-204, i19=1, i20=-2, i21=-215, i22=9502;
        long l4=-1L, lArr2[]=new long[N];
        byte by=-1;
        double d2=-116.24286;
        float fArr[]=new float[N];

        init(fArr, 0.273F);
        init(lArr2, 6724907717687416936L);

        vMeth(Test.instanceCount, Test.instanceCount, i15);
        for (i16 = 17; i16 < 355; i16 += 3) {
            Test.instanceCount += i16;
            i17 += (((i16 * i17) + i15) - Test.fFld);
            if (false) {
                Test.instanceCount -= i16;
                i17 = i16;
            }
            if (Test.bFld) {
                for (i18 = 4; i18 < 224; i18++) {
                    i15 = i15;
                    Test.bFld = Test.bFld;
                    lArr2[i18 + 1] *= l4;
                    Test.instanceCount >>= i19;
                    i17 = (int)l4;
                    i19 += i17;
                    switch ((i16 % 9) + 109) {
                    case 109:
                        Test.bFld = Test.bFld;
                    case 110:
                    case 111:
                        Test.bFld = false;
                        for (i20 = 2; i20 > 1; i20--) {
                            i17 *= i20;
                            by -= (byte)-32055;
                            i15 = i18;
                            Test.iArrFld[i20 + 1] = i16;
                        }
                    case 112:
                        i17 += (-70 + (i18 * i18));
                        break;
                    case 113:
                        i19 += 5;
                        i21 = sFld;
                        for (d2 = 1; d2 < 2; d2++) {
                            i21 = 74;
                        }
                        by |= (byte)Test.instanceCount;
                        break;
                    case 114:
                    case 115:
                    case 116:
                        lArr2[i16] = 47133;
                    case 117:
                        i15 += (((i18 * Test.instanceCount) + i20) - Test.instanceCount);
                        break;
                    }
                }
            } else if (Test.bFld) {
                Test.instanceCount = i19;
            } else if (Test.bFld) {
                Test.instanceCount = i18;
            } else {
                i17 >>= (int)5L;
            }
        }

        System.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        System.out.println("i18 i19 l4 = " + i18 + "," + i19 + "," + l4);
        System.out.println("i20 i21 by = " + i20 + "," + i21 + "," + by);
        System.out.println("d2 i22 fArr = " + Double.doubleToLongBits(d2) + "," + i22 + "," +
            Double.doubleToLongBits(checkSum(fArr)));
        System.out.println("lArr2 = " + checkSum(lArr2));

        System.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        System.out.println("sFld Test.iArrFld = " + sFld + "," + checkSum(Test.iArrFld));

        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
