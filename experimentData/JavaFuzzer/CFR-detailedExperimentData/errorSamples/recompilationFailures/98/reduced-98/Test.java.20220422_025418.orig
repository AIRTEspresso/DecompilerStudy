import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 21:54:59 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2622L;
    public byte byFld=-112;
    public static byte byFld1=42;
    public static float fFld=-1.309F;
    public static double dFld=-1.8935;
    public static boolean bFld=true;
    public byte byArrFld[][]=new byte[N][N];
    public static int iArrFld[]=new int[N];

    static {
        init(Test.iArrFld, 36006);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i11) {

        short s1=9927;
        int i12=-44601, i13=53747, i14=175, i15=-54146, i16=119;
        float f=-104.495F;
        boolean b1=false;

        s1 = (short)Test.instanceCount;
        for (i12 = 16; i12 < 394; i12 += 3) {
            i14 = 1;
            while (++i14 < 12) {
                for (i15 = 1; i15 < 1; ++i15) {
                    i11 -= i16;
                    i13 += i15;
                    Test.instanceCount = Test.instanceCount;
                    i11 += (((i15 * s1) + f) - i14);
                }
                if (b1) {
                    i13 = (int)Test.instanceCount;
                } else {
                    if (true) continue;
                    Test.instanceCount <<= Test.instanceCount;
                    f += (-2 + (i14 * i14));
                    i16 += (((i14 * i13) + i11) - i11);
                }
                f += Test.instanceCount;
            }
        }
        vMeth1_check_sum += i11 + s1 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f) + (b1 ? 1 : 0);
    }

    public static float fMeth(double d, int i3, int i4) {

        int i5=62304, i6=12, i7=9546, i8=-13, i9=-4954, i10=-9, i17=-135, i18=-42;
        short s=2203;
        boolean b=false;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        init(byArr, (byte)-70);
        init(lArr, -7L);

        for (i5 = 6; i5 < 241; i5 += 3) {
            for (i7 = 1; 20 > i7; ++i7) {
                s += (short)(byArr[i7] = (byte)lArr[i5 + 1]);
                if (b) break;
            }
            for (i9 = i5; i9 < 20; i9++) {
                i4 += (((i9 * Test.byFld1) + i6) - i9);
            }
            vMeth1(i10);
            Test.fFld -= Test.fFld;
        }
        i4 <<= (int)Test.instanceCount;
        d -= 41195;
        for (i17 = 12; i17 < 262; ++i17) {
            Test.iArrFld[i17 + 1] += i9;
            i6 -= 36;
            i3 = i7;
            i3 -= Test.byFld1;
        }
        long meth_res = Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + i8 + s + (b ? 1 : 0) + i9 + i10 + i17 +
            i18 + checkSum(byArr) + checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l, long l1) {

        int i2=-44, i19=3, i20=9128, i21=-35469, i22=-31428, i23=21, i24=-10, i25=11, i26=9;
        boolean b2=true;
        float f1=90.839F;
        short s2=-19889;

        i2 = (int)((fMeth(15.48263, i2, -12) * l1) - l);
        for (i19 = 3; 363 > i19; i19++) {
            for (i21 = 1; i21 < 5; ++i21) {
                b2 = b2;
            }
            try {
                i23 = (i20 / i22);
                i20 = (i23 % -525730321);
                i20 = (i2 / 5995);
            } catch (ArithmeticException a_e) {}
            Test.dFld = 5;
            if (b2) {
                Test.iArrFld[i19 - 1] = i19;
                for (f1 = 1; f1 < 5; f1++) {
                    for (i25 = 1; i25 < 2; i25++) {
                        i22 >>>= i24;
                        l1 = s2;
                    }
                    Test.byFld1 = (byte)Test.instanceCount;
                    i20 = (int)Test.dFld;
                    i22 += (int)l1;
                }
            } else {
                Test.iArrFld[(12 >>> 1) % N] *= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += l + l1 + i2 + i19 + i20 + i21 + i22 + (b2 ? 1 : 0) + i23 + Float.floatToIntBits(f1) + i24 +
            i25 + i26 + s2;
    }

    public void mainTest(String[] strArr1) {

        int i=-1450, i1=-119, i27=-37295, i28=12, i29=135, i30=8, i31=-5675, i32=50, i33=-28650;
        short s3=-15536, s4=16795;
        long lArr1[][]=new long[N][N], lArr2[]=new long[N];

        init(lArr1, -12L);
        init(lArr2, 7L);

        i >>>= (int)(Test.instanceCount = (byFld + (--byArrFld[(i >>> 1) % N][(i >>> 1) % N])));
        Test.instanceCount -= (Test.instanceCount++);
        i1 = 1;
        while (++i1 < 348) {
            vMeth(Test.instanceCount, Test.instanceCount);
            Test.dFld += byFld;
        }
        for (i27 = 13; i27 < 269; i27++) {
            try {
                i = (i27 % 40164);
                i = (i1 / i);
                i28 = (i1 / -24168);
            } catch (ArithmeticException a_e) {}
            for (i29 = 5; i29 < 98; ++i29) {
                Test.instanceCount = Test.instanceCount;
                Test.bFld = Test.bFld;
                i = i30;
                Test.iArrFld[i29] ^= Test.byFld1;
                i28 = i29;
            }
            switch ((i27 % 5) + 63) {
            case 63:
                Test.fFld *= Test.fFld;
                switch (((i27 % 7) * 5) + 47) {
                case 74:
                    i31 = 1;
                    do {
                        Test.instanceCount = Test.instanceCount;
                        lArr1[i27 + 1][i27 - 1] += i30;
                        for (i32 = 1; i32 < 1; i32++) {
                            i28 <<= (int)Test.instanceCount;
                            Test.dFld = Test.instanceCount;
                            i <<= (int)Test.instanceCount;
                            i30 ^= i27;
                            Test.bFld = Test.bFld;
                            if (Test.bFld) {
                                switch (((i27 % 2) * 5) + 106) {
                                case 112:
                                    Test.iArrFld[i27] = 194;
                                    lArr2[i32 - 1] >>>= 251L;
                                    lArr1[i31][i32 + 1] >>>= i29;
                                    break;
                                case 109:
                                    Test.fFld = -154;
                                    break;
                                default:
                                    i28 += (i32 | i29);
                                }
                            } else if (Test.bFld) {
                                Test.dFld -= Test.instanceCount;
                            } else {
                                i += i33;
                            }
                        }
                    } while (++i31 < 98);
                    break;
                case 67:
                    i33 = i28;
                    break;
                case 65:
                    byFld &= (byte)7;
                    break;
                case 66:
                    i28 = -3777;
                    break;
                case 63:
                    i33 = s3;
                    break;
                case 80:
                    i30 += -33312;
                case 52:
                    i33 *= i1;
                }
            case 64:
                s4 *= (short)i30;
                break;
            case 65:
                i = i;
            case 66:
                i -= (int)Test.instanceCount;
                break;
            case 67:
                if (Test.bFld) break;
                break;
            }
        }

        System.out.println("i i1 i27 = " + i + "," + i1 + "," + i27);
        System.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        System.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        System.out.println("s3 s4 lArr1 = " + s3 + "," + s4 + "," + checkSum(lArr1));
        System.out.println("lArr2 = " + checkSum(lArr2));

        System.out.println("Test.instanceCount byFld Test.byFld1 = " + Test.instanceCount + "," + byFld + "," +
            Test.byFld1);
        System.out.println("Test.fFld Test.dFld Test.bFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        System.out.println("byArrFld Test.iArrFld = " + checkSum(byArrFld) + "," +
            checkSum(Test.iArrFld));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("fMeth_check_sum: " + fMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
