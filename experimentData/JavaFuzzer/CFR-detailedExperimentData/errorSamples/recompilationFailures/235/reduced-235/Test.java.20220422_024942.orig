import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 22:51:36 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public byte byFld=2;
    public static double dFld=1.15879;
    public static volatile byte byFld1=-37;
    public static float fFld=0.395F;
    public static volatile double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];
    public volatile int iArrFld[]=new int[N];

    static {
        init(Test.dArrFld, -2.69701);
        init(Test.fArrFld, -118.926F);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, int i1, int i2) {

        int i4=242, i5=-30539, i6=251, i7=8, i8=-12, iArr[]=new int[N], iArr1[][][]=new int[N][N][N];
        byte by=111;
        boolean b=false;
        float f1=-2.966F;
        short s=13171;

        init(iArr, -33890);
        init(iArr1, -12);

        i1 = (int)Test.instanceCount;
        for (int i3 : iArr) {
            i1 = i2;
            l1 += i2;
        }
        Test.dArrFld[(i2 >>> 1) % N] = 59648L;
        i2 *= 228;
        for (i4 = 3; i4 < 195; i4++) {
            by &= (byte)i2;
            if (b) break;
            for (i6 = i4; i6 < 8; i6++) {
                i8 = 1;
                while (++i8 < 1) {
                    iArr1 = iArr1;
                    i2 = (int)f1;
                    f1 += (((i8 * f1) + s) - i2);
                    i7 += i8;
                }
            }
        }
        vMeth_check_sum += l1 + i1 + i2 + i4 + i5 + by + (b ? 1 : 0) + i6 + i7 + i8 + Float.floatToIntBits(f1) + s +
            checkSum(iArr) + checkSum(iArr1);
    }

    public static long lMeth1(long l) {

        int i9=6, i10=12, i11=-4, i12=172, i13=-7, i14=-10, i15=-41008, iArr2[][]=new int[N][N];
        float f2=-86.297F;
        boolean b1=true;

        init(iArr2, -6);

        vMeth(l, 30684, i9);
        for (i10 = 3; i10 < 179; i10++) {
            f2 = 1;
            do {
                Test.fArrFld = Test.fArrFld;
                iArr2[(int)(f2 + 1)][i10 - 1] |= i10;
                iArr2[(int)(f2 - 1)][i10 + 1] += 1690;
                i9 *= (int)Test.dFld;
                Test.byFld1 += (byte)(6 + (f2 * f2));
                l += (long)(f2 * f2);
                for (i12 = 1; i12 < 3; i12++) {
                    Test.instanceCount += i10;
                }
            } while ((f2 += 3) < 9);
            l *= 128;
            for (i14 = 1; 9 > i14; ++i14) {
                Test.fArrFld[i10 + 1] *= i10;
                if (b1) continue;
            }
        }
        long meth_res = l + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) +
            checkSum(iArr2);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth() {

        double d=-2.69354;
        int i=-10, i16=0, i17=-177, i18=-33746, i19=137, i20=13, i21=130, iArr3[]=new int[N];

        init(iArr3, 181);

        d = ((-i) * ((i % (Test.instanceCount | 1)) >> (i % (i | 1))));
        i -= (int)(++d);
        lMeth1(Test.instanceCount);
        for (i16 = 7; i16 < 232; i16++) {
            for (i18 = i16; i18 < 7; ++i18) {
                i += (i18 * i18);
                for (i20 = 1; i20 < 1; i20++) {
                    boolean b2=false;
                    iArr3[i16] = (int)Test.fFld;
                    switch ((i20 % 3) + 126) {
                    case 126:
                        i17 -= i21;
                        break;
                    case 127:
                        Test.fFld %= (Test.instanceCount | 1);
                        i19 *= i21;
                    case 128:
                        Test.instanceCount += i18;
                        iArr3[i18] >>= 48994;
                        if (b2) continue;
                    default:
                        iArr3[i16 - 1] += (int)3373724346519035448L;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i + i16 + i17 + i18 + i19 + i20 + i21 +
            checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=1.187F;
        int i22=-6360, i23=-1, i26=-101, i27=49669, i28=10, i29=-14;
        double d1=1.65927;
        short s1=-26214, sArr[]=new short[N];
        long lArr[]=new long[N];
        byte byArr[][][]=new byte[N][N][N];

        init(lArr, -56288L);
        init(byArr, (byte)53);
        init(sArr, (short)-4381);

        byFld = (byte)((Math.abs(f) * lMeth()) - i22);
        lArr[(-32425 >>> 1) % N] /= (i22 | 1);
        iArrFld[(12 >>> 1) % N] *= i22;
        i22 = i22;
        i22 *= i22;
        i23 = 1;
        do {
            i22 += (i23 * i22);
            f *= 7;
            Test.dFld += Test.instanceCount;
            byArr = byArr;
            for (d1 = 4; 100 > d1; ++d1) {
                s1 += (short)(d1 - i26);
                i26 += (int)(d1 * d1);
            }
            switch ((i23 % 2) + 16) {
            case 16:
                Test.dFld = i23;
                Test.instanceCount += i26;
                Test.byFld1 >>= (byte)i26;
                break;
            case 17:
            default:
                i27 = 1;
                do {
                    i26 += (int)Test.instanceCount;
                    Test.dFld = 5;
                    for (i28 = i23; i28 < 1; ++i28) {
                        if (false) break;
                        sArr[i28] -= (short)Test.instanceCount;
                        iArrFld = iArrFld;
                        Test.instanceCount <<= 50575L;
                        switch (((i26 >>> 1) % 4) + 64) {
                        case 64:
                            iArrFld[i27] = (int)Test.instanceCount;
                            break;
                        case 65:
                        case 66:
                            i22 = (int)Test.instanceCount;
                            lArr[i27] = i22;
                            Test.instanceCount *= Test.instanceCount;
                            break;
                        case 67:
                            iArrFld[i23 - 1] = i22;
                            break;
                        }
                    }
                } while (++i27 < 100);
            }
        } while (++i23 < 252);

        System.out.println("f i22 i23 = " + Float.floatToIntBits(f) + "," + i22 + "," + i23);
        System.out.println("d1 i26 s1 = " + Double.doubleToLongBits(d1) + "," + i26 + "," + s1);
        System.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        System.out.println("lArr byArr sArr = " + checkSum(lArr) + "," + checkSum(byArr) +
            "," + checkSum(sArr));

        System.out.println("Test.instanceCount byFld Test.dFld = " + Test.instanceCount + "," + byFld + "," +
            Double.doubleToLongBits(Test.dFld));
        System.out.println("Test.byFld1 Test.fFld Test.dArrFld = " + Test.byFld1 + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(checkSum(Test.dArrFld)));
        System.out.println("Test.fArrFld iArrFld = " + Double.doubleToLongBits(checkSum(Test.fArrFld))
            + "," + checkSum(iArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
