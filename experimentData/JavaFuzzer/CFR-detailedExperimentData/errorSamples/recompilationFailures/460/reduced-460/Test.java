import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Thu Jan  6 00:12:06 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2085349214L;
    public static double dFld=0.90949;
    public static short sFld=3971;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        init(Test.iArrFld, -136);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {

        int i4=41, i5=11, i6=127, i7=-4, i8=-9097, i9=-1978, i10=0, i11=-9589;
        boolean b=false;
        float f1=-97.969F;
        long lArr[][]=new long[N][N];

        init(lArr, -13L);

        try {
            for (i4 = 11; i4 < (190 + 400); ++i4) {
                b = b;
                if (b) {
                    for (i6 = 1 - 400; i6 < 4; i6++) {
                        for (i8 = 1 - 400; i8 < 1; i8++) {
                            Test.dFld = i7;
                        }
                    }
                } else {
                    Test.iArrFld[i4] -= -12;
                }
                b = b;
                i5 = (int)Test.instanceCount;
                for (i10 = 1; i10 < 4; ++i10) {
                    short s=25880;
                    if (false) continue;
                    lArr = lArr;
                    Test.dFld -= f1;
                    s += (short)i8;
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            i11 = i11;
        }
        long meth_res = i4 + i5 + (b ? 1 : 0) + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) +
            checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(double d1, long l1) {

        float f=-120.854F, fArr1[]=new float[N];
        int i12=-7676, i13=-65008, i14=23, i15=9, i16=0, i17=-24505;
        boolean b1=false;

        init(fArr1, 1.466F);

        f += (lMeth1() - i12);
        for (i13 = 1; i13 < 149; ++i13) {
            Test.instanceCount = -188;
            for (i15 = 1; i15 < 11; ++i15) {
                Test.iArrFld[i15 + 1] >>= i17;
                Test.instanceCount -= i13;
                i12 = i17;
                i14 = (int)Test.instanceCount;
                i17 += 9;
                b1 = false;
                i17 = i12;
                l1 += (((i15 * Test.sFld) + i13) - Test.sFld);
                i14 += (((i15 * i13) + i14) - i13);
            }
        }
        Test.dFld = i13;
        Test.instanceCount -= i17;
        long meth_res = Double.doubleToLongBits(d1) + l1 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + i16 + i17
            + (b1 ? 1 : 0) + Double.doubleToLongBits(checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(double d, long l) {

        int i=177, i1=-132, i2=2, i3=-200, i18=11245, i19=-21, i20=2;
        float f3=0.441F, fArr[]=new float[N];
        byte by=-61;
        long l2=-1424L;
        boolean b2=false;

        init(fArr, -5.468F);

        for (i = 2; 136 > i; ++i) {
            for (i2 = i; i2 < 12; ++i2) {
                fArr[i - 1] = (float)((Test.instanceCount--) + (-95.28634 - (-5 + (l--))));
                i3 = (i3++);
            }
            i1 += i;
            Test.iArrFld[i] >>= (int)lMeth(119.68848, l);
            f3 = by;
        }
        for (i18 = 218; i18 > 7; --i18) {
            i3 *= (int)f3;
            for (l2 = 1; l2 < 8; l2++) {
                if (true) {
                    i1 *= -12;
                }
                Test.iArrFld[i18] <<= i19;
                if (b2) break;
                i20 = i18;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l + i + i1 + i2 + i3 + Float.floatToIntBits(f3) + by + i18 + i19 +
            l2 + i20 + (b2 ? 1 : 0) + Double.doubleToLongBits(checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2=-1.45484;
        int i21=21343, i22=-3, i23=-43216;
        float f4=2.136F, fArr2[]=new float[N];
        byte by1=-7, byArr[]=new byte[N];

        init(fArr2, -49.647F);
        init(byArr, (byte)-122);

        iMeth(Test.dFld, Test.instanceCount);
        Test.bFld = Test.bFld;
        d2 = 1;
        do {
            i21 += (int)(((d2 * i21) + f4) - by1);
            i22 = 1;
            do {
                i23 = 1;
                while (--i23 > 0) {
                    if (Test.bFld) break;
                    i21 += (i23 + i22);
                    i21 *= i22;
                    i21 |= i21;
                    Test.sFld += (short)i23;
                    i21 += i23;
                    try {
                        i21 = (i21 / i21);
                        i21 = (Test.iArrFld[i23] / i21);
                        Test.iArrFld[i23 - 1] = (i22 / 91);
                    } catch (ArithmeticException a_e) {}
                    fArr2[(int)(d2 + 1)] -= Test.instanceCount;
                    i21 += (((i23 * i23) + i21) - Test.instanceCount);
                    try {
                        i21 = (51458 % Test.iArrFld[i23]);
                        i21 = (-51783 % Test.iArrFld[i22 - 1]);
                        i21 = (4501 % i22);
                    } catch (ArithmeticException a_e) {}
                }
                i21 = i23;
                if (Test.bFld) break;
                bArrFld[(int)(d2 + 1)] = Test.bFld;
                switch ((i22 % 2) + 18) {
                case 18:
                    byArr[(int)(d2)] = by1;
                    i21 += (i22 - Test.instanceCount);
                    Test.sFld = (short)Test.instanceCount;
                    break;
                case 19:
                    i21 += (int)Test.instanceCount;
                    Test.iArrFld[i22 - 1] -= (int)Test.instanceCount;
                    f4 *= i22;
                    i21 -= -59347;
                default:
                    if (Test.bFld) {
                        i21 += i21;
                        f4 += i22;
                    } else if (true) {
                        i21 += (((i22 * i23) + Test.instanceCount) - i21);
                    } else if (Test.bFld) {
                        fArr2[i22 + 1] += i21;
                    }
                }
            } while (++i22 < 142);
        } while (++d2 < 177);

        System.out.println("d2 i21 f4 = " + Double.doubleToLongBits(d2) + "," + i21 + "," +
            Float.floatToIntBits(f4));
        System.out.println("by1 i22 i23 = " + by1 + "," + i22 + "," + i23);
        System.out.println("fArr2 byArr = " + Double.doubleToLongBits(checkSum(fArr2)) + "," +
            checkSum(byArr));

        System.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        System.out.println("Test.bFld Test.iArrFld bArrFld = " + (Test.bFld ? 1 : 0) + "," +
            checkSum(Test.iArrFld) + "," + checkSum(bArrFld));

        System.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
        System.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
