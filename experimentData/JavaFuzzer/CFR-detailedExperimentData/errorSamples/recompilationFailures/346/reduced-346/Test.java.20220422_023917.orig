import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 23:29:52 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=7607L;
    public static double dFld=-62.37278;
    public boolean bFld=false;
    public static int iArrFld[][]=new int[N][N];

    static {
        init(Test.iArrFld, -24202);
    }

    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l2, int i7) {

        int i8=-2, i9=21659, i10=-26456, i11=8, iArr[]=new int[N];
        float f2=-2.320F, f3=-7.200F;
        short s1=26967;

        init(iArr, 63918);

        i7 >>>= i7;
        i8 = 1;
        while (++i8 < 333) {
            iArr[i8] = -2;
            i7 -= (int)f2;
            i7 += (((i8 * s1) + i7) - i7);
            f2 += (i8 - Test.instanceCount);
            i7 = (int)Test.dFld;
            i7 = i8;
            f2 += i8;
        }
        for (i9 = 4; i9 < 377; ++i9) {
            i7 %= (int)((long)(Test.dFld) | 1);
            i7 += (i9 * i9);
            for (f3 = 5; f3 > i9; --f3) {
                i7 += (int)f3;
            }
            i7 = i11;
        }
        vMeth_check_sum += l2 + i7 + i8 + Float.floatToIntBits(f2) + s1 + i9 + i10 + Float.floatToIntBits(f3) + i11 +
            checkSum(iArr);
    }

    public static long lMeth(long l, long l1, short s) {

        int i5=-25140, i6=-7224;
        byte by=55;

        for (i5 = 7; i5 < 345; ++i5) {
            l >>= i6;
            vMeth(l1, i5);
        }
        i6 += (int)l1;
        by = (byte)s;
        long meth_res = l + l1 + s + i5 + i6 + by;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public float fMeth(int i4) {

        float f1=4.420F;
        int i12=-14, i13=53165, i14=-6, i15=-8775, i16=235, i17=-31349, i18=18861;
        boolean b=true;
        long lArr[][][]=new long[N][N][N];

        init(lArr, 1865655428788013374L);

        f1 = (i4 + lMeth(Test.instanceCount, Test.instanceCount, (short)(26807)));
        for (i12 = 6; i12 < 398; ++i12) {
            i13 += (((i12 * i4) + i12) - i13);
            for (i14 = 1; i14 < 4; i14++) {
                for (i16 = 2; i16 > 1; i16--) {
                    if (false) break;
                    Test.iArrFld = Test.iArrFld;
                    i18 = -14;
                }
                lArr[i12 - 1][i14][i14] = i18;
                if (b) {
                    if (false) continue;
                    Test.instanceCount += (i14 ^ i15);
                    i18 += i18;
                } else if (b) {
                    try {
                        i13 = (-42309 / i12);
                        i18 = (Test.iArrFld[i12][i14 + 1] / i14);
                        Test.iArrFld[i12 - 1][i14 - 1] = (i12 % i15);
                    } catch (ArithmeticException a_e) {}
                    lArr[i12][i14 + 1] = lArr[i12][i14 - 1];
                }
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) +
            checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=1.18F, fArr[]=new float[N];
        int i=-25868, i1=45791, i2=-10, i3=-242, i19=-133, i20=1, i21=62816, i22=-11, i23=108, i24=-21675;
        short s2=17627;
        byte by1=-2;
        long lArr1[]=new long[N];

        init(lArr1, 2643954517L);
        init(fArr, -18.36F);

        f = 268;
        while (--f > 0) {
            for (i = 4; i < 94; i++) {
                for (i2 = 1; i2 < 2; ++i2) {
                    Test.instanceCount += i2;
                    Test.instanceCount <<= (long)(((-(i3++)) + fMeth(47893)) + i);
                    Test.iArrFld[(int)(f - 1)][(i2 >>> 1) % N] = (int)Test.instanceCount;
                    if (bFld) continue;
                    i1 /= (int)(i | 1);
                }
                Test.dFld = f;
                s2 = (short)i2;
            }
        }
        for (i19 = 10; 366 > i19; ++i19) {
            for (i21 = 1; 71 > i21; i21++) {
                for (i23 = 1; i23 < 2; i23++) {
                    if (bFld) {
                        lArr1[i21 + 1] = i19;
                        Test.iArrFld[i21 + 1][i21 + 1] += -67;
                        i20 += -86;
                        i24 += (-18 + (i23 * i23));
                    }
                    if (false) {
                        i1 += i23;
                        Test.instanceCount *= i2;
                        i24 -= 24532;
                    } else if (bFld) {
                        fArr[i23 - 1] += by1;
                        Test.dFld = i20;
                        i22 = i21;
                    } else if (true) {
                        if (bFld) break;
                        i24 = -105;
                        try {
                            i24 = (i22 / -36975);
                            i24 = (i2 / i22);
                            i22 = (i19 / i2);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += Test.instanceCount;
                    } else {
                        i3 = -55037;
                    }
                }
            }
        }

        System.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        System.out.println("i2 i3 s2 = " + i2 + "," + i3 + "," + s2);
        System.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        System.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        System.out.println("by1 lArr1 fArr = " + by1 + "," + checkSum(lArr1) + "," +
            Double.doubleToLongBits(checkSum(fArr)));

        System.out.println("Test.instanceCount Test.dFld bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (bFld ? 1 : 0));
        System.out.println("Test.iArrFld = " + checkSum(Test.iArrFld));

        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
        System.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
