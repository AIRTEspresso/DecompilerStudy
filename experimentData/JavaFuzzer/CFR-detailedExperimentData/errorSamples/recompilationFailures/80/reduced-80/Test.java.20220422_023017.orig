import java.util.concurrent.atomic.AtomicLong;
import java.io.PrintStream;
import java.util.Random;
// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan  5 21:49:35 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=2578945836651582030L;
    public static volatile double dFld=126.43486;
    public static boolean bFld=true;
    public long lFld=-3L;
    public static int iFld=-17551;
    public static boolean bFld1=true;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static volatile double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];
    public boolean bArrFld[][][]=new boolean[N][N][N];
    public volatile float fArrFld[]=new float[N];

    static {
        init(Test.iArrFld, 252);
        init(Test.byArrFld, (byte)-34);
        init(Test.dArrFld, 2.98285);
        init(Test.lArrFld, 2162L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, double d, int i5) {

        int i6=17593, i7=-30939, i9=-21203, i10=-8589;
        float f=-97.867F, fArr[]=new float[N];
        boolean b=true;
        short s2=28457, sArr[]=new short[N];

        init(fArr, 72.294F);
        init(sArr, (short)18200);

        for (i6 = 9; i6 < 150; ++i6) {
            Test.instanceCount *= Test.instanceCount;
            switch (((i6 % 6) * 5) + 83) {
            case 89:
                Test.instanceCount = (long)f;
                Test.iArrFld[i6] >>= (int)2610967487L;
                i7 = (int)-2232976736L;
                break;
            case 97:
                i7 -= (int)f;
                if (b) break;
                break;
            case 111:
                Test.byArrFld[i6 - 1] = (byte)-7817;
                for (i9 = i6; i9 < 11; i9++) {
                    i10 += (((i9 * Test.instanceCount) + Test.instanceCount) - f);
                    i5 += (i9 * i6);
                    fArr[i6] = -1212;
                    Test.iArrFld[i6] = i6;
                    Test.instanceCount += i9;
                }
            case 94:
                i4 = i5;
            case 110:
                i5 += (int)d;
                break;
            case 109:
                i10 += s2;
            default:
                i10 = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + i9
            + i10 + s2 + Double.doubleToLongBits(checkSum(fArr)) + checkSum(sArr);
    }

    public static long lMeth(long l) {

        int i11=109, i12=167, i13=-12, i14=-56782, i15=8, i16=-24209;
        float f1=-3.447F;
        long lArr[][][]=new long[N][N][N];

        init(lArr, 117L);

        vMeth1(i11, Test.dFld, i11);
        i12 = 1;
        do {
            lArr[i12][i12][i12] += 0;
            for (i13 = i12; 5 > i13; ++i13) {
                lArr[i12][i13][i12 - 1] *= i14;
                i11 <<= i11;
                if (true) break;
                if (Test.bFld) continue;
                Test.bFld = Test.bFld;
            }
            for (i15 = 1; i15 < 5; ++i15) {
                i14 = i14;
                try {
                    i11 = (-135 / i15);
                    i14 = (i13 / i12);
                    i14 = (i13 / i11);
                } catch (ArithmeticException a_e) {}
                l = l;
            }
            Test.dArrFld[i12] -= f1;
        } while (++i12 < 352);
        Test.iArrFld[(i16 >>> 1) % N] -= i16;
        long meth_res = l + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i1, short s) {

        int i2=-6, i3=23342, i17=-152, i18=-63;
        byte by=34;
        long l1=-2059223996L;
        float f2=-83.595F, fArr1[][]=new float[N][N];

        init(fArr1, 0.28F);

        for (i2 = 10; i2 < 381; ++i2) {
            i1 += (int)((-lMeth(32L)) + -63);
            Test.iArrFld[i2 - 1] = (int)-104.124661;
            lFld += i1;
            by = (byte)i1;
            i17 = 1;
            do {
                for (l1 = 1; l1 < 1; l1++) {
                    Test.lArrFld[i2] -= i18;
                    i3 <<= (int)l1;
                    bArrFld[i2 + 1][(int)(l1 - 1)][(int)(l1 + 1)] = true;
                    switch ((i2 % 10) + 74) {
                    case 74:
                        Test.dFld -= i3;
                        f2 = -100;
                        by >>= (byte)i18;
                        i1 >>= (int)lFld;
                        break;
                    case 75:
                        i18 = i1;
                        break;
                    case 76:
                        i18 = i3;
                        break;
                    case 77:
                        Test.lArrFld[(-20 >>> 1) % N] *= lFld;
                        break;
                    case 78:
                        fArr1 = fArr1;
                        break;
                    case 79:
                        i1 += i17;
                        break;
                    case 80:
                        i3 = 9;
                        break;
                    case 81:
                        f2 = f2;
                    case 82:
                        if (i1 != 0) {
                            vMeth_check_sum += i1 + s + i2 + i3 + by + i17 + l1 + i18 + Float.floatToIntBits(f2) +
                                Double.doubleToLongBits(checkSum(fArr1));
                            return;
                        }
                        break;
                    case 83:
                        if (i3 != 0) {
                            vMeth_check_sum += i1 + s + i2 + i3 + by + i17 + l1 + i18 + Float.floatToIntBits(f2) +
                                Double.doubleToLongBits(checkSum(fArr1));
                            return;
                        }
                        break;
                    default:
                        i1 = (int)4104922033L;
                    }
                }
            } while (++i17 < 5);
        }
        vMeth_check_sum += i1 + s + i2 + i3 + by + i17 + l1 + i18 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(checkSum(fArr1));
    }

    public void mainTest(String[] strArr3) {

        short s3=13179;
        byte by1=5;
        int i20=25883, i21=67, i22=-53343;
        float f3=-6.54F;

        vMeth(Test.iFld, s3);
        for (int i19 : Test.iArrFld) {
            by1 *= (byte)-29373;
            i20 = 1;
            do {
                Test.dFld -= Test.instanceCount;
                try {
                    Test.iFld = (-32244 % i20);
                    i19 = (184 / i19);
                    i19 = (-56991 / i19);
                } catch (ArithmeticException a_e) {}
                i19 = s3;
                Test.dFld = f3;
                i19 = Test.iFld;
                Test.instanceCount >>= Test.iFld;
                lFld += i19;
            } while (++i20 < 63);
            switch ((((Test.iFld >>> 1) % 10) * 5) + 47) {
            case 56:
                Test.lArrFld[(i19 >>> 1) % N] = i19;
            case 50:
                Test.iArrFld[(i20 >>> 1) % N] = 3;
                switch ((((i19 >>> 1) % 2) * 5) + 50) {
                case 53:
                    try {
                        i19 = (Test.iFld % 639891475);
                        Test.iFld = (Test.iFld / Test.iFld);
                        Test.iArrFld[(i19 >>> 1) % N] = (568095387 % Test.iArrFld[(i20 >>> 1) % N]);
                    } catch (ArithmeticException a_e) {}
                    for (i21 = 63; 1 < i21; i21--) {
                        f3 *= lFld;
                        f3 -= i21;
                    }
                    switch (((149 >>> 1) % 3) + 97) {
                    case 97:
                        if (Test.bFld) {
                            switch (((i20 >>> 1) % 9) + 83) {
                            case 83:
                                if (Test.bFld) continue;
                                Test.iArrFld[(i22 >>> 1) % N] &= (int)14L;
                                Test.bFld = Test.bFld1;
                            case 84:
                                try {
                                    Test.iFld = (i19 % i19);
                                    i22 = (-1429891635 / Test.iArrFld[(i19 >>> 1) % N]);
                                    i19 = (Test.iFld % i21);
                                } catch (ArithmeticException a_e) {}
                                switch (((i21 >>> 1) % 3) + 43) {
                                case 43:
                                    f3 = f3;
                                    i22 = (int)f3;
                                    s3 *= (short)-5736;
                                    break;
                                case 44:
                                    Test.instanceCount = i20;
                                    break;
                                case 45:
                                    Test.instanceCount = Test.instanceCount;
                                default:
                                    i22 -= (int)lFld;
                                }
                            case 85:
                                by1 = (byte)Test.dFld;
                            case 86:
                                f3 = Test.iFld;
                            case 87:
                                Test.iArrFld[(i21 >>> 1) % N] *= Test.iFld;
                            case 88:
                                try {
                                    i19 = (Test.iArrFld[(-33681 >>> 1) % N] / i20);
                                    Test.iArrFld[(i19 >>> 1) % N] = (41983 % Test.iArrFld[(3 >>> 1) % N]);
                                    i22 = (Test.iArrFld[(i19 >>> 1) % N] / i22);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 89:
                                try {
                                    i22 = (i20 / 63);
                                    i22 = (i21 % i21);
                                    Test.iFld = (Test.iFld % -22022);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 90:
                                try {
                                    i19 = (i22 % -1879834875);
                                    Test.iFld = (Test.iFld / -105);
                                    i19 = (i21 / i22);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 91:
                                if (Test.bFld) break;
                                break;
                            }
                        }
                        break;
                    case 98:
                        Test.lArrFld[(4 >>> 1) % N] = 227L;
                        break;
                    case 99:
                        Test.iFld = i22;
                        break;
                    default:
                        i22 = (int)Test.instanceCount;
                    }
                    break;
                case 52:
                    try {
                        Test.iFld = (i21 % i19);
                        Test.iFld = (i22 / Test.iArrFld[(Test.iFld >>> 1) % N]);
                        Test.iArrFld[(Test.iFld >>> 1) % N] = (3707 / i22);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
                break;
            case 61:
                Test.iFld += (int)-1.486F;
            case 85:
                i22 += (int)Test.instanceCount;
                break;
            case 95:
                Test.dFld = f3;
            case 55:
                i19 = i19;
                break;
            case 68:
                Test.iArrFld[(i22 >>> 1) % N] += (int)Test.dFld;
                break;
            case 74:
                Test.dFld *= Test.instanceCount;
            case 76:
                i19 -= i20;
                break;
            case 51:
                i22 += i22;
                break;
            default:
                i22 -= (int)f3;
            }
        }

        System.out.println("s3 by1 i20 = " + s3 + "," + by1 + "," + i20);
        System.out.println("f3 i21 i22 = " + Float.floatToIntBits(f3) + "," + i21 + "," + i22);

        System.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        System.out.println("lFld Test.iFld Test.bFld1 = " + lFld + "," + Test.iFld + "," + (Test.bFld1 ? 1 : 0));
        System.out.println("Test.iArrFld Test.byArrFld Test.dArrFld = " + checkSum(Test.iArrFld) + ","
            + checkSum(Test.byArrFld) + "," + Double.doubleToLongBits(checkSum(Test.dArrFld)));
        System.out.println("Test.lArrFld bArrFld fArrFld = " + checkSum(Test.lArrFld) + "," +
            checkSum(bArrFld) + "," + Double.doubleToLongBits(checkSum(fArrFld)));

        System.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        System.out.println("lMeth_check_sum: " + lMeth_check_sum);
        System.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
                _instance.mainTest(strArr2);
         } catch (Exception ex) {
            System.out.println(ex.getClass().getCanonicalName());
         }
    }
    public static PrintStream out = System.out;
    public static Random random = new Random(1);
    public static long seed = 1L;
    public static int UnknownZero = 0;


    public static int nextInt(){
        return random.nextInt();
    }
    public static long nextLong(){
        return random.nextLong();
    }
    public static float nextFloat(){
        return random.nextFloat();
    }
    public static double nextDouble(){
        return random.nextDouble();
    }
    public static boolean nextBoolean(){
        return random.nextBoolean();
    }
    public static byte nextByte(){
        return (byte)random.nextInt();
    }
    public static short nextShort(){
        return (short)random.nextInt();
    }
    public static char nextChar(){
        return (char)random.nextInt();
    }

    public static void init(boolean[] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed : (j % 3 == 0);
        }
    }

    public static void init(boolean[][] a, boolean seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(long[] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(long[][] a, long seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(int[] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(int[][] a, int seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(short[] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (short) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(short[][] a, short seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(char[] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (char) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(char[][] a, char seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(byte[] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (byte) ((j % 2 == 0) ? seed + j : seed - j);
        }
    }

    public static void init(byte[][] a, byte seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(double[] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(double[][] a, double seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(float[] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            a[j] = (j % 2 == 0) ? seed + j : seed - j;
        }
    }

    public static void init(float[][] a, float seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }


    public static void init(Object[][] a, Object seed) {
        for (int j = 0; j < a.length; j++) {
            init(a[j], seed);
        }
    }

    public static void init(Object[] a, Object seed) {
        for (int j = 0; j < a.length; j++)
            try {
                a[j] = seed.getClass().newInstance();
            } catch (Exception ex) {
                a[j] = seed;
            }
    }

    public static long checkSum(boolean[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] ? j + 1 : 0);
        }
        return sum;
    }

    public static long checkSum(boolean[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(long[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(long[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(int[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(int[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(short[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (short) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(short[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(char[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (char) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(char[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(byte[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (byte) (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static long checkSum(byte[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(double[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(double[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static double checkSum(float[] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += (a[j] / (j + 1) + a[j] % (j + 1));
        }
        return sum;
    }

    public static double checkSum(float[][] a) {
        double sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }


    public static long checkSum(Object[][] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]);
        }
        return sum;
    }

    public static long checkSum(Object[] a) {
        long sum = 0;
        for (int j = 0; j < a.length; j++) {
            sum += checkSum(a[j]) * Math.pow(2, j);
        }
        return sum;
    }

    public static long checkSum(Object a) {
        if (a == null)
            return 0L;
        return (long) a.getClass().getCanonicalName().length();
    }


    public static byte[] byte1array(int sz, byte seed) {
        byte[] ret = new byte[sz];
        init(ret, seed);
        return ret;
    }

    public static byte[][] byte2array(int sz, byte seed) {
        byte[][] ret = new byte[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static short[] short1array(int sz, short seed) {
        short[] ret = new short[sz];
        init(ret, seed);
        return ret;
    }

    public static short[][] short2array(int sz, short seed) {
        short[][] ret = new short[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static int[] int1array(int sz, int seed) {
        int[] ret = new int[sz];
        init(ret, seed);
        return ret;
    }

    public static int[][] int2array(int sz, int seed) {
        int[][] ret = new int[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static long[] long1array(int sz, long seed) {
        long[] ret = new long[sz];
        init(ret, seed);
        return ret;
    }

    public static long[][] long2array(int sz, long seed) {
        long[][] ret = new long[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static float[] float1array(int sz, float seed) {
        float[] ret = new float[sz];
        init(ret, seed);
        return ret;
    }

    public static float[][] float2array(int sz, float seed) {
        float[][] ret = new float[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static double[] double1array(int sz, double seed) {
        double[] ret = new double[sz];
        init(ret, seed);
        return ret;
    }

    public static double[][] double2array(int sz, double seed) {
        double[][] ret = new double[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static char[] char1array(int sz, char seed) {
        char[] ret = new char[sz];
        init(ret, seed);
        return ret;
    }

    public static char[][] char2array(int sz, char seed) {
        char[][] ret = new char[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static Object[] Object1array(int sz, Object seed) {
        Object[] ret = new Object[sz];
        init(ret, seed);
        return ret;
    }

    public static Object[][] Object2array(int sz, Object seed) {
        Object[][] ret = new Object[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[] boolean1array(int sz, boolean seed) {
        boolean[] ret = new boolean[sz];
        init(ret, seed);
        return ret;
    }

    public static boolean[][] boolean2array(int sz, boolean seed) {
        boolean[][] ret = new boolean[sz][sz];
        init(ret, seed);
        return ret;
    }

    public static AtomicLong runningThreads = new AtomicLong(0);

    public static synchronized void runThread(Runnable r) {
        final Thread t = new Thread(r);
        t.start();
        runningThreads.incrementAndGet();
        Thread t1 = new Thread(new Runnable() {
            public void run() {
                try {
                    t.join();
                    runningThreads.decrementAndGet();
                } catch (InterruptedException e) {
                }
            }
        });
        t1.start();
    }

    public static void joinThreads() {
        while (runningThreads.get() > 0) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
